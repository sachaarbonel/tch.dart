// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to `third_party/torch_api.h`.
class Torch {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  Torch(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  ffi.Pointer<ffi.Int8> get_and_reset_last_err() {
    _get_and_reset_last_err ??= _dylib.lookupFunction<_c_get_and_reset_last_err,
        _dart_get_and_reset_last_err>('get_and_reset_last_err');
    return _get_and_reset_last_err();
  }

  _dart_get_and_reset_last_err _get_and_reset_last_err;

  void at_manual_seed(
    int arg0,
  ) {
    _at_manual_seed ??=
        _dylib.lookupFunction<_c_at_manual_seed, _dart_at_manual_seed>(
            'at_manual_seed');
    return _at_manual_seed(
      arg0,
    );
  }

  _dart_at_manual_seed _at_manual_seed;

  ffi.Pointer<ffi.Void> at_new_tensor() {
    _at_new_tensor ??= _dylib
        .lookupFunction<_c_at_new_tensor, _dart_at_new_tensor>('at_new_tensor');
    return _at_new_tensor();
  }

  _dart_at_new_tensor _at_new_tensor;

  ffi.Pointer<ffi.Void> at_tensor_of_data(
    ffi.Pointer<ffi.Void> vs,
    ffi.Pointer<ffi.Int64> dims,
    int ndims,
    int element_size_in_bytes,
    int type,
  ) {
    _at_tensor_of_data ??=
        _dylib.lookupFunction<_c_at_tensor_of_data, _dart_at_tensor_of_data>(
            'at_tensor_of_data');
    return _at_tensor_of_data(
      vs,
      dims,
      ndims,
      element_size_in_bytes,
      type,
    );
  }

  _dart_at_tensor_of_data _at_tensor_of_data;

  void at_copy_data(
    ffi.Pointer<ffi.Void> tensor,
    ffi.Pointer<ffi.Void> vs,
    int numel,
    int element_size_in_bytes,
  ) {
    _at_copy_data ??= _dylib
        .lookupFunction<_c_at_copy_data, _dart_at_copy_data>('at_copy_data');
    return _at_copy_data(
      tensor,
      vs,
      numel,
      element_size_in_bytes,
    );
  }

  _dart_at_copy_data _at_copy_data;

  ffi.Pointer<ffi.Void> at_shallow_clone(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    _at_shallow_clone ??=
        _dylib.lookupFunction<_c_at_shallow_clone, _dart_at_shallow_clone>(
            'at_shallow_clone');
    return _at_shallow_clone(
      arg0,
    );
  }

  _dart_at_shallow_clone _at_shallow_clone;

  ffi.Pointer<ffi.Void> at_data_ptr(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    _at_data_ptr ??=
        _dylib.lookupFunction<_c_at_data_ptr, _dart_at_data_ptr>('at_data_ptr');
    return _at_data_ptr(
      arg0,
    );
  }

  _dart_at_data_ptr _at_data_ptr;

  int at_defined(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    _at_defined ??=
        _dylib.lookupFunction<_c_at_defined, _dart_at_defined>('at_defined');
    return _at_defined(
      arg0,
    );
  }

  _dart_at_defined _at_defined;

  int at_is_sparse(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    _at_is_sparse ??= _dylib
        .lookupFunction<_c_at_is_sparse, _dart_at_is_sparse>('at_is_sparse');
    return _at_is_sparse(
      arg0,
    );
  }

  _dart_at_is_sparse _at_is_sparse;

  int at_device(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    _at_device ??=
        _dylib.lookupFunction<_c_at_device, _dart_at_device>('at_device');
    return _at_device(
      arg0,
    );
  }

  _dart_at_device _at_device;

  int at_dim(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    _at_dim ??= _dylib.lookupFunction<_c_at_dim, _dart_at_dim>('at_dim');
    return _at_dim(
      arg0,
    );
  }

  _dart_at_dim _at_dim;

  void at_shape(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Int64> arg1,
  ) {
    _at_shape ??=
        _dylib.lookupFunction<_c_at_shape, _dart_at_shape>('at_shape');
    return _at_shape(
      arg0,
      arg1,
    );
  }

  _dart_at_shape _at_shape;

  void at_stride(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Int64> arg1,
  ) {
    _at_stride ??=
        _dylib.lookupFunction<_c_at_stride, _dart_at_stride>('at_stride');
    return _at_stride(
      arg0,
      arg1,
    );
  }

  _dart_at_stride _at_stride;

  int at_scalar_type(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    _at_scalar_type ??=
        _dylib.lookupFunction<_c_at_scalar_type, _dart_at_scalar_type>(
            'at_scalar_type');
    return _at_scalar_type(
      arg0,
    );
  }

  _dart_at_scalar_type _at_scalar_type;

  void at_autocast_clear_cache() {
    _at_autocast_clear_cache ??= _dylib.lookupFunction<
        _c_at_autocast_clear_cache,
        _dart_at_autocast_clear_cache>('at_autocast_clear_cache');
    return _at_autocast_clear_cache();
  }

  _dart_at_autocast_clear_cache _at_autocast_clear_cache;

  int at_autocast_decrement_nesting() {
    _at_autocast_decrement_nesting ??= _dylib.lookupFunction<
        _c_at_autocast_decrement_nesting,
        _dart_at_autocast_decrement_nesting>('at_autocast_decrement_nesting');
    return _at_autocast_decrement_nesting();
  }

  _dart_at_autocast_decrement_nesting _at_autocast_decrement_nesting;

  int at_autocast_increment_nesting() {
    _at_autocast_increment_nesting ??= _dylib.lookupFunction<
        _c_at_autocast_increment_nesting,
        _dart_at_autocast_increment_nesting>('at_autocast_increment_nesting');
    return _at_autocast_increment_nesting();
  }

  _dart_at_autocast_increment_nesting _at_autocast_increment_nesting;

  int at_autocast_is_enabled() {
    _at_autocast_is_enabled ??= _dylib.lookupFunction<_c_at_autocast_is_enabled,
        _dart_at_autocast_is_enabled>('at_autocast_is_enabled');
    return _at_autocast_is_enabled();
  }

  _dart_at_autocast_is_enabled _at_autocast_is_enabled;

  int at_autocast_set_enabled(
    int b,
  ) {
    _at_autocast_set_enabled ??= _dylib.lookupFunction<
        _c_at_autocast_set_enabled,
        _dart_at_autocast_set_enabled>('at_autocast_set_enabled');
    return _at_autocast_set_enabled(
      b,
    );
  }

  _dart_at_autocast_set_enabled _at_autocast_set_enabled;

  void at_backward(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
    int arg2,
  ) {
    _at_backward ??=
        _dylib.lookupFunction<_c_at_backward, _dart_at_backward>('at_backward');
    return _at_backward(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_at_backward _at_backward;

  int at_requires_grad(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    _at_requires_grad ??=
        _dylib.lookupFunction<_c_at_requires_grad, _dart_at_requires_grad>(
            'at_requires_grad');
    return _at_requires_grad(
      arg0,
    );
  }

  _dart_at_requires_grad _at_requires_grad;

  int at_grad_set_enabled(
    int arg0,
  ) {
    _at_grad_set_enabled ??= _dylib.lookupFunction<_c_at_grad_set_enabled,
        _dart_at_grad_set_enabled>('at_grad_set_enabled');
    return _at_grad_set_enabled(
      arg0,
    );
  }

  _dart_at_grad_set_enabled _at_grad_set_enabled;

  ffi.Pointer<ffi.Void> at_get(
    ffi.Pointer<ffi.Void> arg0,
    int index,
  ) {
    _at_get ??= _dylib.lookupFunction<_c_at_get, _dart_at_get>('at_get');
    return _at_get(
      arg0,
      index,
    );
  }

  _dart_at_get _at_get;

  void at_fill_double(
    ffi.Pointer<ffi.Void> arg0,
    double arg1,
  ) {
    _at_fill_double ??=
        _dylib.lookupFunction<_c_at_fill_double, _dart_at_fill_double>(
            'at_fill_double');
    return _at_fill_double(
      arg0,
      arg1,
    );
  }

  _dart_at_fill_double _at_fill_double;

  void at_fill_int64(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    _at_fill_int64 ??= _dylib
        .lookupFunction<_c_at_fill_int64, _dart_at_fill_int64>('at_fill_int64');
    return _at_fill_int64(
      arg0,
      arg1,
    );
  }

  _dart_at_fill_int64 _at_fill_int64;

  double at_double_value_at_indexes(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Int64> indexes,
    int indexes_len,
  ) {
    _at_double_value_at_indexes ??= _dylib.lookupFunction<
        _c_at_double_value_at_indexes,
        _dart_at_double_value_at_indexes>('at_double_value_at_indexes');
    return _at_double_value_at_indexes(
      arg0,
      indexes,
      indexes_len,
    );
  }

  _dart_at_double_value_at_indexes _at_double_value_at_indexes;

  int at_int64_value_at_indexes(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Int64> indexes,
    int indexes_len,
  ) {
    _at_int64_value_at_indexes ??= _dylib.lookupFunction<
        _c_at_int64_value_at_indexes,
        _dart_at_int64_value_at_indexes>('at_int64_value_at_indexes');
    return _at_int64_value_at_indexes(
      arg0,
      indexes,
      indexes_len,
    );
  }

  _dart_at_int64_value_at_indexes _at_int64_value_at_indexes;

  void at_set_double_value_at_indexes(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Int32> indexes,
    int indexes_len,
    double v,
  ) {
    _at_set_double_value_at_indexes ??= _dylib.lookupFunction<
        _c_at_set_double_value_at_indexes,
        _dart_at_set_double_value_at_indexes>('at_set_double_value_at_indexes');
    return _at_set_double_value_at_indexes(
      arg0,
      indexes,
      indexes_len,
      v,
    );
  }

  _dart_at_set_double_value_at_indexes _at_set_double_value_at_indexes;

  void at_set_int64_value_at_indexes(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Int32> indexes,
    int indexes_len,
    int v,
  ) {
    _at_set_int64_value_at_indexes ??= _dylib.lookupFunction<
        _c_at_set_int64_value_at_indexes,
        _dart_at_set_int64_value_at_indexes>('at_set_int64_value_at_indexes');
    return _at_set_int64_value_at_indexes(
      arg0,
      indexes,
      indexes_len,
      v,
    );
  }

  _dart_at_set_int64_value_at_indexes _at_set_int64_value_at_indexes;

  void at_copy_(
    ffi.Pointer<ffi.Void> dst,
    ffi.Pointer<ffi.Void> src,
  ) {
    _at_copy_ ??=
        _dylib.lookupFunction<_c_at_copy_, _dart_at_copy_>('at_copy_');
    return _at_copy_(
      dst,
      src,
    );
  }

  _dart_at_copy_ _at_copy_;

  void at_print(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    _at_print ??=
        _dylib.lookupFunction<_c_at_print, _dart_at_print>('at_print');
    return _at_print(
      arg0,
    );
  }

  _dart_at_print _at_print;

  ffi.Pointer<ffi.Int8> at_to_string(
    ffi.Pointer<ffi.Void> arg0,
    int line_size,
  ) {
    _at_to_string ??= _dylib
        .lookupFunction<_c_at_to_string, _dart_at_to_string>('at_to_string');
    return _at_to_string(
      arg0,
      line_size,
    );
  }

  _dart_at_to_string _at_to_string;

  void at_save(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    _at_save ??= _dylib.lookupFunction<_c_at_save, _dart_at_save>('at_save');
    return _at_save(
      arg0,
      filename,
    );
  }

  _dart_at_save _at_save;

  ffi.Pointer<ffi.Void> at_load(
    ffi.Pointer<ffi.Int8> filename,
  ) {
    _at_load ??= _dylib.lookupFunction<_c_at_load, _dart_at_load>('at_load');
    return _at_load(
      filename,
    );
  }

  _dart_at_load _at_load;

  ffi.Pointer<ffi.Void> at_load_image(
    ffi.Pointer<ffi.Int8> filename,
  ) {
    _at_load_image ??= _dylib
        .lookupFunction<_c_at_load_image, _dart_at_load_image>('at_load_image');
    return _at_load_image(
      filename,
    );
  }

  _dart_at_load_image _at_load_image;

  int at_save_image(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    _at_save_image ??= _dylib
        .lookupFunction<_c_at_save_image, _dart_at_save_image>('at_save_image');
    return _at_save_image(
      arg0,
      filename,
    );
  }

  _dart_at_save_image _at_save_image;

  ffi.Pointer<ffi.Void> at_resize_image(
    ffi.Pointer<ffi.Void> arg0,
    int w,
    int h,
  ) {
    _at_resize_image ??=
        _dylib.lookupFunction<_c_at_resize_image, _dart_at_resize_image>(
            'at_resize_image');
    return _at_resize_image(
      arg0,
      w,
      h,
    );
  }

  _dart_at_resize_image _at_resize_image;

  void at_save_multi(
    ffi.Pointer<ffi.Pointer<ffi.Void>> tensors,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> tensor_names,
    int ntensors,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    _at_save_multi ??= _dylib
        .lookupFunction<_c_at_save_multi, _dart_at_save_multi>('at_save_multi');
    return _at_save_multi(
      tensors,
      tensor_names,
      ntensors,
      filename,
    );
  }

  _dart_at_save_multi _at_save_multi;

  void at_load_multi(
    ffi.Pointer<ffi.Pointer<ffi.Void>> tensors,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> tensor_names,
    int ntensors,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    _at_load_multi ??= _dylib
        .lookupFunction<_c_at_load_multi, _dart_at_load_multi>('at_load_multi');
    return _at_load_multi(
      tensors,
      tensor_names,
      ntensors,
      filename,
    );
  }

  _dart_at_load_multi _at_load_multi;

  void at_load_multi_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> tensors,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> tensor_names,
    int ntensors,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    _at_load_multi_ ??=
        _dylib.lookupFunction<_c_at_load_multi_, _dart_at_load_multi_>(
            'at_load_multi_');
    return _at_load_multi_(
      tensors,
      tensor_names,
      ntensors,
      filename,
    );
  }

  _dart_at_load_multi_ _at_load_multi_;

  void at_load_callback(
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.NativeFunction<_typedefC_2>> f,
  ) {
    _at_load_callback ??=
        _dylib.lookupFunction<_c_at_load_callback, _dart_at_load_callback>(
            'at_load_callback');
    return _at_load_callback(
      filename,
      data,
      f,
    );
  }

  _dart_at_load_callback _at_load_callback;

  void at_load_callback_with_device(
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.NativeFunction<_typedefC_3>> f,
    int device_id,
  ) {
    _at_load_callback_with_device ??= _dylib.lookupFunction<
        _c_at_load_callback_with_device,
        _dart_at_load_callback_with_device>('at_load_callback_with_device');
    return _at_load_callback_with_device(
      filename,
      data,
      f,
      device_id,
    );
  }

  _dart_at_load_callback_with_device _at_load_callback_with_device;

  int at_get_num_interop_threads() {
    _at_get_num_interop_threads ??= _dylib.lookupFunction<
        _c_at_get_num_interop_threads,
        _dart_at_get_num_interop_threads>('at_get_num_interop_threads');
    return _at_get_num_interop_threads();
  }

  _dart_at_get_num_interop_threads _at_get_num_interop_threads;

  int at_get_num_threads() {
    _at_get_num_threads ??=
        _dylib.lookupFunction<_c_at_get_num_threads, _dart_at_get_num_threads>(
            'at_get_num_threads');
    return _at_get_num_threads();
  }

  _dart_at_get_num_threads _at_get_num_threads;

  void at_set_num_interop_threads(
    int n_threads,
  ) {
    _at_set_num_interop_threads ??= _dylib.lookupFunction<
        _c_at_set_num_interop_threads,
        _dart_at_set_num_interop_threads>('at_set_num_interop_threads');
    return _at_set_num_interop_threads(
      n_threads,
    );
  }

  _dart_at_set_num_interop_threads _at_set_num_interop_threads;

  void at_set_num_threads(
    int n_threads,
  ) {
    _at_set_num_threads ??=
        _dylib.lookupFunction<_c_at_set_num_threads, _dart_at_set_num_threads>(
            'at_set_num_threads');
    return _at_set_num_threads(
      n_threads,
    );
  }

  _dart_at_set_num_threads _at_set_num_threads;

  void at_free(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    _at_free ??= _dylib.lookupFunction<_c_at_free, _dart_at_free>('at_free');
    return _at_free(
      arg0,
    );
  }

  _dart_at_free _at_free;

  void at_run_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> tensors,
    int ntensors,
    ffi.Pointer<ffi.Pointer<ffi.Void>> inputs,
    int ninputs,
    ffi.Pointer<ffi.Pointer<ffi.Void>> outputs,
    int keep_graph,
    int create_graph,
  ) {
    _at_run_backward ??=
        _dylib.lookupFunction<_c_at_run_backward, _dart_at_run_backward>(
            'at_run_backward');
    return _at_run_backward(
      tensors,
      ntensors,
      inputs,
      ninputs,
      outputs,
      keep_graph,
      create_graph,
    );
  }

  _dart_at_run_backward _at_run_backward;

  ffi.Pointer<ffi.Void> ato_adam(
    double learning_rate,
    double beta1,
    double beta2,
    double weight_decay,
  ) {
    _ato_adam ??=
        _dylib.lookupFunction<_c_ato_adam, _dart_ato_adam>('ato_adam');
    return _ato_adam(
      learning_rate,
      beta1,
      beta2,
      weight_decay,
    );
  }

  _dart_ato_adam _ato_adam;

  ffi.Pointer<ffi.Void> ato_rms_prop(
    double learning_rate,
    double alpha,
    double eps,
    double weight_decay,
    double momentum,
    int centered,
  ) {
    _ato_rms_prop ??= _dylib
        .lookupFunction<_c_ato_rms_prop, _dart_ato_rms_prop>('ato_rms_prop');
    return _ato_rms_prop(
      learning_rate,
      alpha,
      eps,
      weight_decay,
      momentum,
      centered,
    );
  }

  _dart_ato_rms_prop _ato_rms_prop;

  ffi.Pointer<ffi.Void> ato_sgd(
    double learning_rate,
    double momentum,
    double dampening,
    double weight_decay,
    int nesterov,
  ) {
    _ato_sgd ??= _dylib.lookupFunction<_c_ato_sgd, _dart_ato_sgd>('ato_sgd');
    return _ato_sgd(
      learning_rate,
      momentum,
      dampening,
      weight_decay,
      nesterov,
    );
  }

  _dart_ato_sgd _ato_sgd;

  void ato_add_parameters(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
    int ntensors,
  ) {
    _ato_add_parameters ??=
        _dylib.lookupFunction<_c_ato_add_parameters, _dart_ato_add_parameters>(
            'ato_add_parameters');
    return _ato_add_parameters(
      arg0,
      arg1,
      ntensors,
    );
  }

  _dart_ato_add_parameters _ato_add_parameters;

  void ato_set_learning_rate(
    ffi.Pointer<ffi.Void> arg0,
    double learning_rate,
  ) {
    _ato_set_learning_rate ??= _dylib.lookupFunction<_c_ato_set_learning_rate,
        _dart_ato_set_learning_rate>('ato_set_learning_rate');
    return _ato_set_learning_rate(
      arg0,
      learning_rate,
    );
  }

  _dart_ato_set_learning_rate _ato_set_learning_rate;

  void ato_set_momentum(
    ffi.Pointer<ffi.Void> arg0,
    double momentum,
  ) {
    _ato_set_momentum ??=
        _dylib.lookupFunction<_c_ato_set_momentum, _dart_ato_set_momentum>(
            'ato_set_momentum');
    return _ato_set_momentum(
      arg0,
      momentum,
    );
  }

  _dart_ato_set_momentum _ato_set_momentum;

  void ato_zero_grad(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    _ato_zero_grad ??= _dylib
        .lookupFunction<_c_ato_zero_grad, _dart_ato_zero_grad>('ato_zero_grad');
    return _ato_zero_grad(
      arg0,
    );
  }

  _dart_ato_zero_grad _ato_zero_grad;

  void ato_step(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    _ato_step ??=
        _dylib.lookupFunction<_c_ato_step, _dart_ato_step>('ato_step');
    return _ato_step(
      arg0,
    );
  }

  _dart_ato_step _ato_step;

  void ato_free(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    _ato_free ??=
        _dylib.lookupFunction<_c_ato_free, _dart_ato_free>('ato_free');
    return _ato_free(
      arg0,
    );
  }

  _dart_ato_free _ato_free;

  ffi.Pointer<ffi.Void> ats_int(
    int arg0,
  ) {
    _ats_int ??= _dylib.lookupFunction<_c_ats_int, _dart_ats_int>('ats_int');
    return _ats_int(
      arg0,
    );
  }

  _dart_ats_int _ats_int;

  ffi.Pointer<ffi.Void> ats_float(
    double arg0,
  ) {
    _ats_float ??=
        _dylib.lookupFunction<_c_ats_float, _dart_ats_float>('ats_float');
    return _ats_float(
      arg0,
    );
  }

  _dart_ats_float _ats_float;

  int ats_to_int(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    _ats_to_int ??=
        _dylib.lookupFunction<_c_ats_to_int, _dart_ats_to_int>('ats_to_int');
    return _ats_to_int(
      arg0,
    );
  }

  _dart_ats_to_int _ats_to_int;

  double ats_to_float(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    _ats_to_float ??= _dylib
        .lookupFunction<_c_ats_to_float, _dart_ats_to_float>('ats_to_float');
    return _ats_to_float(
      arg0,
    );
  }

  _dart_ats_to_float _ats_to_float;

  ffi.Pointer<ffi.Int8> ats_to_string(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    _ats_to_string ??= _dylib
        .lookupFunction<_c_ats_to_string, _dart_ats_to_string>('ats_to_string');
    return _ats_to_string(
      arg0,
    );
  }

  _dart_ats_to_string _ats_to_string;

  void ats_free(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    _ats_free ??=
        _dylib.lookupFunction<_c_ats_free, _dart_ats_free>('ats_free');
    return _ats_free(
      arg0,
    );
  }

  _dart_ats_free _ats_free;

  int atc_cuda_device_count() {
    _atc_cuda_device_count ??= _dylib.lookupFunction<_c_atc_cuda_device_count,
        _dart_atc_cuda_device_count>('atc_cuda_device_count');
    return _atc_cuda_device_count();
  }

  _dart_atc_cuda_device_count _atc_cuda_device_count;

  int atc_cuda_is_available() {
    _atc_cuda_is_available ??= _dylib.lookupFunction<_c_atc_cuda_is_available,
        _dart_atc_cuda_is_available>('atc_cuda_is_available');
    return _atc_cuda_is_available();
  }

  _dart_atc_cuda_is_available _atc_cuda_is_available;

  int atc_cudnn_is_available() {
    _atc_cudnn_is_available ??= _dylib.lookupFunction<_c_atc_cudnn_is_available,
        _dart_atc_cudnn_is_available>('atc_cudnn_is_available');
    return _atc_cudnn_is_available();
  }

  _dart_atc_cudnn_is_available _atc_cudnn_is_available;

  void atc_set_benchmark_cudnn(
    int b,
  ) {
    _atc_set_benchmark_cudnn ??= _dylib.lookupFunction<
        _c_atc_set_benchmark_cudnn,
        _dart_atc_set_benchmark_cudnn>('atc_set_benchmark_cudnn');
    return _atc_set_benchmark_cudnn(
      b,
    );
  }

  _dart_atc_set_benchmark_cudnn _atc_set_benchmark_cudnn;

  ffi.Pointer<ffi.Void> atm_load(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _atm_load ??=
        _dylib.lookupFunction<_c_atm_load, _dart_atm_load>('atm_load');
    return _atm_load(
      arg0,
    );
  }

  _dart_atm_load _atm_load;

  ffi.Pointer<ffi.Void> atm_load_on_device(
    ffi.Pointer<ffi.Int8> arg0,
    int device,
  ) {
    _atm_load_on_device ??=
        _dylib.lookupFunction<_c_atm_load_on_device, _dart_atm_load_on_device>(
            'atm_load_on_device');
    return _atm_load_on_device(
      arg0,
      device,
    );
  }

  _dart_atm_load_on_device _atm_load_on_device;

  ffi.Pointer<ffi.Void> atm_load_str(
    ffi.Pointer<ffi.Int8> arg0,
    int sz,
  ) {
    _atm_load_str ??= _dylib
        .lookupFunction<_c_atm_load_str, _dart_atm_load_str>('atm_load_str');
    return _atm_load_str(
      arg0,
      sz,
    );
  }

  _dart_atm_load_str _atm_load_str;

  ffi.Pointer<ffi.Void> atm_load_str_on_device(
    ffi.Pointer<ffi.Int8> arg0,
    int sz,
    int device,
  ) {
    _atm_load_str_on_device ??= _dylib.lookupFunction<_c_atm_load_str_on_device,
        _dart_atm_load_str_on_device>('atm_load_str_on_device');
    return _atm_load_str_on_device(
      arg0,
      sz,
      device,
    );
  }

  _dart_atm_load_str_on_device _atm_load_str_on_device;

  ffi.Pointer<ffi.Void> atm_forward(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Void>> tensors,
    int ntensors,
  ) {
    _atm_forward ??=
        _dylib.lookupFunction<_c_atm_forward, _dart_atm_forward>('atm_forward');
    return _atm_forward(
      arg0,
      tensors,
      ntensors,
    );
  }

  _dart_atm_forward _atm_forward;

  ffi.Pointer<ffi.Void> atm_forward_(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ivalues,
    int nivalues,
  ) {
    _atm_forward_ ??= _dylib
        .lookupFunction<_c_atm_forward_, _dart_atm_forward_>('atm_forward_');
    return _atm_forward_(
      arg0,
      ivalues,
      nivalues,
    );
  }

  _dart_atm_forward_ _atm_forward_;

  void atm_free(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    _atm_free ??=
        _dylib.lookupFunction<_c_atm_free, _dart_atm_free>('atm_free');
    return _atm_free(
      arg0,
    );
  }

  _dart_atm_free _atm_free;

  void atm_to(
    ffi.Pointer<ffi.Void> m,
    int device,
    int dtype,
    int non_blocking,
  ) {
    _atm_to ??= _dylib.lookupFunction<_c_atm_to, _dart_atm_to>('atm_to');
    return _atm_to(
      m,
      device,
      dtype,
      non_blocking,
    );
  }

  _dart_atm_to _atm_to;

  int atm_get_profiling_mode() {
    _atm_get_profiling_mode ??= _dylib.lookupFunction<_c_atm_get_profiling_mode,
        _dart_atm_get_profiling_mode>('atm_get_profiling_mode');
    return _atm_get_profiling_mode();
  }

  _dart_atm_get_profiling_mode _atm_get_profiling_mode;

  void atm_set_profiling_mode(
    int arg0,
  ) {
    _atm_set_profiling_mode ??= _dylib.lookupFunction<_c_atm_set_profiling_mode,
        _dart_atm_set_profiling_mode>('atm_set_profiling_mode');
    return _atm_set_profiling_mode(
      arg0,
    );
  }

  _dart_atm_set_profiling_mode _atm_set_profiling_mode;

  ffi.Pointer<ffi.Void> ati_none() {
    _ati_none ??=
        _dylib.lookupFunction<_c_ati_none, _dart_ati_none>('ati_none');
    return _ati_none();
  }

  _dart_ati_none _ati_none;

  ffi.Pointer<ffi.Void> ati_tensor(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    _ati_tensor ??=
        _dylib.lookupFunction<_c_ati_tensor, _dart_ati_tensor>('ati_tensor');
    return _ati_tensor(
      arg0,
    );
  }

  _dart_ati_tensor _ati_tensor;

  ffi.Pointer<ffi.Void> ati_int(
    int arg0,
  ) {
    _ati_int ??= _dylib.lookupFunction<_c_ati_int, _dart_ati_int>('ati_int');
    return _ati_int(
      arg0,
    );
  }

  _dart_ati_int _ati_int;

  ffi.Pointer<ffi.Void> ati_double(
    double arg0,
  ) {
    _ati_double ??=
        _dylib.lookupFunction<_c_ati_double, _dart_ati_double>('ati_double');
    return _ati_double(
      arg0,
    );
  }

  _dart_ati_double _ati_double;

  ffi.Pointer<ffi.Void> ati_bool(
    int arg0,
  ) {
    _ati_bool ??=
        _dylib.lookupFunction<_c_ati_bool, _dart_ati_bool>('ati_bool');
    return _ati_bool(
      arg0,
    );
  }

  _dart_ati_bool _ati_bool;

  ffi.Pointer<ffi.Void> ati_string(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _ati_string ??=
        _dylib.lookupFunction<_c_ati_string, _dart_ati_string>('ati_string');
    return _ati_string(
      arg0,
    );
  }

  _dart_ati_string _ati_string;

  ffi.Pointer<ffi.Void> ati_tuple(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    int arg1,
  ) {
    _ati_tuple ??=
        _dylib.lookupFunction<_c_ati_tuple, _dart_ati_tuple>('ati_tuple');
    return _ati_tuple(
      arg0,
      arg1,
    );
  }

  _dart_ati_tuple _ati_tuple;

  ffi.Pointer<ffi.Void> ati_generic_list(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    int arg1,
  ) {
    _ati_generic_list ??=
        _dylib.lookupFunction<_c_ati_generic_list, _dart_ati_generic_list>(
            'ati_generic_list');
    return _ati_generic_list(
      arg0,
      arg1,
    );
  }

  _dart_ati_generic_list _ati_generic_list;

  ffi.Pointer<ffi.Void> ati_generic_dict(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    int arg1,
  ) {
    _ati_generic_dict ??=
        _dylib.lookupFunction<_c_ati_generic_dict, _dart_ati_generic_dict>(
            'ati_generic_dict');
    return _ati_generic_dict(
      arg0,
      arg1,
    );
  }

  _dart_ati_generic_dict _ati_generic_dict;

  ffi.Pointer<ffi.Void> ati_int_list(
    ffi.Pointer<ffi.Int64> arg0,
    int arg1,
  ) {
    _ati_int_list ??= _dylib
        .lookupFunction<_c_ati_int_list, _dart_ati_int_list>('ati_int_list');
    return _ati_int_list(
      arg0,
      arg1,
    );
  }

  _dart_ati_int_list _ati_int_list;

  ffi.Pointer<ffi.Void> ati_double_list(
    ffi.Pointer<ffi.Double> arg0,
    int arg1,
  ) {
    _ati_double_list ??=
        _dylib.lookupFunction<_c_ati_double_list, _dart_ati_double_list>(
            'ati_double_list');
    return _ati_double_list(
      arg0,
      arg1,
    );
  }

  _dart_ati_double_list _ati_double_list;

  ffi.Pointer<ffi.Void> ati_bool_list(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    _ati_bool_list ??= _dylib
        .lookupFunction<_c_ati_bool_list, _dart_ati_bool_list>('ati_bool_list');
    return _ati_bool_list(
      arg0,
      arg1,
    );
  }

  _dart_ati_bool_list _ati_bool_list;

  ffi.Pointer<ffi.Void> ati_tensor_list(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    int arg1,
  ) {
    _ati_tensor_list ??=
        _dylib.lookupFunction<_c_ati_tensor_list, _dart_ati_tensor_list>(
            'ati_tensor_list');
    return _ati_tensor_list(
      arg0,
      arg1,
    );
  }

  _dart_ati_tensor_list _ati_tensor_list;

  ffi.Pointer<ffi.Void> ati_to_tensor(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    _ati_to_tensor ??= _dylib
        .lookupFunction<_c_ati_to_tensor, _dart_ati_to_tensor>('ati_to_tensor');
    return _ati_to_tensor(
      arg0,
    );
  }

  _dart_ati_to_tensor _ati_to_tensor;

  int ati_to_int(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    _ati_to_int ??=
        _dylib.lookupFunction<_c_ati_to_int, _dart_ati_to_int>('ati_to_int');
    return _ati_to_int(
      arg0,
    );
  }

  _dart_ati_to_int _ati_to_int;

  double ati_to_double(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    _ati_to_double ??= _dylib
        .lookupFunction<_c_ati_to_double, _dart_ati_to_double>('ati_to_double');
    return _ati_to_double(
      arg0,
    );
  }

  _dart_ati_to_double _ati_to_double;

  ffi.Pointer<ffi.Int8> ati_to_string(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    _ati_to_string ??= _dylib
        .lookupFunction<_c_ati_to_string, _dart_ati_to_string>('ati_to_string');
    return _ati_to_string(
      arg0,
    );
  }

  _dart_ati_to_string _ati_to_string;

  int ati_to_bool(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    _ati_to_bool ??=
        _dylib.lookupFunction<_c_ati_to_bool, _dart_ati_to_bool>('ati_to_bool');
    return _ati_to_bool(
      arg0,
    );
  }

  _dart_ati_to_bool _ati_to_bool;

  int ati_length(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    _ati_length ??=
        _dylib.lookupFunction<_c_ati_length, _dart_ati_length>('ati_length');
    return _ati_length(
      arg0,
    );
  }

  _dart_ati_length _ati_length;

  int ati_tuple_length(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    _ati_tuple_length ??=
        _dylib.lookupFunction<_c_ati_tuple_length, _dart_ati_tuple_length>(
            'ati_tuple_length');
    return _ati_tuple_length(
      arg0,
    );
  }

  _dart_ati_tuple_length _ati_tuple_length;

  void ati_to_tuple(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
    int arg2,
  ) {
    _ati_to_tuple ??= _dylib
        .lookupFunction<_c_ati_to_tuple, _dart_ati_to_tuple>('ati_to_tuple');
    return _ati_to_tuple(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_ati_to_tuple _ati_to_tuple;

  void ati_to_generic_list(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
    int arg2,
  ) {
    _ati_to_generic_list ??= _dylib.lookupFunction<_c_ati_to_generic_list,
        _dart_ati_to_generic_list>('ati_to_generic_list');
    return _ati_to_generic_list(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_ati_to_generic_list _ati_to_generic_list;

  void ati_to_generic_dict(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
    int arg2,
  ) {
    _ati_to_generic_dict ??= _dylib.lookupFunction<_c_ati_to_generic_dict,
        _dart_ati_to_generic_dict>('ati_to_generic_dict');
    return _ati_to_generic_dict(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_ati_to_generic_dict _ati_to_generic_dict;

  void ati_to_int_list(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Int64> arg1,
    int arg2,
  ) {
    _ati_to_int_list ??=
        _dylib.lookupFunction<_c_ati_to_int_list, _dart_ati_to_int_list>(
            'ati_to_int_list');
    return _ati_to_int_list(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_ati_to_int_list _ati_to_int_list;

  void ati_to_double_list(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Double> arg1,
    int arg2,
  ) {
    _ati_to_double_list ??=
        _dylib.lookupFunction<_c_ati_to_double_list, _dart_ati_to_double_list>(
            'ati_to_double_list');
    return _ati_to_double_list(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_ati_to_double_list _ati_to_double_list;

  void ati_to_bool_list(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    _ati_to_bool_list ??=
        _dylib.lookupFunction<_c_ati_to_bool_list, _dart_ati_to_bool_list>(
            'ati_to_bool_list');
    return _ati_to_bool_list(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_ati_to_bool_list _ati_to_bool_list;

  void ati_to_tensor_list(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
    int arg2,
  ) {
    _ati_to_tensor_list ??=
        _dylib.lookupFunction<_c_ati_to_tensor_list, _dart_ati_to_tensor_list>(
            'ati_to_tensor_list');
    return _ati_to_tensor_list(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_ati_to_tensor_list _ati_to_tensor_list;

  int ati_tag(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    _ati_tag ??= _dylib.lookupFunction<_c_ati_tag, _dart_ati_tag>('ati_tag');
    return _ati_tag(
      arg0,
    );
  }

  _dart_ati_tag _ati_tag;

  void ati_free(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    _ati_free ??=
        _dylib.lookupFunction<_c_ati_free, _dart_ati_free>('ati_free');
    return _ati_free(
      arg0,
    );
  }

  _dart_ati_free _ati_free;

  void atg___and__(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg___and__ ??=
        _dylib.lookupFunction<_c_atg___and__, _dart_atg___and__>('atg___and__');
    return _atg___and__(
      arg0,
      self,
      other,
    );
  }

  _dart_atg___and__ _atg___and__;

  void atg___and__1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg___and__1 ??= _dylib
        .lookupFunction<_c_atg___and__1, _dart_atg___and__1>('atg___and__1');
    return _atg___and__1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg___and__1 _atg___and__1;

  void atg___iand__(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg___iand__ ??= _dylib
        .lookupFunction<_c_atg___iand__, _dart_atg___iand__>('atg___iand__');
    return _atg___iand__(
      arg0,
      self,
      other,
    );
  }

  _dart_atg___iand__ _atg___iand__;

  void atg___iand__1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg___iand__1 ??= _dylib
        .lookupFunction<_c_atg___iand__1, _dart_atg___iand__1>('atg___iand__1');
    return _atg___iand__1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg___iand__1 _atg___iand__1;

  void atg___ilshift__(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg___ilshift__ ??=
        _dylib.lookupFunction<_c_atg___ilshift__, _dart_atg___ilshift__>(
            'atg___ilshift__');
    return _atg___ilshift__(
      arg0,
      self,
      other,
    );
  }

  _dart_atg___ilshift__ _atg___ilshift__;

  void atg___ilshift__1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg___ilshift__1 ??=
        _dylib.lookupFunction<_c_atg___ilshift__1, _dart_atg___ilshift__1>(
            'atg___ilshift__1');
    return _atg___ilshift__1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg___ilshift__1 _atg___ilshift__1;

  void atg___ior__(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg___ior__ ??=
        _dylib.lookupFunction<_c_atg___ior__, _dart_atg___ior__>('atg___ior__');
    return _atg___ior__(
      arg0,
      self,
      other,
    );
  }

  _dart_atg___ior__ _atg___ior__;

  void atg___ior__1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg___ior__1 ??= _dylib
        .lookupFunction<_c_atg___ior__1, _dart_atg___ior__1>('atg___ior__1');
    return _atg___ior__1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg___ior__1 _atg___ior__1;

  void atg___irshift__(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg___irshift__ ??=
        _dylib.lookupFunction<_c_atg___irshift__, _dart_atg___irshift__>(
            'atg___irshift__');
    return _atg___irshift__(
      arg0,
      self,
      other,
    );
  }

  _dart_atg___irshift__ _atg___irshift__;

  void atg___irshift__1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg___irshift__1 ??=
        _dylib.lookupFunction<_c_atg___irshift__1, _dart_atg___irshift__1>(
            'atg___irshift__1');
    return _atg___irshift__1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg___irshift__1 _atg___irshift__1;

  void atg___ixor__(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg___ixor__ ??= _dylib
        .lookupFunction<_c_atg___ixor__, _dart_atg___ixor__>('atg___ixor__');
    return _atg___ixor__(
      arg0,
      self,
      other,
    );
  }

  _dart_atg___ixor__ _atg___ixor__;

  void atg___ixor__1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg___ixor__1 ??= _dylib
        .lookupFunction<_c_atg___ixor__1, _dart_atg___ixor__1>('atg___ixor__1');
    return _atg___ixor__1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg___ixor__1 _atg___ixor__1;

  void atg___lshift__(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg___lshift__ ??=
        _dylib.lookupFunction<_c_atg___lshift__, _dart_atg___lshift__>(
            'atg___lshift__');
    return _atg___lshift__(
      arg0,
      self,
      other,
    );
  }

  _dart_atg___lshift__ _atg___lshift__;

  void atg___lshift__1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg___lshift__1 ??=
        _dylib.lookupFunction<_c_atg___lshift__1, _dart_atg___lshift__1>(
            'atg___lshift__1');
    return _atg___lshift__1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg___lshift__1 _atg___lshift__1;

  void atg___or__(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg___or__ ??=
        _dylib.lookupFunction<_c_atg___or__, _dart_atg___or__>('atg___or__');
    return _atg___or__(
      arg0,
      self,
      other,
    );
  }

  _dart_atg___or__ _atg___or__;

  void atg___or__1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg___or__1 ??=
        _dylib.lookupFunction<_c_atg___or__1, _dart_atg___or__1>('atg___or__1');
    return _atg___or__1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg___or__1 _atg___or__1;

  void atg___rshift__(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg___rshift__ ??=
        _dylib.lookupFunction<_c_atg___rshift__, _dart_atg___rshift__>(
            'atg___rshift__');
    return _atg___rshift__(
      arg0,
      self,
      other,
    );
  }

  _dart_atg___rshift__ _atg___rshift__;

  void atg___rshift__1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg___rshift__1 ??=
        _dylib.lookupFunction<_c_atg___rshift__1, _dart_atg___rshift__1>(
            'atg___rshift__1');
    return _atg___rshift__1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg___rshift__1 _atg___rshift__1;

  void atg___xor__(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg___xor__ ??=
        _dylib.lookupFunction<_c_atg___xor__, _dart_atg___xor__>('atg___xor__');
    return _atg___xor__(
      arg0,
      self,
      other,
    );
  }

  _dart_atg___xor__ _atg___xor__;

  void atg___xor__1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg___xor__1 ??= _dylib
        .lookupFunction<_c_atg___xor__1, _dart_atg___xor__1>('atg___xor__1');
    return _atg___xor__1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg___xor__1 _atg___xor__1;

  void atg__adaptive_avg_pool2d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
  ) {
    _atg__adaptive_avg_pool2d ??= _dylib.lookupFunction<
        _c_atg__adaptive_avg_pool2d,
        _dart_atg__adaptive_avg_pool2d>('atg__adaptive_avg_pool2d');
    return _atg__adaptive_avg_pool2d(
      arg0,
      self,
      output_size_data,
      output_size_len,
    );
  }

  _dart_atg__adaptive_avg_pool2d _atg__adaptive_avg_pool2d;

  void atg__adaptive_avg_pool2d_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg__adaptive_avg_pool2d_backward ??= _dylib.lookupFunction<
            _c_atg__adaptive_avg_pool2d_backward,
            _dart_atg__adaptive_avg_pool2d_backward>(
        'atg__adaptive_avg_pool2d_backward');
    return _atg__adaptive_avg_pool2d_backward(
      arg0,
      grad_output,
      self,
    );
  }

  _dart_atg__adaptive_avg_pool2d_backward _atg__adaptive_avg_pool2d_backward;

  void atg__addmv_impl_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> self2,
    ffi.Pointer<ffi.Void> mat,
    ffi.Pointer<ffi.Void> vec,
  ) {
    _atg__addmv_impl_ ??=
        _dylib.lookupFunction<_c_atg__addmv_impl_, _dart_atg__addmv_impl_>(
            'atg__addmv_impl_');
    return _atg__addmv_impl_(
      arg0,
      self,
      self2,
      mat,
      vec,
    );
  }

  _dart_atg__addmv_impl_ _atg__addmv_impl_;

  void atg__addr(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> vec1,
    ffi.Pointer<ffi.Void> vec2,
  ) {
    _atg__addr ??=
        _dylib.lookupFunction<_c_atg__addr, _dart_atg__addr>('atg__addr');
    return _atg__addr(
      arg0,
      self,
      vec1,
      vec2,
    );
  }

  _dart_atg__addr _atg__addr;

  void atg__addr_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> vec1,
    ffi.Pointer<ffi.Void> vec2,
  ) {
    _atg__addr_ ??=
        _dylib.lookupFunction<_c_atg__addr_, _dart_atg__addr_>('atg__addr_');
    return _atg__addr_(
      arg0,
      self,
      vec1,
      vec2,
    );
  }

  _dart_atg__addr_ _atg__addr_;

  void atg__addr_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> vec1,
    ffi.Pointer<ffi.Void> vec2,
  ) {
    _atg__addr_out ??= _dylib
        .lookupFunction<_c_atg__addr_out, _dart_atg__addr_out>('atg__addr_out');
    return _atg__addr_out(
      arg0,
      out,
      self,
      vec1,
      vec2,
    );
  }

  _dart_atg__addr_out _atg__addr_out;

  void atg__amp_update_scale(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> growth_tracker,
    ffi.Pointer<ffi.Void> current_scale,
    ffi.Pointer<ffi.Void> found_inf,
    double scale_growth_factor,
    double scale_backoff_factor,
    int growth_interval,
  ) {
    _atg__amp_update_scale ??= _dylib.lookupFunction<_c_atg__amp_update_scale,
        _dart_atg__amp_update_scale>('atg__amp_update_scale');
    return _atg__amp_update_scale(
      arg0,
      growth_tracker,
      current_scale,
      found_inf,
      scale_growth_factor,
      scale_backoff_factor,
      growth_interval,
    );
  }

  _dart_atg__amp_update_scale _atg__amp_update_scale;

  void atg__baddbmm_mkl_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> batch1,
    ffi.Pointer<ffi.Void> batch2,
  ) {
    _atg__baddbmm_mkl_ ??=
        _dylib.lookupFunction<_c_atg__baddbmm_mkl_, _dart_atg__baddbmm_mkl_>(
            'atg__baddbmm_mkl_');
    return _atg__baddbmm_mkl_(
      arg0,
      self,
      batch1,
      batch2,
    );
  }

  _dart_atg__baddbmm_mkl_ _atg__baddbmm_mkl_;

  void atg__bmm(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> mat2,
    int deterministic,
  ) {
    _atg__bmm ??=
        _dylib.lookupFunction<_c_atg__bmm, _dart_atg__bmm>('atg__bmm');
    return _atg__bmm(
      arg0,
      self,
      mat2,
      deterministic,
    );
  }

  _dart_atg__bmm _atg__bmm;

  void atg__bmm_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> mat2,
    int deterministic,
  ) {
    _atg__bmm_out ??= _dylib
        .lookupFunction<_c_atg__bmm_out, _dart_atg__bmm_out>('atg__bmm_out');
    return _atg__bmm_out(
      arg0,
      out,
      self,
      mat2,
      deterministic,
    );
  }

  _dart_atg__bmm_out _atg__bmm_out;

  void atg__cast_byte(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int non_blocking,
  ) {
    _atg__cast_byte ??=
        _dylib.lookupFunction<_c_atg__cast_byte, _dart_atg__cast_byte>(
            'atg__cast_byte');
    return _atg__cast_byte(
      arg0,
      self,
      non_blocking,
    );
  }

  _dart_atg__cast_byte _atg__cast_byte;

  void atg__cast_char(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int non_blocking,
  ) {
    _atg__cast_char ??=
        _dylib.lookupFunction<_c_atg__cast_char, _dart_atg__cast_char>(
            'atg__cast_char');
    return _atg__cast_char(
      arg0,
      self,
      non_blocking,
    );
  }

  _dart_atg__cast_char _atg__cast_char;

  void atg__cast_double(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int non_blocking,
  ) {
    _atg__cast_double ??=
        _dylib.lookupFunction<_c_atg__cast_double, _dart_atg__cast_double>(
            'atg__cast_double');
    return _atg__cast_double(
      arg0,
      self,
      non_blocking,
    );
  }

  _dart_atg__cast_double _atg__cast_double;

  void atg__cast_float(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int non_blocking,
  ) {
    _atg__cast_float ??=
        _dylib.lookupFunction<_c_atg__cast_float, _dart_atg__cast_float>(
            'atg__cast_float');
    return _atg__cast_float(
      arg0,
      self,
      non_blocking,
    );
  }

  _dart_atg__cast_float _atg__cast_float;

  void atg__cast_half(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int non_blocking,
  ) {
    _atg__cast_half ??=
        _dylib.lookupFunction<_c_atg__cast_half, _dart_atg__cast_half>(
            'atg__cast_half');
    return _atg__cast_half(
      arg0,
      self,
      non_blocking,
    );
  }

  _dart_atg__cast_half _atg__cast_half;

  void atg__cast_int(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int non_blocking,
  ) {
    _atg__cast_int ??= _dylib
        .lookupFunction<_c_atg__cast_int, _dart_atg__cast_int>('atg__cast_int');
    return _atg__cast_int(
      arg0,
      self,
      non_blocking,
    );
  }

  _dart_atg__cast_int _atg__cast_int;

  void atg__cast_long(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int non_blocking,
  ) {
    _atg__cast_long ??=
        _dylib.lookupFunction<_c_atg__cast_long, _dart_atg__cast_long>(
            'atg__cast_long');
    return _atg__cast_long(
      arg0,
      self,
      non_blocking,
    );
  }

  _dart_atg__cast_long _atg__cast_long;

  void atg__cast_short(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int non_blocking,
  ) {
    _atg__cast_short ??=
        _dylib.lookupFunction<_c_atg__cast_short, _dart_atg__cast_short>(
            'atg__cast_short');
    return _atg__cast_short(
      arg0,
      self,
      non_blocking,
    );
  }

  _dart_atg__cast_short _atg__cast_short;

  void atg__cat(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
    int tensors_len,
    int dim,
  ) {
    _atg__cat ??=
        _dylib.lookupFunction<_c_atg__cat, _dart_atg__cat>('atg__cat');
    return _atg__cat(
      arg0,
      tensors_data,
      tensors_len,
      dim,
    );
  }

  _dart_atg__cat _atg__cat;

  void atg__cat_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
    int tensors_len,
    int dim,
  ) {
    _atg__cat_out ??= _dylib
        .lookupFunction<_c_atg__cat_out, _dart_atg__cat_out>('atg__cat_out');
    return _atg__cat_out(
      arg0,
      out,
      tensors_data,
      tensors_len,
      dim,
    );
  }

  _dart_atg__cat_out _atg__cat_out;

  void atg__cdist_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad,
    ffi.Pointer<ffi.Void> x1,
    ffi.Pointer<ffi.Void> x2,
    double p,
    ffi.Pointer<ffi.Void> cdist,
  ) {
    _atg__cdist_backward ??= _dylib.lookupFunction<_c_atg__cdist_backward,
        _dart_atg__cdist_backward>('atg__cdist_backward');
    return _atg__cdist_backward(
      arg0,
      grad,
      x1,
      x2,
      p,
      cdist,
    );
  }

  _dart_atg__cdist_backward _atg__cdist_backward;

  void atg__cholesky_helper(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int upper,
  ) {
    _atg__cholesky_helper ??= _dylib.lookupFunction<_c_atg__cholesky_helper,
        _dart_atg__cholesky_helper>('atg__cholesky_helper');
    return _atg__cholesky_helper(
      arg0,
      self,
      upper,
    );
  }

  _dart_atg__cholesky_helper _atg__cholesky_helper;

  void atg__cholesky_solve_helper(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> A,
    int upper,
  ) {
    _atg__cholesky_solve_helper ??= _dylib.lookupFunction<
        _c_atg__cholesky_solve_helper,
        _dart_atg__cholesky_solve_helper>('atg__cholesky_solve_helper');
    return _atg__cholesky_solve_helper(
      arg0,
      self,
      A,
      upper,
    );
  }

  _dart_atg__cholesky_solve_helper _atg__cholesky_solve_helper;

  void atg__coalesced_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int coalesced,
  ) {
    _atg__coalesced_ ??=
        _dylib.lookupFunction<_c_atg__coalesced_, _dart_atg__coalesced_>(
            'atg__coalesced_');
    return _atg__coalesced_(
      arg0,
      self,
      coalesced,
    );
  }

  _dart_atg__coalesced_ _atg__coalesced_;

  void atg__convolution(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> bias,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int transposed,
    ffi.Pointer<ffi.Int64> output_padding_data,
    int output_padding_len,
    int groups,
    int benchmark,
    int deterministic,
    int cudnn_enabled,
  ) {
    _atg__convolution ??=
        _dylib.lookupFunction<_c_atg__convolution, _dart_atg__convolution>(
            'atg__convolution');
    return _atg__convolution(
      arg0,
      input,
      weight,
      bias,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      dilation_data,
      dilation_len,
      transposed,
      output_padding_data,
      output_padding_len,
      groups,
      benchmark,
      deterministic,
      cudnn_enabled,
    );
  }

  _dart_atg__convolution _atg__convolution;

  void atg__convolution_nogroup(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> bias,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int transposed,
    ffi.Pointer<ffi.Int64> output_padding_data,
    int output_padding_len,
  ) {
    _atg__convolution_nogroup ??= _dylib.lookupFunction<
        _c_atg__convolution_nogroup,
        _dart_atg__convolution_nogroup>('atg__convolution_nogroup');
    return _atg__convolution_nogroup(
      arg0,
      input,
      weight,
      bias,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      dilation_data,
      dilation_len,
      transposed,
      output_padding_data,
      output_padding_len,
    );
  }

  _dart_atg__convolution_nogroup _atg__convolution_nogroup;

  void atg__copy_from(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> dst,
    int non_blocking,
  ) {
    _atg__copy_from ??=
        _dylib.lookupFunction<_c_atg__copy_from, _dart_atg__copy_from>(
            'atg__copy_from');
    return _atg__copy_from(
      arg0,
      self,
      dst,
      non_blocking,
    );
  }

  _dart_atg__copy_from _atg__copy_from;

  void atg__ctc_loss(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> log_probs,
    ffi.Pointer<ffi.Void> targets,
    ffi.Pointer<ffi.Int64> input_lengths_data,
    int input_lengths_len,
    ffi.Pointer<ffi.Int64> target_lengths_data,
    int target_lengths_len,
    int blank,
    int zero_infinity,
  ) {
    _atg__ctc_loss ??= _dylib
        .lookupFunction<_c_atg__ctc_loss, _dart_atg__ctc_loss>('atg__ctc_loss');
    return _atg__ctc_loss(
      arg0,
      log_probs,
      targets,
      input_lengths_data,
      input_lengths_len,
      target_lengths_data,
      target_lengths_len,
      blank,
      zero_infinity,
    );
  }

  _dart_atg__ctc_loss _atg__ctc_loss;

  void atg__ctc_loss_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad,
    ffi.Pointer<ffi.Void> log_probs,
    ffi.Pointer<ffi.Void> targets,
    ffi.Pointer<ffi.Int64> input_lengths_data,
    int input_lengths_len,
    ffi.Pointer<ffi.Int64> target_lengths_data,
    int target_lengths_len,
    ffi.Pointer<ffi.Void> neg_log_likelihood,
    ffi.Pointer<ffi.Void> log_alpha,
    int blank,
    int zero_infinity,
  ) {
    _atg__ctc_loss_backward ??= _dylib.lookupFunction<_c_atg__ctc_loss_backward,
        _dart_atg__ctc_loss_backward>('atg__ctc_loss_backward');
    return _atg__ctc_loss_backward(
      arg0,
      grad,
      log_probs,
      targets,
      input_lengths_data,
      input_lengths_len,
      target_lengths_data,
      target_lengths_len,
      neg_log_likelihood,
      log_alpha,
      blank,
      zero_infinity,
    );
  }

  _dart_atg__ctc_loss_backward _atg__ctc_loss_backward;

  void atg__cudnn_ctc_loss(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> log_probs,
    ffi.Pointer<ffi.Void> targets,
    ffi.Pointer<ffi.Int64> input_lengths_data,
    int input_lengths_len,
    ffi.Pointer<ffi.Int64> target_lengths_data,
    int target_lengths_len,
    int blank,
    int deterministic,
    int zero_infinity,
  ) {
    _atg__cudnn_ctc_loss ??= _dylib.lookupFunction<_c_atg__cudnn_ctc_loss,
        _dart_atg__cudnn_ctc_loss>('atg__cudnn_ctc_loss');
    return _atg__cudnn_ctc_loss(
      arg0,
      log_probs,
      targets,
      input_lengths_data,
      input_lengths_len,
      target_lengths_data,
      target_lengths_len,
      blank,
      deterministic,
      zero_infinity,
    );
  }

  _dart_atg__cudnn_ctc_loss _atg__cudnn_ctc_loss;

  void atg__cudnn_init_dropout_state(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    double dropout,
    int train,
    int dropout_seed,
    int options_kind,
    int options_device,
  ) {
    _atg__cudnn_init_dropout_state ??= _dylib.lookupFunction<
        _c_atg__cudnn_init_dropout_state,
        _dart_atg__cudnn_init_dropout_state>('atg__cudnn_init_dropout_state');
    return _atg__cudnn_init_dropout_state(
      arg0,
      dropout,
      train,
      dropout_seed,
      options_kind,
      options_device,
    );
  }

  _dart_atg__cudnn_init_dropout_state _atg__cudnn_init_dropout_state;

  void atg__cudnn_rnn(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Pointer<ffi.Void>> weight_data,
    int weight_len,
    int weight_stride0,
    ffi.Pointer<ffi.Void> weight_buf,
    ffi.Pointer<ffi.Void> hx,
    ffi.Pointer<ffi.Void> cx,
    int mode,
    int hidden_size,
    int num_layers,
    int batch_first,
    double dropout,
    int train,
    int bidirectional,
    ffi.Pointer<ffi.Int64> batch_sizes_data,
    int batch_sizes_len,
    ffi.Pointer<ffi.Void> dropout_state,
  ) {
    _atg__cudnn_rnn ??=
        _dylib.lookupFunction<_c_atg__cudnn_rnn, _dart_atg__cudnn_rnn>(
            'atg__cudnn_rnn');
    return _atg__cudnn_rnn(
      arg0,
      input,
      weight_data,
      weight_len,
      weight_stride0,
      weight_buf,
      hx,
      cx,
      mode,
      hidden_size,
      num_layers,
      batch_first,
      dropout,
      train,
      bidirectional,
      batch_sizes_data,
      batch_sizes_len,
      dropout_state,
    );
  }

  _dart_atg__cudnn_rnn _atg__cudnn_rnn;

  void atg__cudnn_rnn_flatten_weight(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Void>> weight_arr_data,
    int weight_arr_len,
    int weight_stride0,
    int input_size,
    int mode,
    int hidden_size,
    int num_layers,
    int batch_first,
    int bidirectional,
  ) {
    _atg__cudnn_rnn_flatten_weight ??= _dylib.lookupFunction<
        _c_atg__cudnn_rnn_flatten_weight,
        _dart_atg__cudnn_rnn_flatten_weight>('atg__cudnn_rnn_flatten_weight');
    return _atg__cudnn_rnn_flatten_weight(
      arg0,
      weight_arr_data,
      weight_arr_len,
      weight_stride0,
      input_size,
      mode,
      hidden_size,
      num_layers,
      batch_first,
      bidirectional,
    );
  }

  _dart_atg__cudnn_rnn_flatten_weight _atg__cudnn_rnn_flatten_weight;

  void atg__cumprod(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
  ) {
    _atg__cumprod ??= _dylib
        .lookupFunction<_c_atg__cumprod, _dart_atg__cumprod>('atg__cumprod');
    return _atg__cumprod(
      arg0,
      self,
      dim,
    );
  }

  _dart_atg__cumprod _atg__cumprod;

  void atg__cumprod_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    int dim,
  ) {
    _atg__cumprod_out ??=
        _dylib.lookupFunction<_c_atg__cumprod_out, _dart_atg__cumprod_out>(
            'atg__cumprod_out');
    return _atg__cumprod_out(
      arg0,
      out,
      self,
      dim,
    );
  }

  _dart_atg__cumprod_out _atg__cumprod_out;

  void atg__cumsum(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
  ) {
    _atg__cumsum ??=
        _dylib.lookupFunction<_c_atg__cumsum, _dart_atg__cumsum>('atg__cumsum');
    return _atg__cumsum(
      arg0,
      self,
      dim,
    );
  }

  _dart_atg__cumsum _atg__cumsum;

  void atg__cumsum_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    int dim,
  ) {
    _atg__cumsum_out ??=
        _dylib.lookupFunction<_c_atg__cumsum_out, _dart_atg__cumsum_out>(
            'atg__cumsum_out');
    return _atg__cumsum_out(
      arg0,
      out,
      self,
      dim,
    );
  }

  _dart_atg__cumsum_out _atg__cumsum_out;

  void atg__dim_arange(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> like,
    int dim,
  ) {
    _atg__dim_arange ??=
        _dylib.lookupFunction<_c_atg__dim_arange, _dart_atg__dim_arange>(
            'atg__dim_arange');
    return _atg__dim_arange(
      arg0,
      like,
      dim,
    );
  }

  _dart_atg__dim_arange _atg__dim_arange;

  void atg__dirichlet_grad(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> x,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> total,
  ) {
    _atg__dirichlet_grad ??= _dylib.lookupFunction<_c_atg__dirichlet_grad,
        _dart_atg__dirichlet_grad>('atg__dirichlet_grad');
    return _atg__dirichlet_grad(
      arg0,
      x,
      alpha,
      total,
    );
  }

  _dart_atg__dirichlet_grad _atg__dirichlet_grad;

  void atg__embedding_bag(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> indices,
    ffi.Pointer<ffi.Void> offsets,
    int scale_grad_by_freq,
    int mode,
    int sparse,
    ffi.Pointer<ffi.Void> per_sample_weights,
    int include_last_offset,
  ) {
    _atg__embedding_bag ??=
        _dylib.lookupFunction<_c_atg__embedding_bag, _dart_atg__embedding_bag>(
            'atg__embedding_bag');
    return _atg__embedding_bag(
      arg0,
      weight,
      indices,
      offsets,
      scale_grad_by_freq,
      mode,
      sparse,
      per_sample_weights,
      include_last_offset,
    );
  }

  _dart_atg__embedding_bag _atg__embedding_bag;

  void atg__embedding_bag_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad,
    ffi.Pointer<ffi.Void> indices,
    ffi.Pointer<ffi.Void> offsets,
    ffi.Pointer<ffi.Void> offset2bag,
    ffi.Pointer<ffi.Void> bag_size,
    ffi.Pointer<ffi.Void> maximum_indices,
    int num_weights,
    int scale_grad_by_freq,
    int mode,
    int sparse,
    ffi.Pointer<ffi.Void> per_sample_weights,
  ) {
    _atg__embedding_bag_backward ??= _dylib.lookupFunction<
        _c_atg__embedding_bag_backward,
        _dart_atg__embedding_bag_backward>('atg__embedding_bag_backward');
    return _atg__embedding_bag_backward(
      arg0,
      grad,
      indices,
      offsets,
      offset2bag,
      bag_size,
      maximum_indices,
      num_weights,
      scale_grad_by_freq,
      mode,
      sparse,
      per_sample_weights,
    );
  }

  _dart_atg__embedding_bag_backward _atg__embedding_bag_backward;

  void atg__embedding_bag_dense_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad,
    ffi.Pointer<ffi.Void> indices,
    ffi.Pointer<ffi.Void> offsets,
    ffi.Pointer<ffi.Void> offset2bag,
    ffi.Pointer<ffi.Void> bag_size,
    ffi.Pointer<ffi.Void> maximum_indices,
    int num_weights,
    int scale_grad_by_freq,
    int mode,
    ffi.Pointer<ffi.Void> per_sample_weights,
  ) {
    _atg__embedding_bag_dense_backward ??= _dylib.lookupFunction<
            _c_atg__embedding_bag_dense_backward,
            _dart_atg__embedding_bag_dense_backward>(
        'atg__embedding_bag_dense_backward');
    return _atg__embedding_bag_dense_backward(
      arg0,
      grad,
      indices,
      offsets,
      offset2bag,
      bag_size,
      maximum_indices,
      num_weights,
      scale_grad_by_freq,
      mode,
      per_sample_weights,
    );
  }

  _dart_atg__embedding_bag_dense_backward _atg__embedding_bag_dense_backward;

  void atg__embedding_bag_per_sample_weights_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> indices,
    ffi.Pointer<ffi.Void> offsets,
    ffi.Pointer<ffi.Void> offset2bag,
    int mode,
  ) {
    _atg__embedding_bag_per_sample_weights_backward ??= _dylib.lookupFunction<
            _c_atg__embedding_bag_per_sample_weights_backward,
            _dart_atg__embedding_bag_per_sample_weights_backward>(
        'atg__embedding_bag_per_sample_weights_backward');
    return _atg__embedding_bag_per_sample_weights_backward(
      arg0,
      grad,
      weight,
      indices,
      offsets,
      offset2bag,
      mode,
    );
  }

  _dart_atg__embedding_bag_per_sample_weights_backward
      _atg__embedding_bag_per_sample_weights_backward;

  void atg__embedding_bag_sparse_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad,
    ffi.Pointer<ffi.Void> indices,
    ffi.Pointer<ffi.Void> offsets,
    ffi.Pointer<ffi.Void> offset2bag,
    ffi.Pointer<ffi.Void> bag_size,
    int num_weights,
    int scale_grad_by_freq,
    int mode,
    ffi.Pointer<ffi.Void> per_sample_weights,
  ) {
    _atg__embedding_bag_sparse_backward ??= _dylib.lookupFunction<
            _c_atg__embedding_bag_sparse_backward,
            _dart_atg__embedding_bag_sparse_backward>(
        'atg__embedding_bag_sparse_backward');
    return _atg__embedding_bag_sparse_backward(
      arg0,
      grad,
      indices,
      offsets,
      offset2bag,
      bag_size,
      num_weights,
      scale_grad_by_freq,
      mode,
      per_sample_weights,
    );
  }

  _dart_atg__embedding_bag_sparse_backward _atg__embedding_bag_sparse_backward;

  void atg__empty_affine_quantized(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
    int options_kind,
    int options_device,
    double scale,
    int zero_point,
  ) {
    _atg__empty_affine_quantized ??= _dylib.lookupFunction<
        _c_atg__empty_affine_quantized,
        _dart_atg__empty_affine_quantized>('atg__empty_affine_quantized');
    return _atg__empty_affine_quantized(
      arg0,
      size_data,
      size_len,
      options_kind,
      options_device,
      scale,
      zero_point,
    );
  }

  _dart_atg__empty_affine_quantized _atg__empty_affine_quantized;

  void atg__empty_per_channel_affine_quantized(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
    ffi.Pointer<ffi.Void> scales,
    ffi.Pointer<ffi.Void> zero_points,
    int axis,
    int options_kind,
    int options_device,
  ) {
    _atg__empty_per_channel_affine_quantized ??= _dylib.lookupFunction<
            _c_atg__empty_per_channel_affine_quantized,
            _dart_atg__empty_per_channel_affine_quantized>(
        'atg__empty_per_channel_affine_quantized');
    return _atg__empty_per_channel_affine_quantized(
      arg0,
      size_data,
      size_len,
      scales,
      zero_points,
      axis,
      options_kind,
      options_device,
    );
  }

  _dart_atg__empty_per_channel_affine_quantized
      _atg__empty_per_channel_affine_quantized;

  void atg__euclidean_dist(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> x1,
    ffi.Pointer<ffi.Void> x2,
  ) {
    _atg__euclidean_dist ??= _dylib.lookupFunction<_c_atg__euclidean_dist,
        _dart_atg__euclidean_dist>('atg__euclidean_dist');
    return _atg__euclidean_dist(
      arg0,
      x1,
      x2,
    );
  }

  _dart_atg__euclidean_dist _atg__euclidean_dist;

  void atg__fft_with_size(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int signal_ndim,
    int complex_input,
    int complex_output,
    int inverse,
    ffi.Pointer<ffi.Int64> checked_signal_sizes_data,
    int checked_signal_sizes_len,
    int normalized,
    int onesided,
    ffi.Pointer<ffi.Int64> output_sizes_data,
    int output_sizes_len,
  ) {
    _atg__fft_with_size ??=
        _dylib.lookupFunction<_c_atg__fft_with_size, _dart_atg__fft_with_size>(
            'atg__fft_with_size');
    return _atg__fft_with_size(
      arg0,
      self,
      signal_ndim,
      complex_input,
      complex_output,
      inverse,
      checked_signal_sizes_data,
      checked_signal_sizes_len,
      normalized,
      onesided,
      output_sizes_data,
      output_sizes_len,
    );
  }

  _dart_atg__fft_with_size _atg__fft_with_size;

  void atg__fused_dropout(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    double p,
  ) {
    _atg__fused_dropout ??=
        _dylib.lookupFunction<_c_atg__fused_dropout, _dart_atg__fused_dropout>(
            'atg__fused_dropout');
    return _atg__fused_dropout(
      arg0,
      self,
      p,
    );
  }

  _dart_atg__fused_dropout _atg__fused_dropout;

  void atg__gather_sparse_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    ffi.Pointer<ffi.Void> index,
    ffi.Pointer<ffi.Void> grad,
  ) {
    _atg__gather_sparse_backward ??= _dylib.lookupFunction<
        _c_atg__gather_sparse_backward,
        _dart_atg__gather_sparse_backward>('atg__gather_sparse_backward');
    return _atg__gather_sparse_backward(
      arg0,
      self,
      dim,
      index,
      grad,
    );
  }

  _dart_atg__gather_sparse_backward _atg__gather_sparse_backward;

  void atg__index_copy_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    ffi.Pointer<ffi.Void> index,
    ffi.Pointer<ffi.Void> source,
  ) {
    _atg__index_copy_ ??=
        _dylib.lookupFunction<_c_atg__index_copy_, _dart_atg__index_copy_>(
            'atg__index_copy_');
    return _atg__index_copy_(
      arg0,
      self,
      dim,
      index,
      source,
    );
  }

  _dart_atg__index_copy_ _atg__index_copy_;

  void atg__index_put_impl_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Pointer<ffi.Void>> indices_data,
    int indices_len,
    ffi.Pointer<ffi.Void> values,
    int accumulate,
    int unsafe,
  ) {
    _atg__index_put_impl_ ??= _dylib.lookupFunction<_c_atg__index_put_impl_,
        _dart_atg__index_put_impl_>('atg__index_put_impl_');
    return _atg__index_put_impl_(
      arg0,
      self,
      indices_data,
      indices_len,
      values,
      accumulate,
      unsafe,
    );
  }

  _dart_atg__index_put_impl_ _atg__index_put_impl_;

  void atg__indices(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg__indices ??= _dylib
        .lookupFunction<_c_atg__indices, _dart_atg__indices>('atg__indices');
    return _atg__indices(
      arg0,
      self,
    );
  }

  _dart_atg__indices _atg__indices;

  void atg__inverse_helper(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg__inverse_helper ??= _dylib.lookupFunction<_c_atg__inverse_helper,
        _dart_atg__inverse_helper>('atg__inverse_helper');
    return _atg__inverse_helper(
      arg0,
      self,
    );
  }

  _dart_atg__inverse_helper _atg__inverse_helper;

  void atg__log_softmax(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int half_to_float,
  ) {
    _atg__log_softmax ??=
        _dylib.lookupFunction<_c_atg__log_softmax, _dart_atg__log_softmax>(
            'atg__log_softmax');
    return _atg__log_softmax(
      arg0,
      self,
      dim,
      half_to_float,
    );
  }

  _dart_atg__log_softmax _atg__log_softmax;

  void atg__log_softmax_backward_data(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> output,
    int dim,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg__log_softmax_backward_data ??= _dylib.lookupFunction<
        _c_atg__log_softmax_backward_data,
        _dart_atg__log_softmax_backward_data>('atg__log_softmax_backward_data');
    return _atg__log_softmax_backward_data(
      arg0,
      grad_output,
      output,
      dim,
      self,
    );
  }

  _dart_atg__log_softmax_backward_data _atg__log_softmax_backward_data;

  void atg__logcumsumexp(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
  ) {
    _atg__logcumsumexp ??=
        _dylib.lookupFunction<_c_atg__logcumsumexp, _dart_atg__logcumsumexp>(
            'atg__logcumsumexp');
    return _atg__logcumsumexp(
      arg0,
      self,
      dim,
    );
  }

  _dart_atg__logcumsumexp _atg__logcumsumexp;

  void atg__logcumsumexp_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    int dim,
  ) {
    _atg__logcumsumexp_out ??= _dylib.lookupFunction<_c_atg__logcumsumexp_out,
        _dart_atg__logcumsumexp_out>('atg__logcumsumexp_out');
    return _atg__logcumsumexp_out(
      arg0,
      out,
      self,
      dim,
    );
  }

  _dart_atg__logcumsumexp_out _atg__logcumsumexp_out;

  void atg__lu_solve_helper(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> LU_data,
    ffi.Pointer<ffi.Void> LU_pivots,
  ) {
    _atg__lu_solve_helper ??= _dylib.lookupFunction<_c_atg__lu_solve_helper,
        _dart_atg__lu_solve_helper>('atg__lu_solve_helper');
    return _atg__lu_solve_helper(
      arg0,
      self,
      LU_data,
      LU_pivots,
    );
  }

  _dart_atg__lu_solve_helper _atg__lu_solve_helper;

  void atg__lu_with_info(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int pivot,
    int check_errors,
  ) {
    _atg__lu_with_info ??=
        _dylib.lookupFunction<_c_atg__lu_with_info, _dart_atg__lu_with_info>(
            'atg__lu_with_info');
    return _atg__lu_with_info(
      arg0,
      self,
      pivot,
      check_errors,
    );
  }

  _dart_atg__lu_with_info _atg__lu_with_info;

  void atg__make_per_channel_quantized_tensor(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> scale,
    ffi.Pointer<ffi.Void> zero_point,
    int axis,
  ) {
    _atg__make_per_channel_quantized_tensor ??= _dylib.lookupFunction<
            _c_atg__make_per_channel_quantized_tensor,
            _dart_atg__make_per_channel_quantized_tensor>(
        'atg__make_per_channel_quantized_tensor');
    return _atg__make_per_channel_quantized_tensor(
      arg0,
      self,
      scale,
      zero_point,
      axis,
    );
  }

  _dart_atg__make_per_channel_quantized_tensor
      _atg__make_per_channel_quantized_tensor;

  void atg__make_per_tensor_quantized_tensor(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    double scale,
    int zero_point,
  ) {
    _atg__make_per_tensor_quantized_tensor ??= _dylib.lookupFunction<
            _c_atg__make_per_tensor_quantized_tensor,
            _dart_atg__make_per_tensor_quantized_tensor>(
        'atg__make_per_tensor_quantized_tensor');
    return _atg__make_per_tensor_quantized_tensor(
      arg0,
      self,
      scale,
      zero_point,
    );
  }

  _dart_atg__make_per_tensor_quantized_tensor
      _atg__make_per_tensor_quantized_tensor;

  void atg__masked_scale(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> mask,
    double scale,
  ) {
    _atg__masked_scale ??=
        _dylib.lookupFunction<_c_atg__masked_scale, _dart_atg__masked_scale>(
            'atg__masked_scale');
    return _atg__masked_scale(
      arg0,
      self,
      mask,
      scale,
    );
  }

  _dart_atg__masked_scale _atg__masked_scale;

  void atg__mkldnn_reshape(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> shape_data,
    int shape_len,
  ) {
    _atg__mkldnn_reshape ??= _dylib.lookupFunction<_c_atg__mkldnn_reshape,
        _dart_atg__mkldnn_reshape>('atg__mkldnn_reshape');
    return _atg__mkldnn_reshape(
      arg0,
      self,
      shape_data,
      shape_len,
    );
  }

  _dart_atg__mkldnn_reshape _atg__mkldnn_reshape;

  void atg__mkldnn_transpose(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim0,
    int dim1,
  ) {
    _atg__mkldnn_transpose ??= _dylib.lookupFunction<_c_atg__mkldnn_transpose,
        _dart_atg__mkldnn_transpose>('atg__mkldnn_transpose');
    return _atg__mkldnn_transpose(
      arg0,
      self,
      dim0,
      dim1,
    );
  }

  _dart_atg__mkldnn_transpose _atg__mkldnn_transpose;

  void atg__mkldnn_transpose_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim0,
    int dim1,
  ) {
    _atg__mkldnn_transpose_ ??= _dylib.lookupFunction<_c_atg__mkldnn_transpose_,
        _dart_atg__mkldnn_transpose_>('atg__mkldnn_transpose_');
    return _atg__mkldnn_transpose_(
      arg0,
      self,
      dim0,
      dim1,
    );
  }

  _dart_atg__mkldnn_transpose_ _atg__mkldnn_transpose_;

  void atg__mode(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int keepdim,
  ) {
    _atg__mode ??=
        _dylib.lookupFunction<_c_atg__mode, _dart_atg__mode>('atg__mode');
    return _atg__mode(
      arg0,
      self,
      dim,
      keepdim,
    );
  }

  _dart_atg__mode _atg__mode;

  void atg__mode_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> values,
    ffi.Pointer<ffi.Void> indices,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int keepdim,
  ) {
    _atg__mode_out ??= _dylib
        .lookupFunction<_c_atg__mode_out, _dart_atg__mode_out>('atg__mode_out');
    return _atg__mode_out(
      arg0,
      values,
      indices,
      self,
      dim,
      keepdim,
    );
  }

  _dart_atg__mode_out _atg__mode_out;

  void atg__multinomial_alias_draw(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> J,
    ffi.Pointer<ffi.Void> q,
    int num_samples,
  ) {
    _atg__multinomial_alias_draw ??= _dylib.lookupFunction<
        _c_atg__multinomial_alias_draw,
        _dart_atg__multinomial_alias_draw>('atg__multinomial_alias_draw');
    return _atg__multinomial_alias_draw(
      arg0,
      J,
      q,
      num_samples,
    );
  }

  _dart_atg__multinomial_alias_draw _atg__multinomial_alias_draw;

  void atg__multinomial_alias_setup(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> probs,
  ) {
    _atg__multinomial_alias_setup ??= _dylib.lookupFunction<
        _c_atg__multinomial_alias_setup,
        _dart_atg__multinomial_alias_setup>('atg__multinomial_alias_setup');
    return _atg__multinomial_alias_setup(
      arg0,
      probs,
    );
  }

  _dart_atg__multinomial_alias_setup _atg__multinomial_alias_setup;

  void atg__nnpack_spatial_convolution(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> bias,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
  ) {
    _atg__nnpack_spatial_convolution ??= _dylib.lookupFunction<
            _c_atg__nnpack_spatial_convolution,
            _dart_atg__nnpack_spatial_convolution>(
        'atg__nnpack_spatial_convolution');
    return _atg__nnpack_spatial_convolution(
      arg0,
      input,
      weight,
      bias,
      padding_data,
      padding_len,
      stride_data,
      stride_len,
    );
  }

  _dart_atg__nnpack_spatial_convolution _atg__nnpack_spatial_convolution;

  void atg__nnpack_spatial_convolution_backward_input(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
  ) {
    _atg__nnpack_spatial_convolution_backward_input ??= _dylib.lookupFunction<
            _c_atg__nnpack_spatial_convolution_backward_input,
            _dart_atg__nnpack_spatial_convolution_backward_input>(
        'atg__nnpack_spatial_convolution_backward_input');
    return _atg__nnpack_spatial_convolution_backward_input(
      arg0,
      input,
      grad_output,
      weight,
      padding_data,
      padding_len,
    );
  }

  _dart_atg__nnpack_spatial_convolution_backward_input
      _atg__nnpack_spatial_convolution_backward_input;

  void atg__nnpack_spatial_convolution_backward_weight(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Int64> weightsize_data,
    int weightsize_len,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
  ) {
    _atg__nnpack_spatial_convolution_backward_weight ??= _dylib.lookupFunction<
            _c_atg__nnpack_spatial_convolution_backward_weight,
            _dart_atg__nnpack_spatial_convolution_backward_weight>(
        'atg__nnpack_spatial_convolution_backward_weight');
    return _atg__nnpack_spatial_convolution_backward_weight(
      arg0,
      input,
      weightsize_data,
      weightsize_len,
      grad_output,
      padding_data,
      padding_len,
    );
  }

  _dart_atg__nnpack_spatial_convolution_backward_weight
      _atg__nnpack_spatial_convolution_backward_weight;

  void atg__pack_padded_sequence(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> lengths,
    int batch_first,
  ) {
    _atg__pack_padded_sequence ??= _dylib.lookupFunction<
        _c_atg__pack_padded_sequence,
        _dart_atg__pack_padded_sequence>('atg__pack_padded_sequence');
    return _atg__pack_padded_sequence(
      arg0,
      input,
      lengths,
      batch_first,
    );
  }

  _dart_atg__pack_padded_sequence _atg__pack_padded_sequence;

  void atg__pack_padded_sequence_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad,
    ffi.Pointer<ffi.Int64> input_size_data,
    int input_size_len,
    ffi.Pointer<ffi.Void> batch_sizes,
    int batch_first,
  ) {
    _atg__pack_padded_sequence_backward ??= _dylib.lookupFunction<
            _c_atg__pack_padded_sequence_backward,
            _dart_atg__pack_padded_sequence_backward>(
        'atg__pack_padded_sequence_backward');
    return _atg__pack_padded_sequence_backward(
      arg0,
      grad,
      input_size_data,
      input_size_len,
      batch_sizes,
      batch_first,
    );
  }

  _dart_atg__pack_padded_sequence_backward _atg__pack_padded_sequence_backward;

  void atg__pad_packed_sequence(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.Void> batch_sizes,
    int batch_first,
    ffi.Pointer<ffi.Void> padding_value,
    int total_length,
  ) {
    _atg__pad_packed_sequence ??= _dylib.lookupFunction<
        _c_atg__pad_packed_sequence,
        _dart_atg__pad_packed_sequence>('atg__pad_packed_sequence');
    return _atg__pad_packed_sequence(
      arg0,
      data,
      batch_sizes,
      batch_first,
      padding_value,
      total_length,
    );
  }

  _dart_atg__pad_packed_sequence _atg__pad_packed_sequence;

  void atg__pdist_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad,
    ffi.Pointer<ffi.Void> self,
    double p,
    ffi.Pointer<ffi.Void> pdist,
  ) {
    _atg__pdist_backward ??= _dylib.lookupFunction<_c_atg__pdist_backward,
        _dart_atg__pdist_backward>('atg__pdist_backward');
    return _atg__pdist_backward(
      arg0,
      grad,
      self,
      p,
      pdist,
    );
  }

  _dart_atg__pdist_backward _atg__pdist_backward;

  void atg__qr_helper(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int some,
  ) {
    _atg__qr_helper ??=
        _dylib.lookupFunction<_c_atg__qr_helper, _dart_atg__qr_helper>(
            'atg__qr_helper');
    return _atg__qr_helper(
      arg0,
      self,
      some,
    );
  }

  _dart_atg__qr_helper _atg__qr_helper;

  void atg__reshape_from_tensor(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> shape,
  ) {
    _atg__reshape_from_tensor ??= _dylib.lookupFunction<
        _c_atg__reshape_from_tensor,
        _dart_atg__reshape_from_tensor>('atg__reshape_from_tensor');
    return _atg__reshape_from_tensor(
      arg0,
      self,
      shape,
    );
  }

  _dart_atg__reshape_from_tensor _atg__reshape_from_tensor;

  void atg__s_where(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> condition,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg__s_where ??= _dylib
        .lookupFunction<_c_atg__s_where, _dart_atg__s_where>('atg__s_where');
    return _atg__s_where(
      arg0,
      condition,
      self,
      other,
    );
  }

  _dart_atg__s_where _atg__s_where;

  void atg__sample_dirichlet(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg__sample_dirichlet ??= _dylib.lookupFunction<_c_atg__sample_dirichlet,
        _dart_atg__sample_dirichlet>('atg__sample_dirichlet');
    return _atg__sample_dirichlet(
      arg0,
      self,
    );
  }

  _dart_atg__sample_dirichlet _atg__sample_dirichlet;

  void atg__shape_as_tensor(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg__shape_as_tensor ??= _dylib.lookupFunction<_c_atg__shape_as_tensor,
        _dart_atg__shape_as_tensor>('atg__shape_as_tensor');
    return _atg__shape_as_tensor(
      arg0,
      self,
    );
  }

  _dart_atg__shape_as_tensor _atg__shape_as_tensor;

  void atg__sobol_engine_draw(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> quasi,
    int n,
    ffi.Pointer<ffi.Void> sobolstate,
    int dimension,
    int num_generated,
    int dtype,
  ) {
    _atg__sobol_engine_draw ??= _dylib.lookupFunction<_c_atg__sobol_engine_draw,
        _dart_atg__sobol_engine_draw>('atg__sobol_engine_draw');
    return _atg__sobol_engine_draw(
      arg0,
      quasi,
      n,
      sobolstate,
      dimension,
      num_generated,
      dtype,
    );
  }

  _dart_atg__sobol_engine_draw _atg__sobol_engine_draw;

  void atg__sobol_engine_ff_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int n,
    ffi.Pointer<ffi.Void> sobolstate,
    int dimension,
    int num_generated,
  ) {
    _atg__sobol_engine_ff_ ??= _dylib.lookupFunction<_c_atg__sobol_engine_ff_,
        _dart_atg__sobol_engine_ff_>('atg__sobol_engine_ff_');
    return _atg__sobol_engine_ff_(
      arg0,
      self,
      n,
      sobolstate,
      dimension,
      num_generated,
    );
  }

  _dart_atg__sobol_engine_ff_ _atg__sobol_engine_ff_;

  void atg__sobol_engine_initialize_state_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dimension,
  ) {
    _atg__sobol_engine_initialize_state_ ??= _dylib.lookupFunction<
            _c_atg__sobol_engine_initialize_state_,
            _dart_atg__sobol_engine_initialize_state_>(
        'atg__sobol_engine_initialize_state_');
    return _atg__sobol_engine_initialize_state_(
      arg0,
      self,
      dimension,
    );
  }

  _dart_atg__sobol_engine_initialize_state_
      _atg__sobol_engine_initialize_state_;

  void atg__sobol_engine_scramble_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> ltm,
    int dimension,
  ) {
    _atg__sobol_engine_scramble_ ??= _dylib.lookupFunction<
        _c_atg__sobol_engine_scramble_,
        _dart_atg__sobol_engine_scramble_>('atg__sobol_engine_scramble_');
    return _atg__sobol_engine_scramble_(
      arg0,
      self,
      ltm,
      dimension,
    );
  }

  _dart_atg__sobol_engine_scramble_ _atg__sobol_engine_scramble_;

  void atg__softmax(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int half_to_float,
  ) {
    _atg__softmax ??= _dylib
        .lookupFunction<_c_atg__softmax, _dart_atg__softmax>('atg__softmax');
    return _atg__softmax(
      arg0,
      self,
      dim,
      half_to_float,
    );
  }

  _dart_atg__softmax _atg__softmax;

  void atg__softmax_backward_data(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> output,
    int dim,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg__softmax_backward_data ??= _dylib.lookupFunction<
        _c_atg__softmax_backward_data,
        _dart_atg__softmax_backward_data>('atg__softmax_backward_data');
    return _atg__softmax_backward_data(
      arg0,
      grad_output,
      output,
      dim,
      self,
    );
  }

  _dart_atg__softmax_backward_data _atg__softmax_backward_data;

  void atg__solve_helper(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> A,
  ) {
    _atg__solve_helper ??=
        _dylib.lookupFunction<_c_atg__solve_helper, _dart_atg__solve_helper>(
            'atg__solve_helper');
    return _atg__solve_helper(
      arg0,
      self,
      A,
    );
  }

  _dart_atg__solve_helper _atg__solve_helper;

  void atg__sparse_addmm(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> sparse,
    ffi.Pointer<ffi.Void> dense,
  ) {
    _atg__sparse_addmm ??=
        _dylib.lookupFunction<_c_atg__sparse_addmm, _dart_atg__sparse_addmm>(
            'atg__sparse_addmm');
    return _atg__sparse_addmm(
      arg0,
      self,
      sparse,
      dense,
    );
  }

  _dart_atg__sparse_addmm _atg__sparse_addmm;

  void atg__sparse_coo_tensor_unsafe(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> indices,
    ffi.Pointer<ffi.Void> values,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
    int options_kind,
    int options_device,
  ) {
    _atg__sparse_coo_tensor_unsafe ??= _dylib.lookupFunction<
        _c_atg__sparse_coo_tensor_unsafe,
        _dart_atg__sparse_coo_tensor_unsafe>('atg__sparse_coo_tensor_unsafe');
    return _atg__sparse_coo_tensor_unsafe(
      arg0,
      indices,
      values,
      size_data,
      size_len,
      options_kind,
      options_device,
    );
  }

  _dart_atg__sparse_coo_tensor_unsafe _atg__sparse_coo_tensor_unsafe;

  void atg__sparse_coo_tensor_with_dims(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    int sparse_dim,
    int dense_dim,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
    int options_kind,
    int options_device,
  ) {
    _atg__sparse_coo_tensor_with_dims ??= _dylib.lookupFunction<
            _c_atg__sparse_coo_tensor_with_dims,
            _dart_atg__sparse_coo_tensor_with_dims>(
        'atg__sparse_coo_tensor_with_dims');
    return _atg__sparse_coo_tensor_with_dims(
      arg0,
      sparse_dim,
      dense_dim,
      size_data,
      size_len,
      options_kind,
      options_device,
    );
  }

  _dart_atg__sparse_coo_tensor_with_dims _atg__sparse_coo_tensor_with_dims;

  void atg__sparse_coo_tensor_with_dims_and_tensors(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    int sparse_dim,
    int dense_dim,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
    ffi.Pointer<ffi.Void> indices,
    ffi.Pointer<ffi.Void> values,
    int options_kind,
    int options_device,
  ) {
    _atg__sparse_coo_tensor_with_dims_and_tensors ??= _dylib.lookupFunction<
            _c_atg__sparse_coo_tensor_with_dims_and_tensors,
            _dart_atg__sparse_coo_tensor_with_dims_and_tensors>(
        'atg__sparse_coo_tensor_with_dims_and_tensors');
    return _atg__sparse_coo_tensor_with_dims_and_tensors(
      arg0,
      sparse_dim,
      dense_dim,
      size_data,
      size_len,
      indices,
      values,
      options_kind,
      options_device,
    );
  }

  _dart_atg__sparse_coo_tensor_with_dims_and_tensors
      _atg__sparse_coo_tensor_with_dims_and_tensors;

  void atg__sparse_log_softmax(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int dtype,
  ) {
    _atg__sparse_log_softmax ??= _dylib.lookupFunction<
        _c_atg__sparse_log_softmax,
        _dart_atg__sparse_log_softmax>('atg__sparse_log_softmax');
    return _atg__sparse_log_softmax(
      arg0,
      self,
      dim,
      dtype,
    );
  }

  _dart_atg__sparse_log_softmax _atg__sparse_log_softmax;

  void atg__sparse_log_softmax1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int half_to_float,
  ) {
    _atg__sparse_log_softmax1 ??= _dylib.lookupFunction<
        _c_atg__sparse_log_softmax1,
        _dart_atg__sparse_log_softmax1>('atg__sparse_log_softmax1');
    return _atg__sparse_log_softmax1(
      arg0,
      self,
      dim,
      half_to_float,
    );
  }

  _dart_atg__sparse_log_softmax1 _atg__sparse_log_softmax1;

  void atg__sparse_log_softmax_backward_data(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> output,
    int dim,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg__sparse_log_softmax_backward_data ??= _dylib.lookupFunction<
            _c_atg__sparse_log_softmax_backward_data,
            _dart_atg__sparse_log_softmax_backward_data>(
        'atg__sparse_log_softmax_backward_data');
    return _atg__sparse_log_softmax_backward_data(
      arg0,
      grad_output,
      output,
      dim,
      self,
    );
  }

  _dart_atg__sparse_log_softmax_backward_data
      _atg__sparse_log_softmax_backward_data;

  void atg__sparse_mm(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> sparse,
    ffi.Pointer<ffi.Void> dense,
  ) {
    _atg__sparse_mm ??=
        _dylib.lookupFunction<_c_atg__sparse_mm, _dart_atg__sparse_mm>(
            'atg__sparse_mm');
    return _atg__sparse_mm(
      arg0,
      sparse,
      dense,
    );
  }

  _dart_atg__sparse_mm _atg__sparse_mm;

  void atg__sparse_softmax(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int dtype,
  ) {
    _atg__sparse_softmax ??= _dylib.lookupFunction<_c_atg__sparse_softmax,
        _dart_atg__sparse_softmax>('atg__sparse_softmax');
    return _atg__sparse_softmax(
      arg0,
      self,
      dim,
      dtype,
    );
  }

  _dart_atg__sparse_softmax _atg__sparse_softmax;

  void atg__sparse_softmax1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int half_to_float,
  ) {
    _atg__sparse_softmax1 ??= _dylib.lookupFunction<_c_atg__sparse_softmax1,
        _dart_atg__sparse_softmax1>('atg__sparse_softmax1');
    return _atg__sparse_softmax1(
      arg0,
      self,
      dim,
      half_to_float,
    );
  }

  _dart_atg__sparse_softmax1 _atg__sparse_softmax1;

  void atg__sparse_softmax_backward_data(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> output,
    int dim,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg__sparse_softmax_backward_data ??= _dylib.lookupFunction<
            _c_atg__sparse_softmax_backward_data,
            _dart_atg__sparse_softmax_backward_data>(
        'atg__sparse_softmax_backward_data');
    return _atg__sparse_softmax_backward_data(
      arg0,
      grad_output,
      output,
      dim,
      self,
    );
  }

  _dart_atg__sparse_softmax_backward_data _atg__sparse_softmax_backward_data;

  void atg__sparse_sum(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg__sparse_sum ??=
        _dylib.lookupFunction<_c_atg__sparse_sum, _dart_atg__sparse_sum>(
            'atg__sparse_sum');
    return _atg__sparse_sum(
      arg0,
      self,
    );
  }

  _dart_atg__sparse_sum _atg__sparse_sum;

  void atg__sparse_sum1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dtype,
  ) {
    _atg__sparse_sum1 ??=
        _dylib.lookupFunction<_c_atg__sparse_sum1, _dart_atg__sparse_sum1>(
            'atg__sparse_sum1');
    return _atg__sparse_sum1(
      arg0,
      self,
      dtype,
    );
  }

  _dart_atg__sparse_sum1 _atg__sparse_sum1;

  void atg__sparse_sum2(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> dim_data,
    int dim_len,
  ) {
    _atg__sparse_sum2 ??=
        _dylib.lookupFunction<_c_atg__sparse_sum2, _dart_atg__sparse_sum2>(
            'atg__sparse_sum2');
    return _atg__sparse_sum2(
      arg0,
      self,
      dim_data,
      dim_len,
    );
  }

  _dart_atg__sparse_sum2 _atg__sparse_sum2;

  void atg__sparse_sum3(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> dim_data,
    int dim_len,
    int dtype,
  ) {
    _atg__sparse_sum3 ??=
        _dylib.lookupFunction<_c_atg__sparse_sum3, _dart_atg__sparse_sum3>(
            'atg__sparse_sum3');
    return _atg__sparse_sum3(
      arg0,
      self,
      dim_data,
      dim_len,
      dtype,
    );
  }

  _dart_atg__sparse_sum3 _atg__sparse_sum3;

  void atg__sparse_sum_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> dim_data,
    int dim_len,
  ) {
    _atg__sparse_sum_backward ??= _dylib.lookupFunction<
        _c_atg__sparse_sum_backward,
        _dart_atg__sparse_sum_backward>('atg__sparse_sum_backward');
    return _atg__sparse_sum_backward(
      arg0,
      grad,
      self,
      dim_data,
      dim_len,
    );
  }

  _dart_atg__sparse_sum_backward _atg__sparse_sum_backward;

  void atg__standard_gamma(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg__standard_gamma ??= _dylib.lookupFunction<_c_atg__standard_gamma,
        _dart_atg__standard_gamma>('atg__standard_gamma');
    return _atg__standard_gamma(
      arg0,
      self,
    );
  }

  _dart_atg__standard_gamma _atg__standard_gamma;

  void atg__standard_gamma_grad(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> output,
  ) {
    _atg__standard_gamma_grad ??= _dylib.lookupFunction<
        _c_atg__standard_gamma_grad,
        _dart_atg__standard_gamma_grad>('atg__standard_gamma_grad');
    return _atg__standard_gamma_grad(
      arg0,
      self,
      output,
    );
  }

  _dart_atg__standard_gamma_grad _atg__standard_gamma_grad;

  void atg__svd_helper(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int some,
    int compute_uv,
  ) {
    _atg__svd_helper ??=
        _dylib.lookupFunction<_c_atg__svd_helper, _dart_atg__svd_helper>(
            'atg__svd_helper');
    return _atg__svd_helper(
      arg0,
      self,
      some,
      compute_uv,
    );
  }

  _dart_atg__svd_helper _atg__svd_helper;

  void atg__symeig_helper(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int eigenvectors,
    int upper,
  ) {
    _atg__symeig_helper ??=
        _dylib.lookupFunction<_c_atg__symeig_helper, _dart_atg__symeig_helper>(
            'atg__symeig_helper');
    return _atg__symeig_helper(
      arg0,
      self,
      eigenvectors,
      upper,
    );
  }

  _dart_atg__symeig_helper _atg__symeig_helper;

  void atg__test_serialization_subcmul(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg__test_serialization_subcmul ??= _dylib.lookupFunction<
            _c_atg__test_serialization_subcmul,
            _dart_atg__test_serialization_subcmul>(
        'atg__test_serialization_subcmul');
    return _atg__test_serialization_subcmul(
      arg0,
      self,
      other,
    );
  }

  _dart_atg__test_serialization_subcmul _atg__test_serialization_subcmul;

  void atg__triangular_solve_helper(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> A,
    int upper,
    int transpose,
    int unitriangular,
  ) {
    _atg__triangular_solve_helper ??= _dylib.lookupFunction<
        _c_atg__triangular_solve_helper,
        _dart_atg__triangular_solve_helper>('atg__triangular_solve_helper');
    return _atg__triangular_solve_helper(
      arg0,
      self,
      A,
      upper,
      transpose,
      unitriangular,
    );
  }

  _dart_atg__triangular_solve_helper _atg__triangular_solve_helper;

  void atg__trilinear(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> i1,
    ffi.Pointer<ffi.Void> i2,
    ffi.Pointer<ffi.Void> i3,
    ffi.Pointer<ffi.Int64> expand1_data,
    int expand1_len,
    ffi.Pointer<ffi.Int64> expand2_data,
    int expand2_len,
    ffi.Pointer<ffi.Int64> expand3_data,
    int expand3_len,
    ffi.Pointer<ffi.Int64> sumdim_data,
    int sumdim_len,
    int unroll_dim,
  ) {
    _atg__trilinear ??=
        _dylib.lookupFunction<_c_atg__trilinear, _dart_atg__trilinear>(
            'atg__trilinear');
    return _atg__trilinear(
      arg0,
      i1,
      i2,
      i3,
      expand1_data,
      expand1_len,
      expand2_data,
      expand2_len,
      expand3_data,
      expand3_len,
      sumdim_data,
      sumdim_len,
      unroll_dim,
    );
  }

  _dart_atg__trilinear _atg__trilinear;

  void atg__unique(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int sorted,
    int return_inverse,
  ) {
    _atg__unique ??=
        _dylib.lookupFunction<_c_atg__unique, _dart_atg__unique>('atg__unique');
    return _atg__unique(
      arg0,
      self,
      sorted,
      return_inverse,
    );
  }

  _dart_atg__unique _atg__unique;

  void atg__unique2(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int sorted,
    int return_inverse,
    int return_counts,
  ) {
    _atg__unique2 ??= _dylib
        .lookupFunction<_c_atg__unique2, _dart_atg__unique2>('atg__unique2');
    return _atg__unique2(
      arg0,
      self,
      sorted,
      return_inverse,
      return_counts,
    );
  }

  _dart_atg__unique2 _atg__unique2;

  void atg__unsafe_view(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
  ) {
    _atg__unsafe_view ??=
        _dylib.lookupFunction<_c_atg__unsafe_view, _dart_atg__unsafe_view>(
            'atg__unsafe_view');
    return _atg__unsafe_view(
      arg0,
      self,
      size_data,
      size_len,
    );
  }

  _dart_atg__unsafe_view _atg__unsafe_view;

  void atg__values(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg__values ??=
        _dylib.lookupFunction<_c_atg__values, _dart_atg__values>('atg__values');
    return _atg__values(
      arg0,
      self,
    );
  }

  _dart_atg__values _atg__values;

  void atg__weight_norm(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> v,
    ffi.Pointer<ffi.Void> g,
    int dim,
  ) {
    _atg__weight_norm ??=
        _dylib.lookupFunction<_c_atg__weight_norm, _dart_atg__weight_norm>(
            'atg__weight_norm');
    return _atg__weight_norm(
      arg0,
      v,
      g,
      dim,
    );
  }

  _dart_atg__weight_norm _atg__weight_norm;

  void atg__weight_norm_cuda_interface(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> v,
    ffi.Pointer<ffi.Void> g,
    int dim,
  ) {
    _atg__weight_norm_cuda_interface ??= _dylib.lookupFunction<
            _c_atg__weight_norm_cuda_interface,
            _dart_atg__weight_norm_cuda_interface>(
        'atg__weight_norm_cuda_interface');
    return _atg__weight_norm_cuda_interface(
      arg0,
      v,
      g,
      dim,
    );
  }

  _dart_atg__weight_norm_cuda_interface _atg__weight_norm_cuda_interface;

  void atg__weight_norm_cuda_interface_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_w,
    ffi.Pointer<ffi.Void> saved_v,
    ffi.Pointer<ffi.Void> saved_g,
    ffi.Pointer<ffi.Void> saved_norms,
    int dim,
  ) {
    _atg__weight_norm_cuda_interface_backward ??= _dylib.lookupFunction<
            _c_atg__weight_norm_cuda_interface_backward,
            _dart_atg__weight_norm_cuda_interface_backward>(
        'atg__weight_norm_cuda_interface_backward');
    return _atg__weight_norm_cuda_interface_backward(
      arg0,
      grad_w,
      saved_v,
      saved_g,
      saved_norms,
      dim,
    );
  }

  _dart_atg__weight_norm_cuda_interface_backward
      _atg__weight_norm_cuda_interface_backward;

  void atg__weight_norm_differentiable_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_w,
    ffi.Pointer<ffi.Void> saved_v,
    ffi.Pointer<ffi.Void> saved_g,
    ffi.Pointer<ffi.Void> saved_norms,
    int dim,
  ) {
    _atg__weight_norm_differentiable_backward ??= _dylib.lookupFunction<
            _c_atg__weight_norm_differentiable_backward,
            _dart_atg__weight_norm_differentiable_backward>(
        'atg__weight_norm_differentiable_backward');
    return _atg__weight_norm_differentiable_backward(
      arg0,
      grad_w,
      saved_v,
      saved_g,
      saved_norms,
      dim,
    );
  }

  _dart_atg__weight_norm_differentiable_backward
      _atg__weight_norm_differentiable_backward;

  void atg_abs(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_abs ??= _dylib.lookupFunction<_c_atg_abs, _dart_atg_abs>('atg_abs');
    return _atg_abs(
      arg0,
      self,
    );
  }

  _dart_atg_abs _atg_abs;

  void atg_abs_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_abs_ ??=
        _dylib.lookupFunction<_c_atg_abs_, _dart_atg_abs_>('atg_abs_');
    return _atg_abs_(
      arg0,
      self,
    );
  }

  _dart_atg_abs_ _atg_abs_;

  void atg_abs_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_abs_out ??=
        _dylib.lookupFunction<_c_atg_abs_out, _dart_atg_abs_out>('atg_abs_out');
    return _atg_abs_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_abs_out _atg_abs_out;

  void atg_absolute(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_absolute ??= _dylib
        .lookupFunction<_c_atg_absolute, _dart_atg_absolute>('atg_absolute');
    return _atg_absolute(
      arg0,
      self,
    );
  }

  _dart_atg_absolute _atg_absolute;

  void atg_absolute_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_absolute_ ??= _dylib
        .lookupFunction<_c_atg_absolute_, _dart_atg_absolute_>('atg_absolute_');
    return _atg_absolute_(
      arg0,
      self,
    );
  }

  _dart_atg_absolute_ _atg_absolute_;

  void atg_absolute_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_absolute_out ??=
        _dylib.lookupFunction<_c_atg_absolute_out, _dart_atg_absolute_out>(
            'atg_absolute_out');
    return _atg_absolute_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_absolute_out _atg_absolute_out;

  void atg_acos(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_acos ??=
        _dylib.lookupFunction<_c_atg_acos, _dart_atg_acos>('atg_acos');
    return _atg_acos(
      arg0,
      self,
    );
  }

  _dart_atg_acos _atg_acos;

  void atg_acos_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_acos_ ??=
        _dylib.lookupFunction<_c_atg_acos_, _dart_atg_acos_>('atg_acos_');
    return _atg_acos_(
      arg0,
      self,
    );
  }

  _dart_atg_acos_ _atg_acos_;

  void atg_acos_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_acos_out ??= _dylib
        .lookupFunction<_c_atg_acos_out, _dart_atg_acos_out>('atg_acos_out');
    return _atg_acos_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_acos_out _atg_acos_out;

  void atg_acosh(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_acosh ??=
        _dylib.lookupFunction<_c_atg_acosh, _dart_atg_acosh>('atg_acosh');
    return _atg_acosh(
      arg0,
      self,
    );
  }

  _dart_atg_acosh _atg_acosh;

  void atg_acosh_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_acosh_ ??=
        _dylib.lookupFunction<_c_atg_acosh_, _dart_atg_acosh_>('atg_acosh_');
    return _atg_acosh_(
      arg0,
      self,
    );
  }

  _dart_atg_acosh_ _atg_acosh_;

  void atg_acosh_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_acosh_out ??= _dylib
        .lookupFunction<_c_atg_acosh_out, _dart_atg_acosh_out>('atg_acosh_out');
    return _atg_acosh_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_acosh_out _atg_acosh_out;

  void atg_adaptive_avg_pool1d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
  ) {
    _atg_adaptive_avg_pool1d ??= _dylib.lookupFunction<
        _c_atg_adaptive_avg_pool1d,
        _dart_atg_adaptive_avg_pool1d>('atg_adaptive_avg_pool1d');
    return _atg_adaptive_avg_pool1d(
      arg0,
      self,
      output_size_data,
      output_size_len,
    );
  }

  _dart_atg_adaptive_avg_pool1d _atg_adaptive_avg_pool1d;

  void atg_adaptive_avg_pool2d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
  ) {
    _atg_adaptive_avg_pool2d ??= _dylib.lookupFunction<
        _c_atg_adaptive_avg_pool2d,
        _dart_atg_adaptive_avg_pool2d>('atg_adaptive_avg_pool2d');
    return _atg_adaptive_avg_pool2d(
      arg0,
      self,
      output_size_data,
      output_size_len,
    );
  }

  _dart_atg_adaptive_avg_pool2d _atg_adaptive_avg_pool2d;

  void atg_adaptive_avg_pool2d_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
  ) {
    _atg_adaptive_avg_pool2d_out ??= _dylib.lookupFunction<
        _c_atg_adaptive_avg_pool2d_out,
        _dart_atg_adaptive_avg_pool2d_out>('atg_adaptive_avg_pool2d_out');
    return _atg_adaptive_avg_pool2d_out(
      arg0,
      out,
      self,
      output_size_data,
      output_size_len,
    );
  }

  _dart_atg_adaptive_avg_pool2d_out _atg_adaptive_avg_pool2d_out;

  void atg_adaptive_avg_pool3d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
  ) {
    _atg_adaptive_avg_pool3d ??= _dylib.lookupFunction<
        _c_atg_adaptive_avg_pool3d,
        _dart_atg_adaptive_avg_pool3d>('atg_adaptive_avg_pool3d');
    return _atg_adaptive_avg_pool3d(
      arg0,
      self,
      output_size_data,
      output_size_len,
    );
  }

  _dart_atg_adaptive_avg_pool3d _atg_adaptive_avg_pool3d;

  void atg_adaptive_avg_pool3d_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_adaptive_avg_pool3d_backward ??= _dylib.lookupFunction<
            _c_atg_adaptive_avg_pool3d_backward,
            _dart_atg_adaptive_avg_pool3d_backward>(
        'atg_adaptive_avg_pool3d_backward');
    return _atg_adaptive_avg_pool3d_backward(
      arg0,
      grad_output,
      self,
    );
  }

  _dart_atg_adaptive_avg_pool3d_backward _atg_adaptive_avg_pool3d_backward;

  void atg_adaptive_avg_pool3d_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_adaptive_avg_pool3d_backward_out ??= _dylib.lookupFunction<
            _c_atg_adaptive_avg_pool3d_backward_out,
            _dart_atg_adaptive_avg_pool3d_backward_out>(
        'atg_adaptive_avg_pool3d_backward_out');
    return _atg_adaptive_avg_pool3d_backward_out(
      arg0,
      grad_input,
      grad_output,
      self,
    );
  }

  _dart_atg_adaptive_avg_pool3d_backward_out
      _atg_adaptive_avg_pool3d_backward_out;

  void atg_adaptive_avg_pool3d_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
  ) {
    _atg_adaptive_avg_pool3d_out ??= _dylib.lookupFunction<
        _c_atg_adaptive_avg_pool3d_out,
        _dart_atg_adaptive_avg_pool3d_out>('atg_adaptive_avg_pool3d_out');
    return _atg_adaptive_avg_pool3d_out(
      arg0,
      out,
      self,
      output_size_data,
      output_size_len,
    );
  }

  _dart_atg_adaptive_avg_pool3d_out _atg_adaptive_avg_pool3d_out;

  void atg_adaptive_max_pool1d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
  ) {
    _atg_adaptive_max_pool1d ??= _dylib.lookupFunction<
        _c_atg_adaptive_max_pool1d,
        _dart_atg_adaptive_max_pool1d>('atg_adaptive_max_pool1d');
    return _atg_adaptive_max_pool1d(
      arg0,
      self,
      output_size_data,
      output_size_len,
    );
  }

  _dart_atg_adaptive_max_pool1d _atg_adaptive_max_pool1d;

  void atg_adaptive_max_pool2d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
  ) {
    _atg_adaptive_max_pool2d ??= _dylib.lookupFunction<
        _c_atg_adaptive_max_pool2d,
        _dart_atg_adaptive_max_pool2d>('atg_adaptive_max_pool2d');
    return _atg_adaptive_max_pool2d(
      arg0,
      self,
      output_size_data,
      output_size_len,
    );
  }

  _dart_atg_adaptive_max_pool2d _atg_adaptive_max_pool2d;

  void atg_adaptive_max_pool2d_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> indices,
  ) {
    _atg_adaptive_max_pool2d_backward ??= _dylib.lookupFunction<
            _c_atg_adaptive_max_pool2d_backward,
            _dart_atg_adaptive_max_pool2d_backward>(
        'atg_adaptive_max_pool2d_backward');
    return _atg_adaptive_max_pool2d_backward(
      arg0,
      grad_output,
      self,
      indices,
    );
  }

  _dart_atg_adaptive_max_pool2d_backward _atg_adaptive_max_pool2d_backward;

  void atg_adaptive_max_pool2d_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> indices,
  ) {
    _atg_adaptive_max_pool2d_backward_out ??= _dylib.lookupFunction<
            _c_atg_adaptive_max_pool2d_backward_out,
            _dart_atg_adaptive_max_pool2d_backward_out>(
        'atg_adaptive_max_pool2d_backward_out');
    return _atg_adaptive_max_pool2d_backward_out(
      arg0,
      grad_input,
      grad_output,
      self,
      indices,
    );
  }

  _dart_atg_adaptive_max_pool2d_backward_out
      _atg_adaptive_max_pool2d_backward_out;

  void atg_adaptive_max_pool2d_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> indices,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
  ) {
    _atg_adaptive_max_pool2d_out ??= _dylib.lookupFunction<
        _c_atg_adaptive_max_pool2d_out,
        _dart_atg_adaptive_max_pool2d_out>('atg_adaptive_max_pool2d_out');
    return _atg_adaptive_max_pool2d_out(
      arg0,
      out,
      indices,
      self,
      output_size_data,
      output_size_len,
    );
  }

  _dart_atg_adaptive_max_pool2d_out _atg_adaptive_max_pool2d_out;

  void atg_adaptive_max_pool3d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
  ) {
    _atg_adaptive_max_pool3d ??= _dylib.lookupFunction<
        _c_atg_adaptive_max_pool3d,
        _dart_atg_adaptive_max_pool3d>('atg_adaptive_max_pool3d');
    return _atg_adaptive_max_pool3d(
      arg0,
      self,
      output_size_data,
      output_size_len,
    );
  }

  _dart_atg_adaptive_max_pool3d _atg_adaptive_max_pool3d;

  void atg_adaptive_max_pool3d_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> indices,
  ) {
    _atg_adaptive_max_pool3d_backward ??= _dylib.lookupFunction<
            _c_atg_adaptive_max_pool3d_backward,
            _dart_atg_adaptive_max_pool3d_backward>(
        'atg_adaptive_max_pool3d_backward');
    return _atg_adaptive_max_pool3d_backward(
      arg0,
      grad_output,
      self,
      indices,
    );
  }

  _dart_atg_adaptive_max_pool3d_backward _atg_adaptive_max_pool3d_backward;

  void atg_adaptive_max_pool3d_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> indices,
  ) {
    _atg_adaptive_max_pool3d_backward_out ??= _dylib.lookupFunction<
            _c_atg_adaptive_max_pool3d_backward_out,
            _dart_atg_adaptive_max_pool3d_backward_out>(
        'atg_adaptive_max_pool3d_backward_out');
    return _atg_adaptive_max_pool3d_backward_out(
      arg0,
      grad_input,
      grad_output,
      self,
      indices,
    );
  }

  _dart_atg_adaptive_max_pool3d_backward_out
      _atg_adaptive_max_pool3d_backward_out;

  void atg_adaptive_max_pool3d_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> indices,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
  ) {
    _atg_adaptive_max_pool3d_out ??= _dylib.lookupFunction<
        _c_atg_adaptive_max_pool3d_out,
        _dart_atg_adaptive_max_pool3d_out>('atg_adaptive_max_pool3d_out');
    return _atg_adaptive_max_pool3d_out(
      arg0,
      out,
      indices,
      self,
      output_size_data,
      output_size_len,
    );
  }

  _dart_atg_adaptive_max_pool3d_out _atg_adaptive_max_pool3d_out;

  void atg_add(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_add ??= _dylib.lookupFunction<_c_atg_add, _dart_atg_add>('atg_add');
    return _atg_add(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_add _atg_add;

  void atg_add1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_add1 ??=
        _dylib.lookupFunction<_c_atg_add1, _dart_atg_add1>('atg_add1');
    return _atg_add1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_add1 _atg_add1;

  void atg_add_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_add_ ??=
        _dylib.lookupFunction<_c_atg_add_, _dart_atg_add_>('atg_add_');
    return _atg_add_(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_add_ _atg_add_;

  void atg_add_1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_add_1 ??=
        _dylib.lookupFunction<_c_atg_add_1, _dart_atg_add_1>('atg_add_1');
    return _atg_add_1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_add_1 _atg_add_1;

  void atg_add_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_add_out ??=
        _dylib.lookupFunction<_c_atg_add_out, _dart_atg_add_out>('atg_add_out');
    return _atg_add_out(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_add_out _atg_add_out;

  void atg_addbmm(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> batch1,
    ffi.Pointer<ffi.Void> batch2,
  ) {
    _atg_addbmm ??=
        _dylib.lookupFunction<_c_atg_addbmm, _dart_atg_addbmm>('atg_addbmm');
    return _atg_addbmm(
      arg0,
      self,
      batch1,
      batch2,
    );
  }

  _dart_atg_addbmm _atg_addbmm;

  void atg_addbmm_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> batch1,
    ffi.Pointer<ffi.Void> batch2,
  ) {
    _atg_addbmm_ ??=
        _dylib.lookupFunction<_c_atg_addbmm_, _dart_atg_addbmm_>('atg_addbmm_');
    return _atg_addbmm_(
      arg0,
      self,
      batch1,
      batch2,
    );
  }

  _dart_atg_addbmm_ _atg_addbmm_;

  void atg_addbmm_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> batch1,
    ffi.Pointer<ffi.Void> batch2,
  ) {
    _atg_addbmm_out ??=
        _dylib.lookupFunction<_c_atg_addbmm_out, _dart_atg_addbmm_out>(
            'atg_addbmm_out');
    return _atg_addbmm_out(
      arg0,
      out,
      self,
      batch1,
      batch2,
    );
  }

  _dart_atg_addbmm_out _atg_addbmm_out;

  void atg_addcdiv(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> tensor1,
    ffi.Pointer<ffi.Void> tensor2,
  ) {
    _atg_addcdiv ??=
        _dylib.lookupFunction<_c_atg_addcdiv, _dart_atg_addcdiv>('atg_addcdiv');
    return _atg_addcdiv(
      arg0,
      self,
      tensor1,
      tensor2,
    );
  }

  _dart_atg_addcdiv _atg_addcdiv;

  void atg_addcdiv_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> tensor1,
    ffi.Pointer<ffi.Void> tensor2,
  ) {
    _atg_addcdiv_ ??= _dylib
        .lookupFunction<_c_atg_addcdiv_, _dart_atg_addcdiv_>('atg_addcdiv_');
    return _atg_addcdiv_(
      arg0,
      self,
      tensor1,
      tensor2,
    );
  }

  _dart_atg_addcdiv_ _atg_addcdiv_;

  void atg_addcdiv_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> tensor1,
    ffi.Pointer<ffi.Void> tensor2,
  ) {
    _atg_addcdiv_out ??=
        _dylib.lookupFunction<_c_atg_addcdiv_out, _dart_atg_addcdiv_out>(
            'atg_addcdiv_out');
    return _atg_addcdiv_out(
      arg0,
      out,
      self,
      tensor1,
      tensor2,
    );
  }

  _dart_atg_addcdiv_out _atg_addcdiv_out;

  void atg_addcmul(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> tensor1,
    ffi.Pointer<ffi.Void> tensor2,
  ) {
    _atg_addcmul ??=
        _dylib.lookupFunction<_c_atg_addcmul, _dart_atg_addcmul>('atg_addcmul');
    return _atg_addcmul(
      arg0,
      self,
      tensor1,
      tensor2,
    );
  }

  _dart_atg_addcmul _atg_addcmul;

  void atg_addcmul_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> tensor1,
    ffi.Pointer<ffi.Void> tensor2,
  ) {
    _atg_addcmul_ ??= _dylib
        .lookupFunction<_c_atg_addcmul_, _dart_atg_addcmul_>('atg_addcmul_');
    return _atg_addcmul_(
      arg0,
      self,
      tensor1,
      tensor2,
    );
  }

  _dart_atg_addcmul_ _atg_addcmul_;

  void atg_addcmul_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> tensor1,
    ffi.Pointer<ffi.Void> tensor2,
  ) {
    _atg_addcmul_out ??=
        _dylib.lookupFunction<_c_atg_addcmul_out, _dart_atg_addcmul_out>(
            'atg_addcmul_out');
    return _atg_addcmul_out(
      arg0,
      out,
      self,
      tensor1,
      tensor2,
    );
  }

  _dart_atg_addcmul_out _atg_addcmul_out;

  void atg_addmm(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> mat1,
    ffi.Pointer<ffi.Void> mat2,
  ) {
    _atg_addmm ??=
        _dylib.lookupFunction<_c_atg_addmm, _dart_atg_addmm>('atg_addmm');
    return _atg_addmm(
      arg0,
      self,
      mat1,
      mat2,
    );
  }

  _dart_atg_addmm _atg_addmm;

  void atg_addmm_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> mat1,
    ffi.Pointer<ffi.Void> mat2,
  ) {
    _atg_addmm_ ??=
        _dylib.lookupFunction<_c_atg_addmm_, _dart_atg_addmm_>('atg_addmm_');
    return _atg_addmm_(
      arg0,
      self,
      mat1,
      mat2,
    );
  }

  _dart_atg_addmm_ _atg_addmm_;

  void atg_addmm_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> mat1,
    ffi.Pointer<ffi.Void> mat2,
  ) {
    _atg_addmm_out ??= _dylib
        .lookupFunction<_c_atg_addmm_out, _dart_atg_addmm_out>('atg_addmm_out');
    return _atg_addmm_out(
      arg0,
      out,
      self,
      mat1,
      mat2,
    );
  }

  _dart_atg_addmm_out _atg_addmm_out;

  void atg_addmv(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> mat,
    ffi.Pointer<ffi.Void> vec,
  ) {
    _atg_addmv ??=
        _dylib.lookupFunction<_c_atg_addmv, _dart_atg_addmv>('atg_addmv');
    return _atg_addmv(
      arg0,
      self,
      mat,
      vec,
    );
  }

  _dart_atg_addmv _atg_addmv;

  void atg_addmv_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> mat,
    ffi.Pointer<ffi.Void> vec,
  ) {
    _atg_addmv_ ??=
        _dylib.lookupFunction<_c_atg_addmv_, _dart_atg_addmv_>('atg_addmv_');
    return _atg_addmv_(
      arg0,
      self,
      mat,
      vec,
    );
  }

  _dart_atg_addmv_ _atg_addmv_;

  void atg_addmv_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> mat,
    ffi.Pointer<ffi.Void> vec,
  ) {
    _atg_addmv_out ??= _dylib
        .lookupFunction<_c_atg_addmv_out, _dart_atg_addmv_out>('atg_addmv_out');
    return _atg_addmv_out(
      arg0,
      out,
      self,
      mat,
      vec,
    );
  }

  _dart_atg_addmv_out _atg_addmv_out;

  void atg_addr(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> vec1,
    ffi.Pointer<ffi.Void> vec2,
  ) {
    _atg_addr ??=
        _dylib.lookupFunction<_c_atg_addr, _dart_atg_addr>('atg_addr');
    return _atg_addr(
      arg0,
      self,
      vec1,
      vec2,
    );
  }

  _dart_atg_addr _atg_addr;

  void atg_addr_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> vec1,
    ffi.Pointer<ffi.Void> vec2,
  ) {
    _atg_addr_ ??=
        _dylib.lookupFunction<_c_atg_addr_, _dart_atg_addr_>('atg_addr_');
    return _atg_addr_(
      arg0,
      self,
      vec1,
      vec2,
    );
  }

  _dart_atg_addr_ _atg_addr_;

  void atg_addr_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> vec1,
    ffi.Pointer<ffi.Void> vec2,
  ) {
    _atg_addr_out ??= _dylib
        .lookupFunction<_c_atg_addr_out, _dart_atg_addr_out>('atg_addr_out');
    return _atg_addr_out(
      arg0,
      out,
      self,
      vec1,
      vec2,
    );
  }

  _dart_atg_addr_out _atg_addr_out;

  void atg_affine_grid_generator(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> theta,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
    int align_corners,
  ) {
    _atg_affine_grid_generator ??= _dylib.lookupFunction<
        _c_atg_affine_grid_generator,
        _dart_atg_affine_grid_generator>('atg_affine_grid_generator');
    return _atg_affine_grid_generator(
      arg0,
      theta,
      size_data,
      size_len,
      align_corners,
    );
  }

  _dart_atg_affine_grid_generator _atg_affine_grid_generator;

  void atg_affine_grid_generator_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
    int align_corners,
  ) {
    _atg_affine_grid_generator_backward ??= _dylib.lookupFunction<
            _c_atg_affine_grid_generator_backward,
            _dart_atg_affine_grid_generator_backward>(
        'atg_affine_grid_generator_backward');
    return _atg_affine_grid_generator_backward(
      arg0,
      grad,
      size_data,
      size_len,
      align_corners,
    );
  }

  _dart_atg_affine_grid_generator_backward _atg_affine_grid_generator_backward;

  void atg_alias(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_alias ??=
        _dylib.lookupFunction<_c_atg_alias, _dart_atg_alias>('atg_alias');
    return _atg_alias(
      arg0,
      self,
    );
  }

  _dart_atg_alias _atg_alias;

  void atg_align_as(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_align_as ??= _dylib
        .lookupFunction<_c_atg_align_as, _dart_atg_align_as>('atg_align_as');
    return _atg_align_as(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_align_as _atg_align_as;

  ffi.Pointer<ffi.Pointer<ffi.Void>> atg_align_tensors(
    ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
    int tensors_len,
  ) {
    _atg_align_tensors ??=
        _dylib.lookupFunction<_c_atg_align_tensors, _dart_atg_align_tensors>(
            'atg_align_tensors');
    return _atg_align_tensors(
      tensors_data,
      tensors_len,
    );
  }

  _dart_atg_align_tensors _atg_align_tensors;

  void atg_all(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_all ??= _dylib.lookupFunction<_c_atg_all, _dart_atg_all>('atg_all');
    return _atg_all(
      arg0,
      self,
    );
  }

  _dart_atg_all _atg_all;

  void atg_all1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int keepdim,
  ) {
    _atg_all1 ??=
        _dylib.lookupFunction<_c_atg_all1, _dart_atg_all1>('atg_all1');
    return _atg_all1(
      arg0,
      self,
      dim,
      keepdim,
    );
  }

  _dart_atg_all1 _atg_all1;

  void atg_all_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int keepdim,
  ) {
    _atg_all_out ??=
        _dylib.lookupFunction<_c_atg_all_out, _dart_atg_all_out>('atg_all_out');
    return _atg_all_out(
      arg0,
      out,
      self,
      dim,
      keepdim,
    );
  }

  _dart_atg_all_out _atg_all_out;

  void atg_alpha_dropout(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    double p,
    int train,
  ) {
    _atg_alpha_dropout ??=
        _dylib.lookupFunction<_c_atg_alpha_dropout, _dart_atg_alpha_dropout>(
            'atg_alpha_dropout');
    return _atg_alpha_dropout(
      arg0,
      input,
      p,
      train,
    );
  }

  _dart_atg_alpha_dropout _atg_alpha_dropout;

  void atg_alpha_dropout_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    double p,
    int train,
  ) {
    _atg_alpha_dropout_ ??=
        _dylib.lookupFunction<_c_atg_alpha_dropout_, _dart_atg_alpha_dropout_>(
            'atg_alpha_dropout_');
    return _atg_alpha_dropout_(
      arg0,
      self,
      p,
      train,
    );
  }

  _dart_atg_alpha_dropout_ _atg_alpha_dropout_;

  void atg_angle(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_angle ??=
        _dylib.lookupFunction<_c_atg_angle, _dart_atg_angle>('atg_angle');
    return _atg_angle(
      arg0,
      self,
    );
  }

  _dart_atg_angle _atg_angle;

  void atg_angle_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_angle_out ??= _dylib
        .lookupFunction<_c_atg_angle_out, _dart_atg_angle_out>('atg_angle_out');
    return _atg_angle_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_angle_out _atg_angle_out;

  void atg_any(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_any ??= _dylib.lookupFunction<_c_atg_any, _dart_atg_any>('atg_any');
    return _atg_any(
      arg0,
      self,
    );
  }

  _dart_atg_any _atg_any;

  void atg_any1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int keepdim,
  ) {
    _atg_any1 ??=
        _dylib.lookupFunction<_c_atg_any1, _dart_atg_any1>('atg_any1');
    return _atg_any1(
      arg0,
      self,
      dim,
      keepdim,
    );
  }

  _dart_atg_any1 _atg_any1;

  void atg_any_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int keepdim,
  ) {
    _atg_any_out ??=
        _dylib.lookupFunction<_c_atg_any_out, _dart_atg_any_out>('atg_any_out');
    return _atg_any_out(
      arg0,
      out,
      self,
      dim,
      keepdim,
    );
  }

  _dart_atg_any_out _atg_any_out;

  void atg_arange(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> end,
    int options_kind,
    int options_device,
  ) {
    _atg_arange ??=
        _dylib.lookupFunction<_c_atg_arange, _dart_atg_arange>('atg_arange');
    return _atg_arange(
      arg0,
      end,
      options_kind,
      options_device,
    );
  }

  _dart_atg_arange _atg_arange;

  void atg_arange1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> start,
    ffi.Pointer<ffi.Void> end,
    int options_kind,
    int options_device,
  ) {
    _atg_arange1 ??=
        _dylib.lookupFunction<_c_atg_arange1, _dart_atg_arange1>('atg_arange1');
    return _atg_arange1(
      arg0,
      start,
      end,
      options_kind,
      options_device,
    );
  }

  _dart_atg_arange1 _atg_arange1;

  void atg_arange2(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> start,
    ffi.Pointer<ffi.Void> end,
    ffi.Pointer<ffi.Void> step,
    int options_kind,
    int options_device,
  ) {
    _atg_arange2 ??=
        _dylib.lookupFunction<_c_atg_arange2, _dart_atg_arange2>('atg_arange2');
    return _atg_arange2(
      arg0,
      start,
      end,
      step,
      options_kind,
      options_device,
    );
  }

  _dart_atg_arange2 _atg_arange2;

  void atg_arange_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> end,
  ) {
    _atg_arange_out ??=
        _dylib.lookupFunction<_c_atg_arange_out, _dart_atg_arange_out>(
            'atg_arange_out');
    return _atg_arange_out(
      arg0,
      out,
      end,
    );
  }

  _dart_atg_arange_out _atg_arange_out;

  void atg_arange_out1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> start,
    ffi.Pointer<ffi.Void> end,
  ) {
    _atg_arange_out1 ??=
        _dylib.lookupFunction<_c_atg_arange_out1, _dart_atg_arange_out1>(
            'atg_arange_out1');
    return _atg_arange_out1(
      arg0,
      out,
      start,
      end,
    );
  }

  _dart_atg_arange_out1 _atg_arange_out1;

  void atg_argmax(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim_v,
    int dim_null,
    int keepdim,
  ) {
    _atg_argmax ??=
        _dylib.lookupFunction<_c_atg_argmax, _dart_atg_argmax>('atg_argmax');
    return _atg_argmax(
      arg0,
      self,
      dim_v,
      dim_null,
      keepdim,
    );
  }

  _dart_atg_argmax _atg_argmax;

  void atg_argmin(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim_v,
    int dim_null,
    int keepdim,
  ) {
    _atg_argmin ??=
        _dylib.lookupFunction<_c_atg_argmin, _dart_atg_argmin>('atg_argmin');
    return _atg_argmin(
      arg0,
      self,
      dim_v,
      dim_null,
      keepdim,
    );
  }

  _dart_atg_argmin _atg_argmin;

  void atg_argsort(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int descending,
  ) {
    _atg_argsort ??=
        _dylib.lookupFunction<_c_atg_argsort, _dart_atg_argsort>('atg_argsort');
    return _atg_argsort(
      arg0,
      self,
      dim,
      descending,
    );
  }

  _dart_atg_argsort _atg_argsort;

  void atg_as_strided(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    int storage_offset_v,
    int storage_offset_null,
  ) {
    _atg_as_strided ??=
        _dylib.lookupFunction<_c_atg_as_strided, _dart_atg_as_strided>(
            'atg_as_strided');
    return _atg_as_strided(
      arg0,
      self,
      size_data,
      size_len,
      stride_data,
      stride_len,
      storage_offset_v,
      storage_offset_null,
    );
  }

  _dart_atg_as_strided _atg_as_strided;

  void atg_as_strided_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    int storage_offset_v,
    int storage_offset_null,
  ) {
    _atg_as_strided_ ??=
        _dylib.lookupFunction<_c_atg_as_strided_, _dart_atg_as_strided_>(
            'atg_as_strided_');
    return _atg_as_strided_(
      arg0,
      self,
      size_data,
      size_len,
      stride_data,
      stride_len,
      storage_offset_v,
      storage_offset_null,
    );
  }

  _dart_atg_as_strided_ _atg_as_strided_;

  void atg_asin(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_asin ??=
        _dylib.lookupFunction<_c_atg_asin, _dart_atg_asin>('atg_asin');
    return _atg_asin(
      arg0,
      self,
    );
  }

  _dart_atg_asin _atg_asin;

  void atg_asin_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_asin_ ??=
        _dylib.lookupFunction<_c_atg_asin_, _dart_atg_asin_>('atg_asin_');
    return _atg_asin_(
      arg0,
      self,
    );
  }

  _dart_atg_asin_ _atg_asin_;

  void atg_asin_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_asin_out ??= _dylib
        .lookupFunction<_c_atg_asin_out, _dart_atg_asin_out>('atg_asin_out');
    return _atg_asin_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_asin_out _atg_asin_out;

  void atg_asinh(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_asinh ??=
        _dylib.lookupFunction<_c_atg_asinh, _dart_atg_asinh>('atg_asinh');
    return _atg_asinh(
      arg0,
      self,
    );
  }

  _dart_atg_asinh _atg_asinh;

  void atg_asinh_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_asinh_ ??=
        _dylib.lookupFunction<_c_atg_asinh_, _dart_atg_asinh_>('atg_asinh_');
    return _atg_asinh_(
      arg0,
      self,
    );
  }

  _dart_atg_asinh_ _atg_asinh_;

  void atg_asinh_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_asinh_out ??= _dylib
        .lookupFunction<_c_atg_asinh_out, _dart_atg_asinh_out>('atg_asinh_out');
    return _atg_asinh_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_asinh_out _atg_asinh_out;

  void atg_atan(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_atan ??=
        _dylib.lookupFunction<_c_atg_atan, _dart_atg_atan>('atg_atan');
    return _atg_atan(
      arg0,
      self,
    );
  }

  _dart_atg_atan _atg_atan;

  void atg_atan2(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_atan2 ??=
        _dylib.lookupFunction<_c_atg_atan2, _dart_atg_atan2>('atg_atan2');
    return _atg_atan2(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_atan2 _atg_atan2;

  void atg_atan2_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_atan2_ ??=
        _dylib.lookupFunction<_c_atg_atan2_, _dart_atg_atan2_>('atg_atan2_');
    return _atg_atan2_(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_atan2_ _atg_atan2_;

  void atg_atan2_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_atan2_out ??= _dylib
        .lookupFunction<_c_atg_atan2_out, _dart_atg_atan2_out>('atg_atan2_out');
    return _atg_atan2_out(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_atan2_out _atg_atan2_out;

  void atg_atan_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_atan_ ??=
        _dylib.lookupFunction<_c_atg_atan_, _dart_atg_atan_>('atg_atan_');
    return _atg_atan_(
      arg0,
      self,
    );
  }

  _dart_atg_atan_ _atg_atan_;

  void atg_atan_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_atan_out ??= _dylib
        .lookupFunction<_c_atg_atan_out, _dart_atg_atan_out>('atg_atan_out');
    return _atg_atan_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_atan_out _atg_atan_out;

  void atg_atanh(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_atanh ??=
        _dylib.lookupFunction<_c_atg_atanh, _dart_atg_atanh>('atg_atanh');
    return _atg_atanh(
      arg0,
      self,
    );
  }

  _dart_atg_atanh _atg_atanh;

  void atg_atanh_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_atanh_ ??=
        _dylib.lookupFunction<_c_atg_atanh_, _dart_atg_atanh_>('atg_atanh_');
    return _atg_atanh_(
      arg0,
      self,
    );
  }

  _dart_atg_atanh_ _atg_atanh_;

  void atg_atanh_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_atanh_out ??= _dylib
        .lookupFunction<_c_atg_atanh_out, _dart_atg_atanh_out>('atg_atanh_out');
    return _atg_atanh_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_atanh_out _atg_atanh_out;

  void atg_avg_pool1d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    int ceil_mode,
    int count_include_pad,
  ) {
    _atg_avg_pool1d ??=
        _dylib.lookupFunction<_c_atg_avg_pool1d, _dart_atg_avg_pool1d>(
            'atg_avg_pool1d');
    return _atg_avg_pool1d(
      arg0,
      self,
      kernel_size_data,
      kernel_size_len,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      ceil_mode,
      count_include_pad,
    );
  }

  _dart_atg_avg_pool1d _atg_avg_pool1d;

  void atg_avg_pool2d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    int ceil_mode,
    int count_include_pad,
    int divisor_override_v,
    int divisor_override_null,
  ) {
    _atg_avg_pool2d ??=
        _dylib.lookupFunction<_c_atg_avg_pool2d, _dart_atg_avg_pool2d>(
            'atg_avg_pool2d');
    return _atg_avg_pool2d(
      arg0,
      self,
      kernel_size_data,
      kernel_size_len,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      ceil_mode,
      count_include_pad,
      divisor_override_v,
      divisor_override_null,
    );
  }

  _dart_atg_avg_pool2d _atg_avg_pool2d;

  void atg_avg_pool2d_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    int ceil_mode,
    int count_include_pad,
    int divisor_override_v,
    int divisor_override_null,
  ) {
    _atg_avg_pool2d_backward ??= _dylib.lookupFunction<
        _c_atg_avg_pool2d_backward,
        _dart_atg_avg_pool2d_backward>('atg_avg_pool2d_backward');
    return _atg_avg_pool2d_backward(
      arg0,
      grad_output,
      self,
      kernel_size_data,
      kernel_size_len,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      ceil_mode,
      count_include_pad,
      divisor_override_v,
      divisor_override_null,
    );
  }

  _dart_atg_avg_pool2d_backward _atg_avg_pool2d_backward;

  void atg_avg_pool2d_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    int ceil_mode,
    int count_include_pad,
    int divisor_override_v,
    int divisor_override_null,
  ) {
    _atg_avg_pool2d_backward_out ??= _dylib.lookupFunction<
        _c_atg_avg_pool2d_backward_out,
        _dart_atg_avg_pool2d_backward_out>('atg_avg_pool2d_backward_out');
    return _atg_avg_pool2d_backward_out(
      arg0,
      grad_input,
      grad_output,
      self,
      kernel_size_data,
      kernel_size_len,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      ceil_mode,
      count_include_pad,
      divisor_override_v,
      divisor_override_null,
    );
  }

  _dart_atg_avg_pool2d_backward_out _atg_avg_pool2d_backward_out;

  void atg_avg_pool2d_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    int ceil_mode,
    int count_include_pad,
    int divisor_override_v,
    int divisor_override_null,
  ) {
    _atg_avg_pool2d_out ??=
        _dylib.lookupFunction<_c_atg_avg_pool2d_out, _dart_atg_avg_pool2d_out>(
            'atg_avg_pool2d_out');
    return _atg_avg_pool2d_out(
      arg0,
      out,
      self,
      kernel_size_data,
      kernel_size_len,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      ceil_mode,
      count_include_pad,
      divisor_override_v,
      divisor_override_null,
    );
  }

  _dart_atg_avg_pool2d_out _atg_avg_pool2d_out;

  void atg_avg_pool3d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    int ceil_mode,
    int count_include_pad,
    int divisor_override_v,
    int divisor_override_null,
  ) {
    _atg_avg_pool3d ??=
        _dylib.lookupFunction<_c_atg_avg_pool3d, _dart_atg_avg_pool3d>(
            'atg_avg_pool3d');
    return _atg_avg_pool3d(
      arg0,
      self,
      kernel_size_data,
      kernel_size_len,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      ceil_mode,
      count_include_pad,
      divisor_override_v,
      divisor_override_null,
    );
  }

  _dart_atg_avg_pool3d _atg_avg_pool3d;

  void atg_avg_pool3d_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    int ceil_mode,
    int count_include_pad,
    int divisor_override_v,
    int divisor_override_null,
  ) {
    _atg_avg_pool3d_backward ??= _dylib.lookupFunction<
        _c_atg_avg_pool3d_backward,
        _dart_atg_avg_pool3d_backward>('atg_avg_pool3d_backward');
    return _atg_avg_pool3d_backward(
      arg0,
      grad_output,
      self,
      kernel_size_data,
      kernel_size_len,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      ceil_mode,
      count_include_pad,
      divisor_override_v,
      divisor_override_null,
    );
  }

  _dart_atg_avg_pool3d_backward _atg_avg_pool3d_backward;

  void atg_avg_pool3d_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    int ceil_mode,
    int count_include_pad,
    int divisor_override_v,
    int divisor_override_null,
  ) {
    _atg_avg_pool3d_backward_out ??= _dylib.lookupFunction<
        _c_atg_avg_pool3d_backward_out,
        _dart_atg_avg_pool3d_backward_out>('atg_avg_pool3d_backward_out');
    return _atg_avg_pool3d_backward_out(
      arg0,
      grad_input,
      grad_output,
      self,
      kernel_size_data,
      kernel_size_len,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      ceil_mode,
      count_include_pad,
      divisor_override_v,
      divisor_override_null,
    );
  }

  _dart_atg_avg_pool3d_backward_out _atg_avg_pool3d_backward_out;

  void atg_avg_pool3d_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    int ceil_mode,
    int count_include_pad,
    int divisor_override_v,
    int divisor_override_null,
  ) {
    _atg_avg_pool3d_out ??=
        _dylib.lookupFunction<_c_atg_avg_pool3d_out, _dart_atg_avg_pool3d_out>(
            'atg_avg_pool3d_out');
    return _atg_avg_pool3d_out(
      arg0,
      out,
      self,
      kernel_size_data,
      kernel_size_len,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      ceil_mode,
      count_include_pad,
      divisor_override_v,
      divisor_override_null,
    );
  }

  _dart_atg_avg_pool3d_out _atg_avg_pool3d_out;

  void atg_baddbmm(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> batch1,
    ffi.Pointer<ffi.Void> batch2,
  ) {
    _atg_baddbmm ??=
        _dylib.lookupFunction<_c_atg_baddbmm, _dart_atg_baddbmm>('atg_baddbmm');
    return _atg_baddbmm(
      arg0,
      self,
      batch1,
      batch2,
    );
  }

  _dart_atg_baddbmm _atg_baddbmm;

  void atg_baddbmm_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> batch1,
    ffi.Pointer<ffi.Void> batch2,
  ) {
    _atg_baddbmm_ ??= _dylib
        .lookupFunction<_c_atg_baddbmm_, _dart_atg_baddbmm_>('atg_baddbmm_');
    return _atg_baddbmm_(
      arg0,
      self,
      batch1,
      batch2,
    );
  }

  _dart_atg_baddbmm_ _atg_baddbmm_;

  void atg_baddbmm_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> batch1,
    ffi.Pointer<ffi.Void> batch2,
  ) {
    _atg_baddbmm_out ??=
        _dylib.lookupFunction<_c_atg_baddbmm_out, _dart_atg_baddbmm_out>(
            'atg_baddbmm_out');
    return _atg_baddbmm_out(
      arg0,
      out,
      self,
      batch1,
      batch2,
    );
  }

  _dart_atg_baddbmm_out _atg_baddbmm_out;

  void atg_bartlett_window(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    int window_length,
    int options_kind,
    int options_device,
  ) {
    _atg_bartlett_window ??= _dylib.lookupFunction<_c_atg_bartlett_window,
        _dart_atg_bartlett_window>('atg_bartlett_window');
    return _atg_bartlett_window(
      arg0,
      window_length,
      options_kind,
      options_device,
    );
  }

  _dart_atg_bartlett_window _atg_bartlett_window;

  void atg_bartlett_window1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    int window_length,
    int periodic,
    int options_kind,
    int options_device,
  ) {
    _atg_bartlett_window1 ??= _dylib.lookupFunction<_c_atg_bartlett_window1,
        _dart_atg_bartlett_window1>('atg_bartlett_window1');
    return _atg_bartlett_window1(
      arg0,
      window_length,
      periodic,
      options_kind,
      options_device,
    );
  }

  _dart_atg_bartlett_window1 _atg_bartlett_window1;

  void atg_batch_norm(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> bias,
    ffi.Pointer<ffi.Void> running_mean,
    ffi.Pointer<ffi.Void> running_var,
    int training,
    double momentum,
    double eps,
    int cudnn_enabled,
  ) {
    _atg_batch_norm ??=
        _dylib.lookupFunction<_c_atg_batch_norm, _dart_atg_batch_norm>(
            'atg_batch_norm');
    return _atg_batch_norm(
      arg0,
      input,
      weight,
      bias,
      running_mean,
      running_var,
      training,
      momentum,
      eps,
      cudnn_enabled,
    );
  }

  _dart_atg_batch_norm _atg_batch_norm;

  void atg_batch_norm_backward_elemt(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_out,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> mean,
    ffi.Pointer<ffi.Void> invstd,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> mean_dy,
    ffi.Pointer<ffi.Void> mean_dy_xmu,
  ) {
    _atg_batch_norm_backward_elemt ??= _dylib.lookupFunction<
        _c_atg_batch_norm_backward_elemt,
        _dart_atg_batch_norm_backward_elemt>('atg_batch_norm_backward_elemt');
    return _atg_batch_norm_backward_elemt(
      arg0,
      grad_out,
      input,
      mean,
      invstd,
      weight,
      mean_dy,
      mean_dy_xmu,
    );
  }

  _dart_atg_batch_norm_backward_elemt _atg_batch_norm_backward_elemt;

  void atg_batch_norm_backward_reduce(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_out,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> mean,
    ffi.Pointer<ffi.Void> invstd,
    ffi.Pointer<ffi.Void> weight,
    int input_g,
    int weight_g,
    int bias_g,
  ) {
    _atg_batch_norm_backward_reduce ??= _dylib.lookupFunction<
        _c_atg_batch_norm_backward_reduce,
        _dart_atg_batch_norm_backward_reduce>('atg_batch_norm_backward_reduce');
    return _atg_batch_norm_backward_reduce(
      arg0,
      grad_out,
      input,
      mean,
      invstd,
      weight,
      input_g,
      weight_g,
      bias_g,
    );
  }

  _dart_atg_batch_norm_backward_reduce _atg_batch_norm_backward_reduce;

  void atg_batch_norm_elemt(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> bias,
    ffi.Pointer<ffi.Void> mean,
    ffi.Pointer<ffi.Void> invstd,
    double eps,
  ) {
    _atg_batch_norm_elemt ??= _dylib.lookupFunction<_c_atg_batch_norm_elemt,
        _dart_atg_batch_norm_elemt>('atg_batch_norm_elemt');
    return _atg_batch_norm_elemt(
      arg0,
      input,
      weight,
      bias,
      mean,
      invstd,
      eps,
    );
  }

  _dart_atg_batch_norm_elemt _atg_batch_norm_elemt;

  void atg_batch_norm_elemt_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> bias,
    ffi.Pointer<ffi.Void> mean,
    ffi.Pointer<ffi.Void> invstd,
    double eps,
  ) {
    _atg_batch_norm_elemt_out ??= _dylib.lookupFunction<
        _c_atg_batch_norm_elemt_out,
        _dart_atg_batch_norm_elemt_out>('atg_batch_norm_elemt_out');
    return _atg_batch_norm_elemt_out(
      arg0,
      out,
      input,
      weight,
      bias,
      mean,
      invstd,
      eps,
    );
  }

  _dart_atg_batch_norm_elemt_out _atg_batch_norm_elemt_out;

  void atg_batch_norm_gather_stats(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> mean,
    ffi.Pointer<ffi.Void> invstd,
    ffi.Pointer<ffi.Void> running_mean,
    ffi.Pointer<ffi.Void> running_var,
    double momentum,
    double eps,
    int count,
  ) {
    _atg_batch_norm_gather_stats ??= _dylib.lookupFunction<
        _c_atg_batch_norm_gather_stats,
        _dart_atg_batch_norm_gather_stats>('atg_batch_norm_gather_stats');
    return _atg_batch_norm_gather_stats(
      arg0,
      input,
      mean,
      invstd,
      running_mean,
      running_var,
      momentum,
      eps,
      count,
    );
  }

  _dart_atg_batch_norm_gather_stats _atg_batch_norm_gather_stats;

  void atg_batch_norm_gather_stats_with_counts(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> mean,
    ffi.Pointer<ffi.Void> invstd,
    ffi.Pointer<ffi.Void> running_mean,
    ffi.Pointer<ffi.Void> running_var,
    double momentum,
    double eps,
    ffi.Pointer<ffi.Void> counts,
  ) {
    _atg_batch_norm_gather_stats_with_counts ??= _dylib.lookupFunction<
            _c_atg_batch_norm_gather_stats_with_counts,
            _dart_atg_batch_norm_gather_stats_with_counts>(
        'atg_batch_norm_gather_stats_with_counts');
    return _atg_batch_norm_gather_stats_with_counts(
      arg0,
      input,
      mean,
      invstd,
      running_mean,
      running_var,
      momentum,
      eps,
      counts,
    );
  }

  _dart_atg_batch_norm_gather_stats_with_counts
      _atg_batch_norm_gather_stats_with_counts;

  void atg_batch_norm_stats(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    double eps,
  ) {
    _atg_batch_norm_stats ??= _dylib.lookupFunction<_c_atg_batch_norm_stats,
        _dart_atg_batch_norm_stats>('atg_batch_norm_stats');
    return _atg_batch_norm_stats(
      arg0,
      input,
      eps,
    );
  }

  _dart_atg_batch_norm_stats _atg_batch_norm_stats;

  void atg_batch_norm_update_stats(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> running_mean,
    ffi.Pointer<ffi.Void> running_var,
    double momentum,
  ) {
    _atg_batch_norm_update_stats ??= _dylib.lookupFunction<
        _c_atg_batch_norm_update_stats,
        _dart_atg_batch_norm_update_stats>('atg_batch_norm_update_stats');
    return _atg_batch_norm_update_stats(
      arg0,
      input,
      running_mean,
      running_var,
      momentum,
    );
  }

  _dart_atg_batch_norm_update_stats _atg_batch_norm_update_stats;

  void atg_bernoulli(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_bernoulli ??= _dylib
        .lookupFunction<_c_atg_bernoulli, _dart_atg_bernoulli>('atg_bernoulli');
    return _atg_bernoulli(
      arg0,
      self,
    );
  }

  _dart_atg_bernoulli _atg_bernoulli;

  void atg_bernoulli1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    double p,
  ) {
    _atg_bernoulli1 ??=
        _dylib.lookupFunction<_c_atg_bernoulli1, _dart_atg_bernoulli1>(
            'atg_bernoulli1');
    return _atg_bernoulli1(
      arg0,
      self,
      p,
    );
  }

  _dart_atg_bernoulli1 _atg_bernoulli1;

  void atg_bernoulli_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> p,
  ) {
    _atg_bernoulli_ ??=
        _dylib.lookupFunction<_c_atg_bernoulli_, _dart_atg_bernoulli_>(
            'atg_bernoulli_');
    return _atg_bernoulli_(
      arg0,
      self,
      p,
    );
  }

  _dart_atg_bernoulli_ _atg_bernoulli_;

  void atg_bernoulli_1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    double p,
  ) {
    _atg_bernoulli_1 ??=
        _dylib.lookupFunction<_c_atg_bernoulli_1, _dart_atg_bernoulli_1>(
            'atg_bernoulli_1');
    return _atg_bernoulli_1(
      arg0,
      self,
      p,
    );
  }

  _dart_atg_bernoulli_1 _atg_bernoulli_1;

  void atg_bernoulli_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_bernoulli_out ??=
        _dylib.lookupFunction<_c_atg_bernoulli_out, _dart_atg_bernoulli_out>(
            'atg_bernoulli_out');
    return _atg_bernoulli_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_bernoulli_out _atg_bernoulli_out;

  void atg_bilinear(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input1,
    ffi.Pointer<ffi.Void> input2,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> bias,
  ) {
    _atg_bilinear ??= _dylib
        .lookupFunction<_c_atg_bilinear, _dart_atg_bilinear>('atg_bilinear');
    return _atg_bilinear(
      arg0,
      input1,
      input2,
      weight,
      bias,
    );
  }

  _dart_atg_bilinear _atg_bilinear;

  void atg_binary_cross_entropy(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    ffi.Pointer<ffi.Void> weight,
    int reduction,
  ) {
    _atg_binary_cross_entropy ??= _dylib.lookupFunction<
        _c_atg_binary_cross_entropy,
        _dart_atg_binary_cross_entropy>('atg_binary_cross_entropy');
    return _atg_binary_cross_entropy(
      arg0,
      self,
      target,
      weight,
      reduction,
    );
  }

  _dart_atg_binary_cross_entropy _atg_binary_cross_entropy;

  void atg_binary_cross_entropy_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    ffi.Pointer<ffi.Void> weight,
    int reduction,
  ) {
    _atg_binary_cross_entropy_backward ??= _dylib.lookupFunction<
            _c_atg_binary_cross_entropy_backward,
            _dart_atg_binary_cross_entropy_backward>(
        'atg_binary_cross_entropy_backward');
    return _atg_binary_cross_entropy_backward(
      arg0,
      grad_output,
      self,
      target,
      weight,
      reduction,
    );
  }

  _dart_atg_binary_cross_entropy_backward _atg_binary_cross_entropy_backward;

  void atg_binary_cross_entropy_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    ffi.Pointer<ffi.Void> weight,
    int reduction,
  ) {
    _atg_binary_cross_entropy_backward_out ??= _dylib.lookupFunction<
            _c_atg_binary_cross_entropy_backward_out,
            _dart_atg_binary_cross_entropy_backward_out>(
        'atg_binary_cross_entropy_backward_out');
    return _atg_binary_cross_entropy_backward_out(
      arg0,
      grad_input,
      grad_output,
      self,
      target,
      weight,
      reduction,
    );
  }

  _dart_atg_binary_cross_entropy_backward_out
      _atg_binary_cross_entropy_backward_out;

  void atg_binary_cross_entropy_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    ffi.Pointer<ffi.Void> weight,
    int reduction,
  ) {
    _atg_binary_cross_entropy_out ??= _dylib.lookupFunction<
        _c_atg_binary_cross_entropy_out,
        _dart_atg_binary_cross_entropy_out>('atg_binary_cross_entropy_out');
    return _atg_binary_cross_entropy_out(
      arg0,
      out,
      self,
      target,
      weight,
      reduction,
    );
  }

  _dart_atg_binary_cross_entropy_out _atg_binary_cross_entropy_out;

  void atg_binary_cross_entropy_with_logits(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> pos_weight,
    int reduction,
  ) {
    _atg_binary_cross_entropy_with_logits ??= _dylib.lookupFunction<
            _c_atg_binary_cross_entropy_with_logits,
            _dart_atg_binary_cross_entropy_with_logits>(
        'atg_binary_cross_entropy_with_logits');
    return _atg_binary_cross_entropy_with_logits(
      arg0,
      self,
      target,
      weight,
      pos_weight,
      reduction,
    );
  }

  _dart_atg_binary_cross_entropy_with_logits
      _atg_binary_cross_entropy_with_logits;

  void atg_binary_cross_entropy_with_logits_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> pos_weight,
    int reduction,
  ) {
    _atg_binary_cross_entropy_with_logits_backward ??= _dylib.lookupFunction<
            _c_atg_binary_cross_entropy_with_logits_backward,
            _dart_atg_binary_cross_entropy_with_logits_backward>(
        'atg_binary_cross_entropy_with_logits_backward');
    return _atg_binary_cross_entropy_with_logits_backward(
      arg0,
      grad_output,
      self,
      target,
      weight,
      pos_weight,
      reduction,
    );
  }

  _dart_atg_binary_cross_entropy_with_logits_backward
      _atg_binary_cross_entropy_with_logits_backward;

  void atg_bincount(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> weights,
    int minlength,
  ) {
    _atg_bincount ??= _dylib
        .lookupFunction<_c_atg_bincount, _dart_atg_bincount>('atg_bincount');
    return _atg_bincount(
      arg0,
      self,
      weights,
      minlength,
    );
  }

  _dart_atg_bincount _atg_bincount;

  void atg_binomial(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> count,
    ffi.Pointer<ffi.Void> prob,
  ) {
    _atg_binomial ??= _dylib
        .lookupFunction<_c_atg_binomial, _dart_atg_binomial>('atg_binomial');
    return _atg_binomial(
      arg0,
      count,
      prob,
    );
  }

  _dart_atg_binomial _atg_binomial;

  void atg_bitwise_and(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_bitwise_and ??=
        _dylib.lookupFunction<_c_atg_bitwise_and, _dart_atg_bitwise_and>(
            'atg_bitwise_and');
    return _atg_bitwise_and(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_bitwise_and _atg_bitwise_and;

  void atg_bitwise_and1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_bitwise_and1 ??=
        _dylib.lookupFunction<_c_atg_bitwise_and1, _dart_atg_bitwise_and1>(
            'atg_bitwise_and1');
    return _atg_bitwise_and1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_bitwise_and1 _atg_bitwise_and1;

  void atg_bitwise_and_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_bitwise_and_ ??=
        _dylib.lookupFunction<_c_atg_bitwise_and_, _dart_atg_bitwise_and_>(
            'atg_bitwise_and_');
    return _atg_bitwise_and_(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_bitwise_and_ _atg_bitwise_and_;

  void atg_bitwise_and_1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_bitwise_and_1 ??=
        _dylib.lookupFunction<_c_atg_bitwise_and_1, _dart_atg_bitwise_and_1>(
            'atg_bitwise_and_1');
    return _atg_bitwise_and_1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_bitwise_and_1 _atg_bitwise_and_1;

  void atg_bitwise_and_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_bitwise_and_out ??= _dylib.lookupFunction<_c_atg_bitwise_and_out,
        _dart_atg_bitwise_and_out>('atg_bitwise_and_out');
    return _atg_bitwise_and_out(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_bitwise_and_out _atg_bitwise_and_out;

  void atg_bitwise_and_out1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_bitwise_and_out1 ??= _dylib.lookupFunction<_c_atg_bitwise_and_out1,
        _dart_atg_bitwise_and_out1>('atg_bitwise_and_out1');
    return _atg_bitwise_and_out1(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_bitwise_and_out1 _atg_bitwise_and_out1;

  void atg_bitwise_not(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_bitwise_not ??=
        _dylib.lookupFunction<_c_atg_bitwise_not, _dart_atg_bitwise_not>(
            'atg_bitwise_not');
    return _atg_bitwise_not(
      arg0,
      self,
    );
  }

  _dart_atg_bitwise_not _atg_bitwise_not;

  void atg_bitwise_not_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_bitwise_not_ ??=
        _dylib.lookupFunction<_c_atg_bitwise_not_, _dart_atg_bitwise_not_>(
            'atg_bitwise_not_');
    return _atg_bitwise_not_(
      arg0,
      self,
    );
  }

  _dart_atg_bitwise_not_ _atg_bitwise_not_;

  void atg_bitwise_not_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_bitwise_not_out ??= _dylib.lookupFunction<_c_atg_bitwise_not_out,
        _dart_atg_bitwise_not_out>('atg_bitwise_not_out');
    return _atg_bitwise_not_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_bitwise_not_out _atg_bitwise_not_out;

  void atg_bitwise_or(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_bitwise_or ??=
        _dylib.lookupFunction<_c_atg_bitwise_or, _dart_atg_bitwise_or>(
            'atg_bitwise_or');
    return _atg_bitwise_or(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_bitwise_or _atg_bitwise_or;

  void atg_bitwise_or1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_bitwise_or1 ??=
        _dylib.lookupFunction<_c_atg_bitwise_or1, _dart_atg_bitwise_or1>(
            'atg_bitwise_or1');
    return _atg_bitwise_or1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_bitwise_or1 _atg_bitwise_or1;

  void atg_bitwise_or_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_bitwise_or_ ??=
        _dylib.lookupFunction<_c_atg_bitwise_or_, _dart_atg_bitwise_or_>(
            'atg_bitwise_or_');
    return _atg_bitwise_or_(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_bitwise_or_ _atg_bitwise_or_;

  void atg_bitwise_or_1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_bitwise_or_1 ??=
        _dylib.lookupFunction<_c_atg_bitwise_or_1, _dart_atg_bitwise_or_1>(
            'atg_bitwise_or_1');
    return _atg_bitwise_or_1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_bitwise_or_1 _atg_bitwise_or_1;

  void atg_bitwise_or_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_bitwise_or_out ??=
        _dylib.lookupFunction<_c_atg_bitwise_or_out, _dart_atg_bitwise_or_out>(
            'atg_bitwise_or_out');
    return _atg_bitwise_or_out(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_bitwise_or_out _atg_bitwise_or_out;

  void atg_bitwise_or_out1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_bitwise_or_out1 ??= _dylib.lookupFunction<_c_atg_bitwise_or_out1,
        _dart_atg_bitwise_or_out1>('atg_bitwise_or_out1');
    return _atg_bitwise_or_out1(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_bitwise_or_out1 _atg_bitwise_or_out1;

  void atg_bitwise_xor(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_bitwise_xor ??=
        _dylib.lookupFunction<_c_atg_bitwise_xor, _dart_atg_bitwise_xor>(
            'atg_bitwise_xor');
    return _atg_bitwise_xor(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_bitwise_xor _atg_bitwise_xor;

  void atg_bitwise_xor1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_bitwise_xor1 ??=
        _dylib.lookupFunction<_c_atg_bitwise_xor1, _dart_atg_bitwise_xor1>(
            'atg_bitwise_xor1');
    return _atg_bitwise_xor1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_bitwise_xor1 _atg_bitwise_xor1;

  void atg_bitwise_xor_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_bitwise_xor_ ??=
        _dylib.lookupFunction<_c_atg_bitwise_xor_, _dart_atg_bitwise_xor_>(
            'atg_bitwise_xor_');
    return _atg_bitwise_xor_(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_bitwise_xor_ _atg_bitwise_xor_;

  void atg_bitwise_xor_1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_bitwise_xor_1 ??=
        _dylib.lookupFunction<_c_atg_bitwise_xor_1, _dart_atg_bitwise_xor_1>(
            'atg_bitwise_xor_1');
    return _atg_bitwise_xor_1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_bitwise_xor_1 _atg_bitwise_xor_1;

  void atg_bitwise_xor_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_bitwise_xor_out ??= _dylib.lookupFunction<_c_atg_bitwise_xor_out,
        _dart_atg_bitwise_xor_out>('atg_bitwise_xor_out');
    return _atg_bitwise_xor_out(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_bitwise_xor_out _atg_bitwise_xor_out;

  void atg_bitwise_xor_out1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_bitwise_xor_out1 ??= _dylib.lookupFunction<_c_atg_bitwise_xor_out1,
        _dart_atg_bitwise_xor_out1>('atg_bitwise_xor_out1');
    return _atg_bitwise_xor_out1(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_bitwise_xor_out1 _atg_bitwise_xor_out1;

  void atg_blackman_window(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    int window_length,
    int options_kind,
    int options_device,
  ) {
    _atg_blackman_window ??= _dylib.lookupFunction<_c_atg_blackman_window,
        _dart_atg_blackman_window>('atg_blackman_window');
    return _atg_blackman_window(
      arg0,
      window_length,
      options_kind,
      options_device,
    );
  }

  _dart_atg_blackman_window _atg_blackman_window;

  void atg_blackman_window1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    int window_length,
    int periodic,
    int options_kind,
    int options_device,
  ) {
    _atg_blackman_window1 ??= _dylib.lookupFunction<_c_atg_blackman_window1,
        _dart_atg_blackman_window1>('atg_blackman_window1');
    return _atg_blackman_window1(
      arg0,
      window_length,
      periodic,
      options_kind,
      options_device,
    );
  }

  _dart_atg_blackman_window1 _atg_blackman_window1;

  void atg_block_diag(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
    int tensors_len,
  ) {
    _atg_block_diag ??=
        _dylib.lookupFunction<_c_atg_block_diag, _dart_atg_block_diag>(
            'atg_block_diag');
    return _atg_block_diag(
      arg0,
      tensors_data,
      tensors_len,
    );
  }

  _dart_atg_block_diag _atg_block_diag;

  void atg_bmm(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> mat2,
  ) {
    _atg_bmm ??= _dylib.lookupFunction<_c_atg_bmm, _dart_atg_bmm>('atg_bmm');
    return _atg_bmm(
      arg0,
      self,
      mat2,
    );
  }

  _dart_atg_bmm _atg_bmm;

  void atg_bmm_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> mat2,
  ) {
    _atg_bmm_out ??=
        _dylib.lookupFunction<_c_atg_bmm_out, _dart_atg_bmm_out>('atg_bmm_out');
    return _atg_bmm_out(
      arg0,
      out,
      self,
      mat2,
    );
  }

  _dart_atg_bmm_out _atg_bmm_out;

  ffi.Pointer<ffi.Pointer<ffi.Void>> atg_broadcast_tensors(
    ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
    int tensors_len,
  ) {
    _atg_broadcast_tensors ??= _dylib.lookupFunction<_c_atg_broadcast_tensors,
        _dart_atg_broadcast_tensors>('atg_broadcast_tensors');
    return _atg_broadcast_tensors(
      tensors_data,
      tensors_len,
    );
  }

  _dart_atg_broadcast_tensors _atg_broadcast_tensors;

  void atg_bucketize(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> boundaries,
    int out_int32,
    int right,
  ) {
    _atg_bucketize ??= _dylib
        .lookupFunction<_c_atg_bucketize, _dart_atg_bucketize>('atg_bucketize');
    return _atg_bucketize(
      arg0,
      self,
      boundaries,
      out_int32,
      right,
    );
  }

  _dart_atg_bucketize _atg_bucketize;

  void atg_bucketize1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self_scalar,
    ffi.Pointer<ffi.Void> boundaries,
    int out_int32,
    int right,
  ) {
    _atg_bucketize1 ??=
        _dylib.lookupFunction<_c_atg_bucketize1, _dart_atg_bucketize1>(
            'atg_bucketize1');
    return _atg_bucketize1(
      arg0,
      self_scalar,
      boundaries,
      out_int32,
      right,
    );
  }

  _dart_atg_bucketize1 _atg_bucketize1;

  void atg_bucketize_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> boundaries,
    int out_int32,
    int right,
  ) {
    _atg_bucketize_out ??=
        _dylib.lookupFunction<_c_atg_bucketize_out, _dart_atg_bucketize_out>(
            'atg_bucketize_out');
    return _atg_bucketize_out(
      arg0,
      out,
      self,
      boundaries,
      out_int32,
      right,
    );
  }

  _dart_atg_bucketize_out _atg_bucketize_out;

  void atg_cartesian_prod(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
    int tensors_len,
  ) {
    _atg_cartesian_prod ??=
        _dylib.lookupFunction<_c_atg_cartesian_prod, _dart_atg_cartesian_prod>(
            'atg_cartesian_prod');
    return _atg_cartesian_prod(
      arg0,
      tensors_data,
      tensors_len,
    );
  }

  _dart_atg_cartesian_prod _atg_cartesian_prod;

  void atg_cat(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
    int tensors_len,
    int dim,
  ) {
    _atg_cat ??= _dylib.lookupFunction<_c_atg_cat, _dart_atg_cat>('atg_cat');
    return _atg_cat(
      arg0,
      tensors_data,
      tensors_len,
      dim,
    );
  }

  _dart_atg_cat _atg_cat;

  void atg_cat_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
    int tensors_len,
    int dim,
  ) {
    _atg_cat_out ??=
        _dylib.lookupFunction<_c_atg_cat_out, _dart_atg_cat_out>('atg_cat_out');
    return _atg_cat_out(
      arg0,
      out,
      tensors_data,
      tensors_len,
      dim,
    );
  }

  _dart_atg_cat_out _atg_cat_out;

  void atg_cauchy_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    double median,
    double sigma,
  ) {
    _atg_cauchy_ ??=
        _dylib.lookupFunction<_c_atg_cauchy_, _dart_atg_cauchy_>('atg_cauchy_');
    return _atg_cauchy_(
      arg0,
      self,
      median,
      sigma,
    );
  }

  _dart_atg_cauchy_ _atg_cauchy_;

  void atg_cdist(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> x1,
    ffi.Pointer<ffi.Void> x2,
    double p,
    int compute_mode_v,
    int compute_mode_null,
  ) {
    _atg_cdist ??=
        _dylib.lookupFunction<_c_atg_cdist, _dart_atg_cdist>('atg_cdist');
    return _atg_cdist(
      arg0,
      x1,
      x2,
      p,
      compute_mode_v,
      compute_mode_null,
    );
  }

  _dart_atg_cdist _atg_cdist;

  void atg_ceil(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_ceil ??=
        _dylib.lookupFunction<_c_atg_ceil, _dart_atg_ceil>('atg_ceil');
    return _atg_ceil(
      arg0,
      self,
    );
  }

  _dart_atg_ceil _atg_ceil;

  void atg_ceil_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_ceil_ ??=
        _dylib.lookupFunction<_c_atg_ceil_, _dart_atg_ceil_>('atg_ceil_');
    return _atg_ceil_(
      arg0,
      self,
    );
  }

  _dart_atg_ceil_ _atg_ceil_;

  void atg_ceil_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_ceil_out ??= _dylib
        .lookupFunction<_c_atg_ceil_out, _dart_atg_ceil_out>('atg_ceil_out');
    return _atg_ceil_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_ceil_out _atg_ceil_out;

  void atg_celu(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_celu ??=
        _dylib.lookupFunction<_c_atg_celu, _dart_atg_celu>('atg_celu');
    return _atg_celu(
      arg0,
      self,
    );
  }

  _dart_atg_celu _atg_celu;

  void atg_celu_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_celu_ ??=
        _dylib.lookupFunction<_c_atg_celu_, _dart_atg_celu_>('atg_celu_');
    return _atg_celu_(
      arg0,
      self,
    );
  }

  _dart_atg_celu_ _atg_celu_;

  void atg_chain_matmul(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Void>> matrices_data,
    int matrices_len,
  ) {
    _atg_chain_matmul ??=
        _dylib.lookupFunction<_c_atg_chain_matmul, _dart_atg_chain_matmul>(
            'atg_chain_matmul');
    return _atg_chain_matmul(
      arg0,
      matrices_data,
      matrices_len,
    );
  }

  _dart_atg_chain_matmul _atg_chain_matmul;

  void atg_channel_shuffle(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int groups,
  ) {
    _atg_channel_shuffle ??= _dylib.lookupFunction<_c_atg_channel_shuffle,
        _dart_atg_channel_shuffle>('atg_channel_shuffle');
    return _atg_channel_shuffle(
      arg0,
      self,
      groups,
    );
  }

  _dart_atg_channel_shuffle _atg_channel_shuffle;

  void atg_cholesky(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int upper,
  ) {
    _atg_cholesky ??= _dylib
        .lookupFunction<_c_atg_cholesky, _dart_atg_cholesky>('atg_cholesky');
    return _atg_cholesky(
      arg0,
      self,
      upper,
    );
  }

  _dart_atg_cholesky _atg_cholesky;

  void atg_cholesky_inverse(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int upper,
  ) {
    _atg_cholesky_inverse ??= _dylib.lookupFunction<_c_atg_cholesky_inverse,
        _dart_atg_cholesky_inverse>('atg_cholesky_inverse');
    return _atg_cholesky_inverse(
      arg0,
      self,
      upper,
    );
  }

  _dart_atg_cholesky_inverse _atg_cholesky_inverse;

  void atg_cholesky_inverse_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    int upper,
  ) {
    _atg_cholesky_inverse_out ??= _dylib.lookupFunction<
        _c_atg_cholesky_inverse_out,
        _dart_atg_cholesky_inverse_out>('atg_cholesky_inverse_out');
    return _atg_cholesky_inverse_out(
      arg0,
      out,
      self,
      upper,
    );
  }

  _dart_atg_cholesky_inverse_out _atg_cholesky_inverse_out;

  void atg_cholesky_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    int upper,
  ) {
    _atg_cholesky_out ??=
        _dylib.lookupFunction<_c_atg_cholesky_out, _dart_atg_cholesky_out>(
            'atg_cholesky_out');
    return _atg_cholesky_out(
      arg0,
      out,
      self,
      upper,
    );
  }

  _dart_atg_cholesky_out _atg_cholesky_out;

  void atg_cholesky_solve(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> input2,
    int upper,
  ) {
    _atg_cholesky_solve ??=
        _dylib.lookupFunction<_c_atg_cholesky_solve, _dart_atg_cholesky_solve>(
            'atg_cholesky_solve');
    return _atg_cholesky_solve(
      arg0,
      self,
      input2,
      upper,
    );
  }

  _dart_atg_cholesky_solve _atg_cholesky_solve;

  void atg_cholesky_solve_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> input2,
    int upper,
  ) {
    _atg_cholesky_solve_out ??= _dylib.lookupFunction<_c_atg_cholesky_solve_out,
        _dart_atg_cholesky_solve_out>('atg_cholesky_solve_out');
    return _atg_cholesky_solve_out(
      arg0,
      out,
      self,
      input2,
      upper,
    );
  }

  _dart_atg_cholesky_solve_out _atg_cholesky_solve_out;

  ffi.Pointer<ffi.Pointer<ffi.Void>> atg_chunk(
    ffi.Pointer<ffi.Void> self,
    int chunks,
    int dim,
  ) {
    _atg_chunk ??=
        _dylib.lookupFunction<_c_atg_chunk, _dart_atg_chunk>('atg_chunk');
    return _atg_chunk(
      self,
      chunks,
      dim,
    );
  }

  _dart_atg_chunk _atg_chunk;

  void atg_clamp(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> min,
    ffi.Pointer<ffi.Void> max,
  ) {
    _atg_clamp ??=
        _dylib.lookupFunction<_c_atg_clamp, _dart_atg_clamp>('atg_clamp');
    return _atg_clamp(
      arg0,
      self,
      min,
      max,
    );
  }

  _dart_atg_clamp _atg_clamp;

  void atg_clamp_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> min,
    ffi.Pointer<ffi.Void> max,
  ) {
    _atg_clamp_ ??=
        _dylib.lookupFunction<_c_atg_clamp_, _dart_atg_clamp_>('atg_clamp_');
    return _atg_clamp_(
      arg0,
      self,
      min,
      max,
    );
  }

  _dart_atg_clamp_ _atg_clamp_;

  void atg_clamp_max(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> max,
  ) {
    _atg_clamp_max ??= _dylib
        .lookupFunction<_c_atg_clamp_max, _dart_atg_clamp_max>('atg_clamp_max');
    return _atg_clamp_max(
      arg0,
      self,
      max,
    );
  }

  _dart_atg_clamp_max _atg_clamp_max;

  void atg_clamp_max_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> max,
  ) {
    _atg_clamp_max_ ??=
        _dylib.lookupFunction<_c_atg_clamp_max_, _dart_atg_clamp_max_>(
            'atg_clamp_max_');
    return _atg_clamp_max_(
      arg0,
      self,
      max,
    );
  }

  _dart_atg_clamp_max_ _atg_clamp_max_;

  void atg_clamp_max_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> max,
  ) {
    _atg_clamp_max_out ??=
        _dylib.lookupFunction<_c_atg_clamp_max_out, _dart_atg_clamp_max_out>(
            'atg_clamp_max_out');
    return _atg_clamp_max_out(
      arg0,
      out,
      self,
      max,
    );
  }

  _dart_atg_clamp_max_out _atg_clamp_max_out;

  void atg_clamp_min(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> min,
  ) {
    _atg_clamp_min ??= _dylib
        .lookupFunction<_c_atg_clamp_min, _dart_atg_clamp_min>('atg_clamp_min');
    return _atg_clamp_min(
      arg0,
      self,
      min,
    );
  }

  _dart_atg_clamp_min _atg_clamp_min;

  void atg_clamp_min_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> min,
  ) {
    _atg_clamp_min_ ??=
        _dylib.lookupFunction<_c_atg_clamp_min_, _dart_atg_clamp_min_>(
            'atg_clamp_min_');
    return _atg_clamp_min_(
      arg0,
      self,
      min,
    );
  }

  _dart_atg_clamp_min_ _atg_clamp_min_;

  void atg_clamp_min_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> min,
  ) {
    _atg_clamp_min_out ??=
        _dylib.lookupFunction<_c_atg_clamp_min_out, _dart_atg_clamp_min_out>(
            'atg_clamp_min_out');
    return _atg_clamp_min_out(
      arg0,
      out,
      self,
      min,
    );
  }

  _dart_atg_clamp_min_out _atg_clamp_min_out;

  void atg_clamp_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> min,
    ffi.Pointer<ffi.Void> max,
  ) {
    _atg_clamp_out ??= _dylib
        .lookupFunction<_c_atg_clamp_out, _dart_atg_clamp_out>('atg_clamp_out');
    return _atg_clamp_out(
      arg0,
      out,
      self,
      min,
      max,
    );
  }

  _dart_atg_clamp_out _atg_clamp_out;

  void atg_coalesce(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_coalesce ??= _dylib
        .lookupFunction<_c_atg_coalesce, _dart_atg_coalesce>('atg_coalesce');
    return _atg_coalesce(
      arg0,
      self,
    );
  }

  _dart_atg_coalesce _atg_coalesce;

  void atg_col2im(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
  ) {
    _atg_col2im ??=
        _dylib.lookupFunction<_c_atg_col2im, _dart_atg_col2im>('atg_col2im');
    return _atg_col2im(
      arg0,
      self,
      output_size_data,
      output_size_len,
      kernel_size_data,
      kernel_size_len,
      dilation_data,
      dilation_len,
      padding_data,
      padding_len,
      stride_data,
      stride_len,
    );
  }

  _dart_atg_col2im _atg_col2im;

  void atg_col2im_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
  ) {
    _atg_col2im_backward ??= _dylib.lookupFunction<_c_atg_col2im_backward,
        _dart_atg_col2im_backward>('atg_col2im_backward');
    return _atg_col2im_backward(
      arg0,
      grad_output,
      kernel_size_data,
      kernel_size_len,
      dilation_data,
      dilation_len,
      padding_data,
      padding_len,
      stride_data,
      stride_len,
    );
  }

  _dart_atg_col2im_backward _atg_col2im_backward;

  void atg_col2im_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
  ) {
    _atg_col2im_backward_out ??= _dylib.lookupFunction<
        _c_atg_col2im_backward_out,
        _dart_atg_col2im_backward_out>('atg_col2im_backward_out');
    return _atg_col2im_backward_out(
      arg0,
      grad_input,
      grad_output,
      kernel_size_data,
      kernel_size_len,
      dilation_data,
      dilation_len,
      padding_data,
      padding_len,
      stride_data,
      stride_len,
    );
  }

  _dart_atg_col2im_backward_out _atg_col2im_backward_out;

  void atg_col2im_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
  ) {
    _atg_col2im_out ??=
        _dylib.lookupFunction<_c_atg_col2im_out, _dart_atg_col2im_out>(
            'atg_col2im_out');
    return _atg_col2im_out(
      arg0,
      out,
      self,
      output_size_data,
      output_size_len,
      kernel_size_data,
      kernel_size_len,
      dilation_data,
      dilation_len,
      padding_data,
      padding_len,
      stride_data,
      stride_len,
    );
  }

  _dart_atg_col2im_out _atg_col2im_out;

  void atg_combinations(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int r,
    int with_replacement,
  ) {
    _atg_combinations ??=
        _dylib.lookupFunction<_c_atg_combinations, _dart_atg_combinations>(
            'atg_combinations');
    return _atg_combinations(
      arg0,
      self,
      r,
      with_replacement,
    );
  }

  _dart_atg_combinations _atg_combinations;

  void atg_conj(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_conj ??=
        _dylib.lookupFunction<_c_atg_conj, _dart_atg_conj>('atg_conj');
    return _atg_conj(
      arg0,
      self,
    );
  }

  _dart_atg_conj _atg_conj;

  void atg_conj_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_conj_out ??= _dylib
        .lookupFunction<_c_atg_conj_out, _dart_atg_conj_out>('atg_conj_out');
    return _atg_conj_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_conj_out _atg_conj_out;

  void atg_constant_pad_nd(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> pad_data,
    int pad_len,
  ) {
    _atg_constant_pad_nd ??= _dylib.lookupFunction<_c_atg_constant_pad_nd,
        _dart_atg_constant_pad_nd>('atg_constant_pad_nd');
    return _atg_constant_pad_nd(
      arg0,
      self,
      pad_data,
      pad_len,
    );
  }

  _dart_atg_constant_pad_nd _atg_constant_pad_nd;

  void atg_contiguous(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_contiguous ??=
        _dylib.lookupFunction<_c_atg_contiguous, _dart_atg_contiguous>(
            'atg_contiguous');
    return _atg_contiguous(
      arg0,
      self,
    );
  }

  _dart_atg_contiguous _atg_contiguous;

  void atg_conv1d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> bias,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int groups,
  ) {
    _atg_conv1d ??=
        _dylib.lookupFunction<_c_atg_conv1d, _dart_atg_conv1d>('atg_conv1d');
    return _atg_conv1d(
      arg0,
      input,
      weight,
      bias,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      dilation_data,
      dilation_len,
      groups,
    );
  }

  _dart_atg_conv1d _atg_conv1d;

  void atg_conv2d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> bias,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int groups,
  ) {
    _atg_conv2d ??=
        _dylib.lookupFunction<_c_atg_conv2d, _dart_atg_conv2d>('atg_conv2d');
    return _atg_conv2d(
      arg0,
      input,
      weight,
      bias,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      dilation_data,
      dilation_len,
      groups,
    );
  }

  _dart_atg_conv2d _atg_conv2d;

  void atg_conv3d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> bias,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int groups,
  ) {
    _atg_conv3d ??=
        _dylib.lookupFunction<_c_atg_conv3d, _dart_atg_conv3d>('atg_conv3d');
    return _atg_conv3d(
      arg0,
      input,
      weight,
      bias,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      dilation_data,
      dilation_len,
      groups,
    );
  }

  _dart_atg_conv3d _atg_conv3d;

  void atg_conv_tbc(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> bias,
    int pad,
  ) {
    _atg_conv_tbc ??= _dylib
        .lookupFunction<_c_atg_conv_tbc, _dart_atg_conv_tbc>('atg_conv_tbc');
    return _atg_conv_tbc(
      arg0,
      self,
      weight,
      bias,
      pad,
    );
  }

  _dart_atg_conv_tbc _atg_conv_tbc;

  void atg_conv_tbc_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> bias,
    int pad,
  ) {
    _atg_conv_tbc_backward ??= _dylib.lookupFunction<_c_atg_conv_tbc_backward,
        _dart_atg_conv_tbc_backward>('atg_conv_tbc_backward');
    return _atg_conv_tbc_backward(
      arg0,
      self,
      input,
      weight,
      bias,
      pad,
    );
  }

  _dart_atg_conv_tbc_backward _atg_conv_tbc_backward;

  void atg_conv_transpose1d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> bias,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> output_padding_data,
    int output_padding_len,
    int groups,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
  ) {
    _atg_conv_transpose1d ??= _dylib.lookupFunction<_c_atg_conv_transpose1d,
        _dart_atg_conv_transpose1d>('atg_conv_transpose1d');
    return _atg_conv_transpose1d(
      arg0,
      input,
      weight,
      bias,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      output_padding_data,
      output_padding_len,
      groups,
      dilation_data,
      dilation_len,
    );
  }

  _dart_atg_conv_transpose1d _atg_conv_transpose1d;

  void atg_conv_transpose2d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> bias,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> output_padding_data,
    int output_padding_len,
    int groups,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
  ) {
    _atg_conv_transpose2d ??= _dylib.lookupFunction<_c_atg_conv_transpose2d,
        _dart_atg_conv_transpose2d>('atg_conv_transpose2d');
    return _atg_conv_transpose2d(
      arg0,
      input,
      weight,
      bias,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      output_padding_data,
      output_padding_len,
      groups,
      dilation_data,
      dilation_len,
    );
  }

  _dart_atg_conv_transpose2d _atg_conv_transpose2d;

  void atg_conv_transpose3d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> bias,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> output_padding_data,
    int output_padding_len,
    int groups,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
  ) {
    _atg_conv_transpose3d ??= _dylib.lookupFunction<_c_atg_conv_transpose3d,
        _dart_atg_conv_transpose3d>('atg_conv_transpose3d');
    return _atg_conv_transpose3d(
      arg0,
      input,
      weight,
      bias,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      output_padding_data,
      output_padding_len,
      groups,
      dilation_data,
      dilation_len,
    );
  }

  _dart_atg_conv_transpose3d _atg_conv_transpose3d;

  void atg_convolution(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> bias,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int transposed,
    ffi.Pointer<ffi.Int64> output_padding_data,
    int output_padding_len,
    int groups,
  ) {
    _atg_convolution ??=
        _dylib.lookupFunction<_c_atg_convolution, _dart_atg_convolution>(
            'atg_convolution');
    return _atg_convolution(
      arg0,
      input,
      weight,
      bias,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      dilation_data,
      dilation_len,
      transposed,
      output_padding_data,
      output_padding_len,
      groups,
    );
  }

  _dart_atg_convolution _atg_convolution;

  void atg_convolution_overrideable(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> bias,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int transposed,
    ffi.Pointer<ffi.Int64> output_padding_data,
    int output_padding_len,
    int groups,
  ) {
    _atg_convolution_overrideable ??= _dylib.lookupFunction<
        _c_atg_convolution_overrideable,
        _dart_atg_convolution_overrideable>('atg_convolution_overrideable');
    return _atg_convolution_overrideable(
      arg0,
      input,
      weight,
      bias,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      dilation_data,
      dilation_len,
      transposed,
      output_padding_data,
      output_padding_len,
      groups,
    );
  }

  _dart_atg_convolution_overrideable _atg_convolution_overrideable;

  void atg_copy_sparse_to_sparse_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> src,
    int non_blocking,
  ) {
    _atg_copy_sparse_to_sparse_ ??= _dylib.lookupFunction<
        _c_atg_copy_sparse_to_sparse_,
        _dart_atg_copy_sparse_to_sparse_>('atg_copy_sparse_to_sparse_');
    return _atg_copy_sparse_to_sparse_(
      arg0,
      self,
      src,
      non_blocking,
    );
  }

  _dart_atg_copy_sparse_to_sparse_ _atg_copy_sparse_to_sparse_;

  void atg_cos(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_cos ??= _dylib.lookupFunction<_c_atg_cos, _dart_atg_cos>('atg_cos');
    return _atg_cos(
      arg0,
      self,
    );
  }

  _dart_atg_cos _atg_cos;

  void atg_cos_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_cos_ ??=
        _dylib.lookupFunction<_c_atg_cos_, _dart_atg_cos_>('atg_cos_');
    return _atg_cos_(
      arg0,
      self,
    );
  }

  _dart_atg_cos_ _atg_cos_;

  void atg_cos_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_cos_out ??=
        _dylib.lookupFunction<_c_atg_cos_out, _dart_atg_cos_out>('atg_cos_out');
    return _atg_cos_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_cos_out _atg_cos_out;

  void atg_cosh(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_cosh ??=
        _dylib.lookupFunction<_c_atg_cosh, _dart_atg_cosh>('atg_cosh');
    return _atg_cosh(
      arg0,
      self,
    );
  }

  _dart_atg_cosh _atg_cosh;

  void atg_cosh_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_cosh_ ??=
        _dylib.lookupFunction<_c_atg_cosh_, _dart_atg_cosh_>('atg_cosh_');
    return _atg_cosh_(
      arg0,
      self,
    );
  }

  _dart_atg_cosh_ _atg_cosh_;

  void atg_cosh_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_cosh_out ??= _dylib
        .lookupFunction<_c_atg_cosh_out, _dart_atg_cosh_out>('atg_cosh_out');
    return _atg_cosh_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_cosh_out _atg_cosh_out;

  void atg_cosine_embedding_loss(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input1,
    ffi.Pointer<ffi.Void> input2,
    ffi.Pointer<ffi.Void> target,
    double margin,
    int reduction,
  ) {
    _atg_cosine_embedding_loss ??= _dylib.lookupFunction<
        _c_atg_cosine_embedding_loss,
        _dart_atg_cosine_embedding_loss>('atg_cosine_embedding_loss');
    return _atg_cosine_embedding_loss(
      arg0,
      input1,
      input2,
      target,
      margin,
      reduction,
    );
  }

  _dart_atg_cosine_embedding_loss _atg_cosine_embedding_loss;

  void atg_cosine_similarity(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> x1,
    ffi.Pointer<ffi.Void> x2,
    int dim,
    double eps,
  ) {
    _atg_cosine_similarity ??= _dylib.lookupFunction<_c_atg_cosine_similarity,
        _dart_atg_cosine_similarity>('atg_cosine_similarity');
    return _atg_cosine_similarity(
      arg0,
      x1,
      x2,
      dim,
      eps,
    );
  }

  _dart_atg_cosine_similarity _atg_cosine_similarity;

  void atg_cross(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
    int dim_v,
    int dim_null,
  ) {
    _atg_cross ??=
        _dylib.lookupFunction<_c_atg_cross, _dart_atg_cross>('atg_cross');
    return _atg_cross(
      arg0,
      self,
      other,
      dim_v,
      dim_null,
    );
  }

  _dart_atg_cross _atg_cross;

  void atg_cross_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
    int dim_v,
    int dim_null,
  ) {
    _atg_cross_out ??= _dylib
        .lookupFunction<_c_atg_cross_out, _dart_atg_cross_out>('atg_cross_out');
    return _atg_cross_out(
      arg0,
      out,
      self,
      other,
      dim_v,
      dim_null,
    );
  }

  _dart_atg_cross_out _atg_cross_out;

  void atg_ctc_loss(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> log_probs,
    ffi.Pointer<ffi.Void> targets,
    ffi.Pointer<ffi.Int64> input_lengths_data,
    int input_lengths_len,
    ffi.Pointer<ffi.Int64> target_lengths_data,
    int target_lengths_len,
    int blank,
    int reduction,
    int zero_infinity,
  ) {
    _atg_ctc_loss ??= _dylib
        .lookupFunction<_c_atg_ctc_loss, _dart_atg_ctc_loss>('atg_ctc_loss');
    return _atg_ctc_loss(
      arg0,
      log_probs,
      targets,
      input_lengths_data,
      input_lengths_len,
      target_lengths_data,
      target_lengths_len,
      blank,
      reduction,
      zero_infinity,
    );
  }

  _dart_atg_ctc_loss _atg_ctc_loss;

  void atg_ctc_loss1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> log_probs,
    ffi.Pointer<ffi.Void> targets,
    ffi.Pointer<ffi.Void> input_lengths,
    ffi.Pointer<ffi.Void> target_lengths,
    int blank,
    int reduction,
    int zero_infinity,
  ) {
    _atg_ctc_loss1 ??= _dylib
        .lookupFunction<_c_atg_ctc_loss1, _dart_atg_ctc_loss1>('atg_ctc_loss1');
    return _atg_ctc_loss1(
      arg0,
      log_probs,
      targets,
      input_lengths,
      target_lengths,
      blank,
      reduction,
      zero_infinity,
    );
  }

  _dart_atg_ctc_loss1 _atg_ctc_loss1;

  void atg_cudnn_affine_grid_generator(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> theta,
    int n,
    int C,
    int H,
    int W,
  ) {
    _atg_cudnn_affine_grid_generator ??= _dylib.lookupFunction<
            _c_atg_cudnn_affine_grid_generator,
            _dart_atg_cudnn_affine_grid_generator>(
        'atg_cudnn_affine_grid_generator');
    return _atg_cudnn_affine_grid_generator(
      arg0,
      theta,
      n,
      C,
      H,
      W,
    );
  }

  _dart_atg_cudnn_affine_grid_generator _atg_cudnn_affine_grid_generator;

  void atg_cudnn_affine_grid_generator_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad,
    int n,
    int C,
    int H,
    int W,
  ) {
    _atg_cudnn_affine_grid_generator_backward ??= _dylib.lookupFunction<
            _c_atg_cudnn_affine_grid_generator_backward,
            _dart_atg_cudnn_affine_grid_generator_backward>(
        'atg_cudnn_affine_grid_generator_backward');
    return _atg_cudnn_affine_grid_generator_backward(
      arg0,
      grad,
      n,
      C,
      H,
      W,
    );
  }

  _dart_atg_cudnn_affine_grid_generator_backward
      _atg_cudnn_affine_grid_generator_backward;

  void atg_cudnn_batch_norm(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> bias,
    ffi.Pointer<ffi.Void> running_mean,
    ffi.Pointer<ffi.Void> running_var,
    int training,
    double exponential_average_factor,
    double epsilon,
  ) {
    _atg_cudnn_batch_norm ??= _dylib.lookupFunction<_c_atg_cudnn_batch_norm,
        _dart_atg_cudnn_batch_norm>('atg_cudnn_batch_norm');
    return _atg_cudnn_batch_norm(
      arg0,
      input,
      weight,
      bias,
      running_mean,
      running_var,
      training,
      exponential_average_factor,
      epsilon,
    );
  }

  _dart_atg_cudnn_batch_norm _atg_cudnn_batch_norm;

  void atg_cudnn_batch_norm_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> running_mean,
    ffi.Pointer<ffi.Void> running_var,
    ffi.Pointer<ffi.Void> save_mean,
    ffi.Pointer<ffi.Void> save_var,
    double epsilon,
    ffi.Pointer<ffi.Void> reserveSpace,
  ) {
    _atg_cudnn_batch_norm_backward ??= _dylib.lookupFunction<
        _c_atg_cudnn_batch_norm_backward,
        _dart_atg_cudnn_batch_norm_backward>('atg_cudnn_batch_norm_backward');
    return _atg_cudnn_batch_norm_backward(
      arg0,
      input,
      grad_output,
      weight,
      running_mean,
      running_var,
      save_mean,
      save_var,
      epsilon,
      reserveSpace,
    );
  }

  _dart_atg_cudnn_batch_norm_backward _atg_cudnn_batch_norm_backward;

  void atg_cudnn_convolution(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int groups,
    int benchmark,
    int deterministic,
  ) {
    _atg_cudnn_convolution ??= _dylib.lookupFunction<_c_atg_cudnn_convolution,
        _dart_atg_cudnn_convolution>('atg_cudnn_convolution');
    return _atg_cudnn_convolution(
      arg0,
      self,
      weight,
      padding_data,
      padding_len,
      stride_data,
      stride_len,
      dilation_data,
      dilation_len,
      groups,
      benchmark,
      deterministic,
    );
  }

  _dart_atg_cudnn_convolution _atg_cudnn_convolution;

  void atg_cudnn_convolution1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> bias,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int groups,
    int benchmark,
    int deterministic,
  ) {
    _atg_cudnn_convolution1 ??= _dylib.lookupFunction<_c_atg_cudnn_convolution1,
        _dart_atg_cudnn_convolution1>('atg_cudnn_convolution1');
    return _atg_cudnn_convolution1(
      arg0,
      self,
      weight,
      bias,
      padding_data,
      padding_len,
      stride_data,
      stride_len,
      dilation_data,
      dilation_len,
      groups,
      benchmark,
      deterministic,
    );
  }

  _dart_atg_cudnn_convolution1 _atg_cudnn_convolution1;

  void atg_cudnn_convolution_backward_input(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Int64> self_size_data,
    int self_size_len,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int groups,
    int benchmark,
    int deterministic,
  ) {
    _atg_cudnn_convolution_backward_input ??= _dylib.lookupFunction<
            _c_atg_cudnn_convolution_backward_input,
            _dart_atg_cudnn_convolution_backward_input>(
        'atg_cudnn_convolution_backward_input');
    return _atg_cudnn_convolution_backward_input(
      arg0,
      self_size_data,
      self_size_len,
      grad_output,
      weight,
      padding_data,
      padding_len,
      stride_data,
      stride_len,
      dilation_data,
      dilation_len,
      groups,
      benchmark,
      deterministic,
    );
  }

  _dart_atg_cudnn_convolution_backward_input
      _atg_cudnn_convolution_backward_input;

  void atg_cudnn_convolution_backward_weight(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Int64> weight_size_data,
    int weight_size_len,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int groups,
    int benchmark,
    int deterministic,
  ) {
    _atg_cudnn_convolution_backward_weight ??= _dylib.lookupFunction<
            _c_atg_cudnn_convolution_backward_weight,
            _dart_atg_cudnn_convolution_backward_weight>(
        'atg_cudnn_convolution_backward_weight');
    return _atg_cudnn_convolution_backward_weight(
      arg0,
      weight_size_data,
      weight_size_len,
      grad_output,
      self,
      padding_data,
      padding_len,
      stride_data,
      stride_len,
      dilation_data,
      dilation_len,
      groups,
      benchmark,
      deterministic,
    );
  }

  _dart_atg_cudnn_convolution_backward_weight
      _atg_cudnn_convolution_backward_weight;

  void atg_cudnn_convolution_transpose(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> output_padding_data,
    int output_padding_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int groups,
    int benchmark,
    int deterministic,
  ) {
    _atg_cudnn_convolution_transpose ??= _dylib.lookupFunction<
            _c_atg_cudnn_convolution_transpose,
            _dart_atg_cudnn_convolution_transpose>(
        'atg_cudnn_convolution_transpose');
    return _atg_cudnn_convolution_transpose(
      arg0,
      self,
      weight,
      padding_data,
      padding_len,
      output_padding_data,
      output_padding_len,
      stride_data,
      stride_len,
      dilation_data,
      dilation_len,
      groups,
      benchmark,
      deterministic,
    );
  }

  _dart_atg_cudnn_convolution_transpose _atg_cudnn_convolution_transpose;

  void atg_cudnn_convolution_transpose1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> bias,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> output_padding_data,
    int output_padding_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int groups,
    int benchmark,
    int deterministic,
  ) {
    _atg_cudnn_convolution_transpose1 ??= _dylib.lookupFunction<
            _c_atg_cudnn_convolution_transpose1,
            _dart_atg_cudnn_convolution_transpose1>(
        'atg_cudnn_convolution_transpose1');
    return _atg_cudnn_convolution_transpose1(
      arg0,
      self,
      weight,
      bias,
      padding_data,
      padding_len,
      output_padding_data,
      output_padding_len,
      stride_data,
      stride_len,
      dilation_data,
      dilation_len,
      groups,
      benchmark,
      deterministic,
    );
  }

  _dart_atg_cudnn_convolution_transpose1 _atg_cudnn_convolution_transpose1;

  void atg_cudnn_convolution_transpose_backward_input(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int groups,
    int benchmark,
    int deterministic,
  ) {
    _atg_cudnn_convolution_transpose_backward_input ??= _dylib.lookupFunction<
            _c_atg_cudnn_convolution_transpose_backward_input,
            _dart_atg_cudnn_convolution_transpose_backward_input>(
        'atg_cudnn_convolution_transpose_backward_input');
    return _atg_cudnn_convolution_transpose_backward_input(
      arg0,
      grad_output,
      weight,
      padding_data,
      padding_len,
      stride_data,
      stride_len,
      dilation_data,
      dilation_len,
      groups,
      benchmark,
      deterministic,
    );
  }

  _dart_atg_cudnn_convolution_transpose_backward_input
      _atg_cudnn_convolution_transpose_backward_input;

  void atg_cudnn_convolution_transpose_backward_weight(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Int64> weight_size_data,
    int weight_size_len,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int groups,
    int benchmark,
    int deterministic,
  ) {
    _atg_cudnn_convolution_transpose_backward_weight ??= _dylib.lookupFunction<
            _c_atg_cudnn_convolution_transpose_backward_weight,
            _dart_atg_cudnn_convolution_transpose_backward_weight>(
        'atg_cudnn_convolution_transpose_backward_weight');
    return _atg_cudnn_convolution_transpose_backward_weight(
      arg0,
      weight_size_data,
      weight_size_len,
      grad_output,
      self,
      padding_data,
      padding_len,
      stride_data,
      stride_len,
      dilation_data,
      dilation_len,
      groups,
      benchmark,
      deterministic,
    );
  }

  _dart_atg_cudnn_convolution_transpose_backward_weight
      _atg_cudnn_convolution_transpose_backward_weight;

  void atg_cudnn_grid_sampler(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> grid,
  ) {
    _atg_cudnn_grid_sampler ??= _dylib.lookupFunction<_c_atg_cudnn_grid_sampler,
        _dart_atg_cudnn_grid_sampler>('atg_cudnn_grid_sampler');
    return _atg_cudnn_grid_sampler(
      arg0,
      self,
      grid,
    );
  }

  _dart_atg_cudnn_grid_sampler _atg_cudnn_grid_sampler;

  void atg_cudnn_grid_sampler_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> grid,
    ffi.Pointer<ffi.Void> grad_output,
  ) {
    _atg_cudnn_grid_sampler_backward ??= _dylib.lookupFunction<
            _c_atg_cudnn_grid_sampler_backward,
            _dart_atg_cudnn_grid_sampler_backward>(
        'atg_cudnn_grid_sampler_backward');
    return _atg_cudnn_grid_sampler_backward(
      arg0,
      self,
      grid,
      grad_output,
    );
  }

  _dart_atg_cudnn_grid_sampler_backward _atg_cudnn_grid_sampler_backward;

  void atg_cummax(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
  ) {
    _atg_cummax ??=
        _dylib.lookupFunction<_c_atg_cummax, _dart_atg_cummax>('atg_cummax');
    return _atg_cummax(
      arg0,
      self,
      dim,
    );
  }

  _dart_atg_cummax _atg_cummax;

  void atg_cummax_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> values,
    ffi.Pointer<ffi.Void> indices,
    ffi.Pointer<ffi.Void> self,
    int dim,
  ) {
    _atg_cummax_out ??=
        _dylib.lookupFunction<_c_atg_cummax_out, _dart_atg_cummax_out>(
            'atg_cummax_out');
    return _atg_cummax_out(
      arg0,
      values,
      indices,
      self,
      dim,
    );
  }

  _dart_atg_cummax_out _atg_cummax_out;

  void atg_cummin(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
  ) {
    _atg_cummin ??=
        _dylib.lookupFunction<_c_atg_cummin, _dart_atg_cummin>('atg_cummin');
    return _atg_cummin(
      arg0,
      self,
      dim,
    );
  }

  _dart_atg_cummin _atg_cummin;

  void atg_cummin_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> values,
    ffi.Pointer<ffi.Void> indices,
    ffi.Pointer<ffi.Void> self,
    int dim,
  ) {
    _atg_cummin_out ??=
        _dylib.lookupFunction<_c_atg_cummin_out, _dart_atg_cummin_out>(
            'atg_cummin_out');
    return _atg_cummin_out(
      arg0,
      values,
      indices,
      self,
      dim,
    );
  }

  _dart_atg_cummin_out _atg_cummin_out;

  void atg_cumprod(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int dtype,
  ) {
    _atg_cumprod ??=
        _dylib.lookupFunction<_c_atg_cumprod, _dart_atg_cumprod>('atg_cumprod');
    return _atg_cumprod(
      arg0,
      self,
      dim,
      dtype,
    );
  }

  _dart_atg_cumprod _atg_cumprod;

  void atg_cumprod_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int dtype,
  ) {
    _atg_cumprod_out ??=
        _dylib.lookupFunction<_c_atg_cumprod_out, _dart_atg_cumprod_out>(
            'atg_cumprod_out');
    return _atg_cumprod_out(
      arg0,
      out,
      self,
      dim,
      dtype,
    );
  }

  _dart_atg_cumprod_out _atg_cumprod_out;

  void atg_cumsum(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int dtype,
  ) {
    _atg_cumsum ??=
        _dylib.lookupFunction<_c_atg_cumsum, _dart_atg_cumsum>('atg_cumsum');
    return _atg_cumsum(
      arg0,
      self,
      dim,
      dtype,
    );
  }

  _dart_atg_cumsum _atg_cumsum;

  void atg_cumsum_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int dtype,
  ) {
    _atg_cumsum_out ??=
        _dylib.lookupFunction<_c_atg_cumsum_out, _dart_atg_cumsum_out>(
            'atg_cumsum_out');
    return _atg_cumsum_out(
      arg0,
      out,
      self,
      dim,
      dtype,
    );
  }

  _dart_atg_cumsum_out _atg_cumsum_out;

  void atg_data(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_data ??=
        _dylib.lookupFunction<_c_atg_data, _dart_atg_data>('atg_data');
    return _atg_data(
      arg0,
      self,
    );
  }

  _dart_atg_data _atg_data;

  void atg_deg2rad(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_deg2rad ??=
        _dylib.lookupFunction<_c_atg_deg2rad, _dart_atg_deg2rad>('atg_deg2rad');
    return _atg_deg2rad(
      arg0,
      self,
    );
  }

  _dart_atg_deg2rad _atg_deg2rad;

  void atg_deg2rad_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_deg2rad_ ??= _dylib
        .lookupFunction<_c_atg_deg2rad_, _dart_atg_deg2rad_>('atg_deg2rad_');
    return _atg_deg2rad_(
      arg0,
      self,
    );
  }

  _dart_atg_deg2rad_ _atg_deg2rad_;

  void atg_deg2rad_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_deg2rad_out ??=
        _dylib.lookupFunction<_c_atg_deg2rad_out, _dart_atg_deg2rad_out>(
            'atg_deg2rad_out');
    return _atg_deg2rad_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_deg2rad_out _atg_deg2rad_out;

  void atg_dequantize(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_dequantize ??=
        _dylib.lookupFunction<_c_atg_dequantize, _dart_atg_dequantize>(
            'atg_dequantize');
    return _atg_dequantize(
      arg0,
      self,
    );
  }

  _dart_atg_dequantize _atg_dequantize;

  ffi.Pointer<ffi.Pointer<ffi.Void>> atg_dequantize1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
    int tensors_len,
  ) {
    _atg_dequantize1 ??=
        _dylib.lookupFunction<_c_atg_dequantize1, _dart_atg_dequantize1>(
            'atg_dequantize1');
    return _atg_dequantize1(
      tensors_data,
      tensors_len,
    );
  }

  _dart_atg_dequantize1 _atg_dequantize1;

  void atg_det(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_det ??= _dylib.lookupFunction<_c_atg_det, _dart_atg_det>('atg_det');
    return _atg_det(
      arg0,
      self,
    );
  }

  _dart_atg_det _atg_det;

  void atg_detach(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_detach ??=
        _dylib.lookupFunction<_c_atg_detach, _dart_atg_detach>('atg_detach');
    return _atg_detach(
      arg0,
      self,
    );
  }

  _dart_atg_detach _atg_detach;

  void atg_detach_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_detach_ ??=
        _dylib.lookupFunction<_c_atg_detach_, _dart_atg_detach_>('atg_detach_');
    return _atg_detach_(
      arg0,
      self,
    );
  }

  _dart_atg_detach_ _atg_detach_;

  void atg_diag(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int diagonal,
  ) {
    _atg_diag ??=
        _dylib.lookupFunction<_c_atg_diag, _dart_atg_diag>('atg_diag');
    return _atg_diag(
      arg0,
      self,
      diagonal,
    );
  }

  _dart_atg_diag _atg_diag;

  void atg_diag_embed(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int offset,
    int dim1,
    int dim2,
  ) {
    _atg_diag_embed ??=
        _dylib.lookupFunction<_c_atg_diag_embed, _dart_atg_diag_embed>(
            'atg_diag_embed');
    return _atg_diag_embed(
      arg0,
      self,
      offset,
      dim1,
      dim2,
    );
  }

  _dart_atg_diag_embed _atg_diag_embed;

  void atg_diag_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    int diagonal,
  ) {
    _atg_diag_out ??= _dylib
        .lookupFunction<_c_atg_diag_out, _dart_atg_diag_out>('atg_diag_out');
    return _atg_diag_out(
      arg0,
      out,
      self,
      diagonal,
    );
  }

  _dart_atg_diag_out _atg_diag_out;

  void atg_diagflat(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int offset,
  ) {
    _atg_diagflat ??= _dylib
        .lookupFunction<_c_atg_diagflat, _dart_atg_diagflat>('atg_diagflat');
    return _atg_diagflat(
      arg0,
      self,
      offset,
    );
  }

  _dart_atg_diagflat _atg_diagflat;

  void atg_diagonal(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int offset,
    int dim1,
    int dim2,
  ) {
    _atg_diagonal ??= _dylib
        .lookupFunction<_c_atg_diagonal, _dart_atg_diagonal>('atg_diagonal');
    return _atg_diagonal(
      arg0,
      self,
      offset,
      dim1,
      dim2,
    );
  }

  _dart_atg_diagonal _atg_diagonal;

  void atg_digamma(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_digamma ??=
        _dylib.lookupFunction<_c_atg_digamma, _dart_atg_digamma>('atg_digamma');
    return _atg_digamma(
      arg0,
      self,
    );
  }

  _dart_atg_digamma _atg_digamma;

  void atg_digamma_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_digamma_ ??= _dylib
        .lookupFunction<_c_atg_digamma_, _dart_atg_digamma_>('atg_digamma_');
    return _atg_digamma_(
      arg0,
      self,
    );
  }

  _dart_atg_digamma_ _atg_digamma_;

  void atg_digamma_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_digamma_out ??=
        _dylib.lookupFunction<_c_atg_digamma_out, _dart_atg_digamma_out>(
            'atg_digamma_out');
    return _atg_digamma_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_digamma_out _atg_digamma_out;

  void atg_dist(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_dist ??=
        _dylib.lookupFunction<_c_atg_dist, _dart_atg_dist>('atg_dist');
    return _atg_dist(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_dist _atg_dist;

  void atg_div(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_div ??= _dylib.lookupFunction<_c_atg_div, _dart_atg_div>('atg_div');
    return _atg_div(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_div _atg_div;

  void atg_div1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_div1 ??=
        _dylib.lookupFunction<_c_atg_div1, _dart_atg_div1>('atg_div1');
    return _atg_div1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_div1 _atg_div1;

  void atg_div_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_div_ ??=
        _dylib.lookupFunction<_c_atg_div_, _dart_atg_div_>('atg_div_');
    return _atg_div_(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_div_ _atg_div_;

  void atg_div_1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_div_1 ??=
        _dylib.lookupFunction<_c_atg_div_1, _dart_atg_div_1>('atg_div_1');
    return _atg_div_1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_div_1 _atg_div_1;

  void atg_div_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_div_out ??=
        _dylib.lookupFunction<_c_atg_div_out, _dart_atg_div_out>('atg_div_out');
    return _atg_div_out(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_div_out _atg_div_out;

  void atg_dot(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> tensor,
  ) {
    _atg_dot ??= _dylib.lookupFunction<_c_atg_dot, _dart_atg_dot>('atg_dot');
    return _atg_dot(
      arg0,
      self,
      tensor,
    );
  }

  _dart_atg_dot _atg_dot;

  void atg_dot_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> tensor,
  ) {
    _atg_dot_out ??=
        _dylib.lookupFunction<_c_atg_dot_out, _dart_atg_dot_out>('atg_dot_out');
    return _atg_dot_out(
      arg0,
      out,
      self,
      tensor,
    );
  }

  _dart_atg_dot_out _atg_dot_out;

  void atg_dropout(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    double p,
    int train,
  ) {
    _atg_dropout ??=
        _dylib.lookupFunction<_c_atg_dropout, _dart_atg_dropout>('atg_dropout');
    return _atg_dropout(
      arg0,
      input,
      p,
      train,
    );
  }

  _dart_atg_dropout _atg_dropout;

  void atg_dropout_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    double p,
    int train,
  ) {
    _atg_dropout_ ??= _dylib
        .lookupFunction<_c_atg_dropout_, _dart_atg_dropout_>('atg_dropout_');
    return _atg_dropout_(
      arg0,
      self,
      p,
      train,
    );
  }

  _dart_atg_dropout_ _atg_dropout_;

  void atg_eig(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int eigenvectors,
  ) {
    _atg_eig ??= _dylib.lookupFunction<_c_atg_eig, _dart_atg_eig>('atg_eig');
    return _atg_eig(
      arg0,
      self,
      eigenvectors,
    );
  }

  _dart_atg_eig _atg_eig;

  void atg_eig_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> e,
    ffi.Pointer<ffi.Void> v,
    ffi.Pointer<ffi.Void> self,
    int eigenvectors,
  ) {
    _atg_eig_out ??=
        _dylib.lookupFunction<_c_atg_eig_out, _dart_atg_eig_out>('atg_eig_out');
    return _atg_eig_out(
      arg0,
      e,
      v,
      self,
      eigenvectors,
    );
  }

  _dart_atg_eig_out _atg_eig_out;

  void atg_einsum(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Int8> equation_ptr,
    int equation_len,
    ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
    int tensors_len,
  ) {
    _atg_einsum ??=
        _dylib.lookupFunction<_c_atg_einsum, _dart_atg_einsum>('atg_einsum');
    return _atg_einsum(
      arg0,
      equation_ptr,
      equation_len,
      tensors_data,
      tensors_len,
    );
  }

  _dart_atg_einsum _atg_einsum;

  void atg_elu(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_elu ??= _dylib.lookupFunction<_c_atg_elu, _dart_atg_elu>('atg_elu');
    return _atg_elu(
      arg0,
      self,
    );
  }

  _dart_atg_elu _atg_elu;

  void atg_elu_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_elu_ ??=
        _dylib.lookupFunction<_c_atg_elu_, _dart_atg_elu_>('atg_elu_');
    return _atg_elu_(
      arg0,
      self,
    );
  }

  _dart_atg_elu_ _atg_elu_;

  void atg_elu_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> scale,
    ffi.Pointer<ffi.Void> input_scale,
    ffi.Pointer<ffi.Void> output,
  ) {
    _atg_elu_backward ??=
        _dylib.lookupFunction<_c_atg_elu_backward, _dart_atg_elu_backward>(
            'atg_elu_backward');
    return _atg_elu_backward(
      arg0,
      grad_output,
      alpha,
      scale,
      input_scale,
      output,
    );
  }

  _dart_atg_elu_backward _atg_elu_backward;

  void atg_elu_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> scale,
    ffi.Pointer<ffi.Void> input_scale,
    ffi.Pointer<ffi.Void> output,
  ) {
    _atg_elu_backward_out ??= _dylib.lookupFunction<_c_atg_elu_backward_out,
        _dart_atg_elu_backward_out>('atg_elu_backward_out');
    return _atg_elu_backward_out(
      arg0,
      grad_input,
      grad_output,
      alpha,
      scale,
      input_scale,
      output,
    );
  }

  _dart_atg_elu_backward_out _atg_elu_backward_out;

  void atg_elu_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_elu_out ??=
        _dylib.lookupFunction<_c_atg_elu_out, _dart_atg_elu_out>('atg_elu_out');
    return _atg_elu_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_elu_out _atg_elu_out;

  void atg_embedding(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> indices,
    int padding_idx,
    int scale_grad_by_freq,
    int sparse,
  ) {
    _atg_embedding ??= _dylib
        .lookupFunction<_c_atg_embedding, _dart_atg_embedding>('atg_embedding');
    return _atg_embedding(
      arg0,
      weight,
      indices,
      padding_idx,
      scale_grad_by_freq,
      sparse,
    );
  }

  _dart_atg_embedding _atg_embedding;

  void atg_embedding_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad,
    ffi.Pointer<ffi.Void> indices,
    int num_weights,
    int padding_idx,
    int scale_grad_by_freq,
    int sparse,
  ) {
    _atg_embedding_backward ??= _dylib.lookupFunction<_c_atg_embedding_backward,
        _dart_atg_embedding_backward>('atg_embedding_backward');
    return _atg_embedding_backward(
      arg0,
      grad,
      indices,
      num_weights,
      padding_idx,
      scale_grad_by_freq,
      sparse,
    );
  }

  _dart_atg_embedding_backward _atg_embedding_backward;

  void atg_embedding_bag(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> indices,
    ffi.Pointer<ffi.Void> offsets,
    int scale_grad_by_freq,
    int mode,
    int sparse,
    ffi.Pointer<ffi.Void> per_sample_weights,
    int include_last_offset,
  ) {
    _atg_embedding_bag ??=
        _dylib.lookupFunction<_c_atg_embedding_bag, _dart_atg_embedding_bag>(
            'atg_embedding_bag');
    return _atg_embedding_bag(
      arg0,
      weight,
      indices,
      offsets,
      scale_grad_by_freq,
      mode,
      sparse,
      per_sample_weights,
      include_last_offset,
    );
  }

  _dart_atg_embedding_bag _atg_embedding_bag;

  void atg_embedding_dense_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> indices,
    int num_weights,
    int padding_idx,
    int scale_grad_by_freq,
  ) {
    _atg_embedding_dense_backward ??= _dylib.lookupFunction<
        _c_atg_embedding_dense_backward,
        _dart_atg_embedding_dense_backward>('atg_embedding_dense_backward');
    return _atg_embedding_dense_backward(
      arg0,
      grad_output,
      indices,
      num_weights,
      padding_idx,
      scale_grad_by_freq,
    );
  }

  _dart_atg_embedding_dense_backward _atg_embedding_dense_backward;

  void atg_embedding_renorm_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> indices,
    double max_norm,
    double norm_type,
  ) {
    _atg_embedding_renorm_ ??= _dylib.lookupFunction<_c_atg_embedding_renorm_,
        _dart_atg_embedding_renorm_>('atg_embedding_renorm_');
    return _atg_embedding_renorm_(
      arg0,
      self,
      indices,
      max_norm,
      norm_type,
    );
  }

  _dart_atg_embedding_renorm_ _atg_embedding_renorm_;

  void atg_embedding_sparse_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad,
    ffi.Pointer<ffi.Void> indices,
    int num_weights,
    int padding_idx,
    int scale_grad_by_freq,
  ) {
    _atg_embedding_sparse_backward ??= _dylib.lookupFunction<
        _c_atg_embedding_sparse_backward,
        _dart_atg_embedding_sparse_backward>('atg_embedding_sparse_backward');
    return _atg_embedding_sparse_backward(
      arg0,
      grad,
      indices,
      num_weights,
      padding_idx,
      scale_grad_by_freq,
    );
  }

  _dart_atg_embedding_sparse_backward _atg_embedding_sparse_backward;

  void atg_empty(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
    int options_kind,
    int options_device,
  ) {
    _atg_empty ??=
        _dylib.lookupFunction<_c_atg_empty, _dart_atg_empty>('atg_empty');
    return _atg_empty(
      arg0,
      size_data,
      size_len,
      options_kind,
      options_device,
    );
  }

  _dart_atg_empty _atg_empty;

  void atg_empty_like(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_empty_like ??=
        _dylib.lookupFunction<_c_atg_empty_like, _dart_atg_empty_like>(
            'atg_empty_like');
    return _atg_empty_like(
      arg0,
      self,
    );
  }

  _dart_atg_empty_like _atg_empty_like;

  void atg_empty_meta(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
    int options_kind,
    int options_device,
  ) {
    _atg_empty_meta ??=
        _dylib.lookupFunction<_c_atg_empty_meta, _dart_atg_empty_meta>(
            'atg_empty_meta');
    return _atg_empty_meta(
      arg0,
      size_data,
      size_len,
      options_kind,
      options_device,
    );
  }

  _dart_atg_empty_meta _atg_empty_meta;

  void atg_empty_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
  ) {
    _atg_empty_out ??= _dylib
        .lookupFunction<_c_atg_empty_out, _dart_atg_empty_out>('atg_empty_out');
    return _atg_empty_out(
      arg0,
      out,
      size_data,
      size_len,
    );
  }

  _dart_atg_empty_out _atg_empty_out;

  void atg_empty_quantized(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
    ffi.Pointer<ffi.Void> qtensor,
  ) {
    _atg_empty_quantized ??= _dylib.lookupFunction<_c_atg_empty_quantized,
        _dart_atg_empty_quantized>('atg_empty_quantized');
    return _atg_empty_quantized(
      arg0,
      size_data,
      size_len,
      qtensor,
    );
  }

  _dart_atg_empty_quantized _atg_empty_quantized;

  void atg_empty_strided(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    int options_kind,
    int options_device,
  ) {
    _atg_empty_strided ??=
        _dylib.lookupFunction<_c_atg_empty_strided, _dart_atg_empty_strided>(
            'atg_empty_strided');
    return _atg_empty_strided(
      arg0,
      size_data,
      size_len,
      stride_data,
      stride_len,
      options_kind,
      options_device,
    );
  }

  _dart_atg_empty_strided _atg_empty_strided;

  void atg_eq(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_eq ??= _dylib.lookupFunction<_c_atg_eq, _dart_atg_eq>('atg_eq');
    return _atg_eq(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_eq _atg_eq;

  void atg_eq1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_eq1 ??= _dylib.lookupFunction<_c_atg_eq1, _dart_atg_eq1>('atg_eq1');
    return _atg_eq1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_eq1 _atg_eq1;

  void atg_eq_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_eq_ ??= _dylib.lookupFunction<_c_atg_eq_, _dart_atg_eq_>('atg_eq_');
    return _atg_eq_(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_eq_ _atg_eq_;

  void atg_eq_1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_eq_1 ??=
        _dylib.lookupFunction<_c_atg_eq_1, _dart_atg_eq_1>('atg_eq_1');
    return _atg_eq_1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_eq_1 _atg_eq_1;

  void atg_eq_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_eq_out ??=
        _dylib.lookupFunction<_c_atg_eq_out, _dart_atg_eq_out>('atg_eq_out');
    return _atg_eq_out(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_eq_out _atg_eq_out;

  void atg_eq_out1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_eq_out1 ??=
        _dylib.lookupFunction<_c_atg_eq_out1, _dart_atg_eq_out1>('atg_eq_out1');
    return _atg_eq_out1(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_eq_out1 _atg_eq_out1;

  void atg_erf(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_erf ??= _dylib.lookupFunction<_c_atg_erf, _dart_atg_erf>('atg_erf');
    return _atg_erf(
      arg0,
      self,
    );
  }

  _dart_atg_erf _atg_erf;

  void atg_erf_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_erf_ ??=
        _dylib.lookupFunction<_c_atg_erf_, _dart_atg_erf_>('atg_erf_');
    return _atg_erf_(
      arg0,
      self,
    );
  }

  _dart_atg_erf_ _atg_erf_;

  void atg_erf_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_erf_out ??=
        _dylib.lookupFunction<_c_atg_erf_out, _dart_atg_erf_out>('atg_erf_out');
    return _atg_erf_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_erf_out _atg_erf_out;

  void atg_erfc(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_erfc ??=
        _dylib.lookupFunction<_c_atg_erfc, _dart_atg_erfc>('atg_erfc');
    return _atg_erfc(
      arg0,
      self,
    );
  }

  _dart_atg_erfc _atg_erfc;

  void atg_erfc_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_erfc_ ??=
        _dylib.lookupFunction<_c_atg_erfc_, _dart_atg_erfc_>('atg_erfc_');
    return _atg_erfc_(
      arg0,
      self,
    );
  }

  _dart_atg_erfc_ _atg_erfc_;

  void atg_erfc_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_erfc_out ??= _dylib
        .lookupFunction<_c_atg_erfc_out, _dart_atg_erfc_out>('atg_erfc_out');
    return _atg_erfc_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_erfc_out _atg_erfc_out;

  void atg_erfinv(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_erfinv ??=
        _dylib.lookupFunction<_c_atg_erfinv, _dart_atg_erfinv>('atg_erfinv');
    return _atg_erfinv(
      arg0,
      self,
    );
  }

  _dart_atg_erfinv _atg_erfinv;

  void atg_erfinv_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_erfinv_ ??=
        _dylib.lookupFunction<_c_atg_erfinv_, _dart_atg_erfinv_>('atg_erfinv_');
    return _atg_erfinv_(
      arg0,
      self,
    );
  }

  _dart_atg_erfinv_ _atg_erfinv_;

  void atg_erfinv_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_erfinv_out ??=
        _dylib.lookupFunction<_c_atg_erfinv_out, _dart_atg_erfinv_out>(
            'atg_erfinv_out');
    return _atg_erfinv_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_erfinv_out _atg_erfinv_out;

  void atg_exp(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_exp ??= _dylib.lookupFunction<_c_atg_exp, _dart_atg_exp>('atg_exp');
    return _atg_exp(
      arg0,
      self,
    );
  }

  _dart_atg_exp _atg_exp;

  void atg_exp_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_exp_ ??=
        _dylib.lookupFunction<_c_atg_exp_, _dart_atg_exp_>('atg_exp_');
    return _atg_exp_(
      arg0,
      self,
    );
  }

  _dart_atg_exp_ _atg_exp_;

  void atg_exp_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_exp_out ??=
        _dylib.lookupFunction<_c_atg_exp_out, _dart_atg_exp_out>('atg_exp_out');
    return _atg_exp_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_exp_out _atg_exp_out;

  void atg_expand(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
    int implicit,
  ) {
    _atg_expand ??=
        _dylib.lookupFunction<_c_atg_expand, _dart_atg_expand>('atg_expand');
    return _atg_expand(
      arg0,
      self,
      size_data,
      size_len,
      implicit,
    );
  }

  _dart_atg_expand _atg_expand;

  void atg_expand_as(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_expand_as ??= _dylib
        .lookupFunction<_c_atg_expand_as, _dart_atg_expand_as>('atg_expand_as');
    return _atg_expand_as(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_expand_as _atg_expand_as;

  void atg_expm1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_expm1 ??=
        _dylib.lookupFunction<_c_atg_expm1, _dart_atg_expm1>('atg_expm1');
    return _atg_expm1(
      arg0,
      self,
    );
  }

  _dart_atg_expm1 _atg_expm1;

  void atg_expm1_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_expm1_ ??=
        _dylib.lookupFunction<_c_atg_expm1_, _dart_atg_expm1_>('atg_expm1_');
    return _atg_expm1_(
      arg0,
      self,
    );
  }

  _dart_atg_expm1_ _atg_expm1_;

  void atg_expm1_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_expm1_out ??= _dylib
        .lookupFunction<_c_atg_expm1_out, _dart_atg_expm1_out>('atg_expm1_out');
    return _atg_expm1_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_expm1_out _atg_expm1_out;

  void atg_exponential_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    double lambd,
  ) {
    _atg_exponential_ ??=
        _dylib.lookupFunction<_c_atg_exponential_, _dart_atg_exponential_>(
            'atg_exponential_');
    return _atg_exponential_(
      arg0,
      self,
      lambd,
    );
  }

  _dart_atg_exponential_ _atg_exponential_;

  void atg_eye(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    int n,
    int options_kind,
    int options_device,
  ) {
    _atg_eye ??= _dylib.lookupFunction<_c_atg_eye, _dart_atg_eye>('atg_eye');
    return _atg_eye(
      arg0,
      n,
      options_kind,
      options_device,
    );
  }

  _dart_atg_eye _atg_eye;

  void atg_eye1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    int n,
    int m,
    int options_kind,
    int options_device,
  ) {
    _atg_eye1 ??=
        _dylib.lookupFunction<_c_atg_eye1, _dart_atg_eye1>('atg_eye1');
    return _atg_eye1(
      arg0,
      n,
      m,
      options_kind,
      options_device,
    );
  }

  _dart_atg_eye1 _atg_eye1;

  void atg_eye_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    int n,
  ) {
    _atg_eye_out ??=
        _dylib.lookupFunction<_c_atg_eye_out, _dart_atg_eye_out>('atg_eye_out');
    return _atg_eye_out(
      arg0,
      out,
      n,
    );
  }

  _dart_atg_eye_out _atg_eye_out;

  void atg_eye_out1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    int n,
    int m,
  ) {
    _atg_eye_out1 ??= _dylib
        .lookupFunction<_c_atg_eye_out1, _dart_atg_eye_out1>('atg_eye_out1');
    return _atg_eye_out1(
      arg0,
      out,
      n,
      m,
    );
  }

  _dart_atg_eye_out1 _atg_eye_out1;

  void atg_fake_quantize_per_channel_affine(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> scale,
    ffi.Pointer<ffi.Void> zero_point,
    int axis,
    int quant_min,
    int quant_max,
  ) {
    _atg_fake_quantize_per_channel_affine ??= _dylib.lookupFunction<
            _c_atg_fake_quantize_per_channel_affine,
            _dart_atg_fake_quantize_per_channel_affine>(
        'atg_fake_quantize_per_channel_affine');
    return _atg_fake_quantize_per_channel_affine(
      arg0,
      self,
      scale,
      zero_point,
      axis,
      quant_min,
      quant_max,
    );
  }

  _dart_atg_fake_quantize_per_channel_affine
      _atg_fake_quantize_per_channel_affine;

  void atg_fake_quantize_per_channel_affine_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> scale,
    ffi.Pointer<ffi.Void> zero_point,
    int axis,
    int quant_min,
    int quant_max,
  ) {
    _atg_fake_quantize_per_channel_affine_backward ??= _dylib.lookupFunction<
            _c_atg_fake_quantize_per_channel_affine_backward,
            _dart_atg_fake_quantize_per_channel_affine_backward>(
        'atg_fake_quantize_per_channel_affine_backward');
    return _atg_fake_quantize_per_channel_affine_backward(
      arg0,
      grad,
      self,
      scale,
      zero_point,
      axis,
      quant_min,
      quant_max,
    );
  }

  _dart_atg_fake_quantize_per_channel_affine_backward
      _atg_fake_quantize_per_channel_affine_backward;

  void atg_fake_quantize_per_tensor_affine(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    double scale,
    int zero_point,
    int quant_min,
    int quant_max,
  ) {
    _atg_fake_quantize_per_tensor_affine ??= _dylib.lookupFunction<
            _c_atg_fake_quantize_per_tensor_affine,
            _dart_atg_fake_quantize_per_tensor_affine>(
        'atg_fake_quantize_per_tensor_affine');
    return _atg_fake_quantize_per_tensor_affine(
      arg0,
      self,
      scale,
      zero_point,
      quant_min,
      quant_max,
    );
  }

  _dart_atg_fake_quantize_per_tensor_affine
      _atg_fake_quantize_per_tensor_affine;

  void atg_fake_quantize_per_tensor_affine_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad,
    ffi.Pointer<ffi.Void> self,
    double scale,
    int zero_point,
    int quant_min,
    int quant_max,
  ) {
    _atg_fake_quantize_per_tensor_affine_backward ??= _dylib.lookupFunction<
            _c_atg_fake_quantize_per_tensor_affine_backward,
            _dart_atg_fake_quantize_per_tensor_affine_backward>(
        'atg_fake_quantize_per_tensor_affine_backward');
    return _atg_fake_quantize_per_tensor_affine_backward(
      arg0,
      grad,
      self,
      scale,
      zero_point,
      quant_min,
      quant_max,
    );
  }

  _dart_atg_fake_quantize_per_tensor_affine_backward
      _atg_fake_quantize_per_tensor_affine_backward;

  void atg_fbgemm_linear_fp16_weight(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> packed_weight,
    ffi.Pointer<ffi.Void> bias,
  ) {
    _atg_fbgemm_linear_fp16_weight ??= _dylib.lookupFunction<
        _c_atg_fbgemm_linear_fp16_weight,
        _dart_atg_fbgemm_linear_fp16_weight>('atg_fbgemm_linear_fp16_weight');
    return _atg_fbgemm_linear_fp16_weight(
      arg0,
      input,
      packed_weight,
      bias,
    );
  }

  _dart_atg_fbgemm_linear_fp16_weight _atg_fbgemm_linear_fp16_weight;

  void atg_fbgemm_linear_fp16_weight_fp32_activation(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> packed_weight,
    ffi.Pointer<ffi.Void> bias,
  ) {
    _atg_fbgemm_linear_fp16_weight_fp32_activation ??= _dylib.lookupFunction<
            _c_atg_fbgemm_linear_fp16_weight_fp32_activation,
            _dart_atg_fbgemm_linear_fp16_weight_fp32_activation>(
        'atg_fbgemm_linear_fp16_weight_fp32_activation');
    return _atg_fbgemm_linear_fp16_weight_fp32_activation(
      arg0,
      input,
      packed_weight,
      bias,
    );
  }

  _dart_atg_fbgemm_linear_fp16_weight_fp32_activation
      _atg_fbgemm_linear_fp16_weight_fp32_activation;

  void atg_fbgemm_linear_int8_weight(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> packed,
    ffi.Pointer<ffi.Void> col_offsets,
    ffi.Pointer<ffi.Void> weight_scale,
    ffi.Pointer<ffi.Void> weight_zero_point,
    ffi.Pointer<ffi.Void> bias,
  ) {
    _atg_fbgemm_linear_int8_weight ??= _dylib.lookupFunction<
        _c_atg_fbgemm_linear_int8_weight,
        _dart_atg_fbgemm_linear_int8_weight>('atg_fbgemm_linear_int8_weight');
    return _atg_fbgemm_linear_int8_weight(
      arg0,
      input,
      weight,
      packed,
      col_offsets,
      weight_scale,
      weight_zero_point,
      bias,
    );
  }

  _dart_atg_fbgemm_linear_int8_weight _atg_fbgemm_linear_int8_weight;

  void atg_fbgemm_linear_int8_weight_fp32_activation(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> packed,
    ffi.Pointer<ffi.Void> col_offsets,
    ffi.Pointer<ffi.Void> weight_scale,
    ffi.Pointer<ffi.Void> weight_zero_point,
    ffi.Pointer<ffi.Void> bias,
  ) {
    _atg_fbgemm_linear_int8_weight_fp32_activation ??= _dylib.lookupFunction<
            _c_atg_fbgemm_linear_int8_weight_fp32_activation,
            _dart_atg_fbgemm_linear_int8_weight_fp32_activation>(
        'atg_fbgemm_linear_int8_weight_fp32_activation');
    return _atg_fbgemm_linear_int8_weight_fp32_activation(
      arg0,
      input,
      weight,
      packed,
      col_offsets,
      weight_scale,
      weight_zero_point,
      bias,
    );
  }

  _dart_atg_fbgemm_linear_int8_weight_fp32_activation
      _atg_fbgemm_linear_int8_weight_fp32_activation;

  void atg_fbgemm_pack_gemm_matrix_fp16(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
  ) {
    _atg_fbgemm_pack_gemm_matrix_fp16 ??= _dylib.lookupFunction<
            _c_atg_fbgemm_pack_gemm_matrix_fp16,
            _dart_atg_fbgemm_pack_gemm_matrix_fp16>(
        'atg_fbgemm_pack_gemm_matrix_fp16');
    return _atg_fbgemm_pack_gemm_matrix_fp16(
      arg0,
      input,
    );
  }

  _dart_atg_fbgemm_pack_gemm_matrix_fp16 _atg_fbgemm_pack_gemm_matrix_fp16;

  void atg_fbgemm_pack_quantized_matrix(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
  ) {
    _atg_fbgemm_pack_quantized_matrix ??= _dylib.lookupFunction<
            _c_atg_fbgemm_pack_quantized_matrix,
            _dart_atg_fbgemm_pack_quantized_matrix>(
        'atg_fbgemm_pack_quantized_matrix');
    return _atg_fbgemm_pack_quantized_matrix(
      arg0,
      input,
    );
  }

  _dart_atg_fbgemm_pack_quantized_matrix _atg_fbgemm_pack_quantized_matrix;

  void atg_fbgemm_pack_quantized_matrix1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    int K,
    int n,
  ) {
    _atg_fbgemm_pack_quantized_matrix1 ??= _dylib.lookupFunction<
            _c_atg_fbgemm_pack_quantized_matrix1,
            _dart_atg_fbgemm_pack_quantized_matrix1>(
        'atg_fbgemm_pack_quantized_matrix1');
    return _atg_fbgemm_pack_quantized_matrix1(
      arg0,
      input,
      K,
      n,
    );
  }

  _dart_atg_fbgemm_pack_quantized_matrix1 _atg_fbgemm_pack_quantized_matrix1;

  void atg_feature_alpha_dropout(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    double p,
    int train,
  ) {
    _atg_feature_alpha_dropout ??= _dylib.lookupFunction<
        _c_atg_feature_alpha_dropout,
        _dart_atg_feature_alpha_dropout>('atg_feature_alpha_dropout');
    return _atg_feature_alpha_dropout(
      arg0,
      input,
      p,
      train,
    );
  }

  _dart_atg_feature_alpha_dropout _atg_feature_alpha_dropout;

  void atg_feature_alpha_dropout_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    double p,
    int train,
  ) {
    _atg_feature_alpha_dropout_ ??= _dylib.lookupFunction<
        _c_atg_feature_alpha_dropout_,
        _dart_atg_feature_alpha_dropout_>('atg_feature_alpha_dropout_');
    return _atg_feature_alpha_dropout_(
      arg0,
      self,
      p,
      train,
    );
  }

  _dart_atg_feature_alpha_dropout_ _atg_feature_alpha_dropout_;

  void atg_feature_dropout(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    double p,
    int train,
  ) {
    _atg_feature_dropout ??= _dylib.lookupFunction<_c_atg_feature_dropout,
        _dart_atg_feature_dropout>('atg_feature_dropout');
    return _atg_feature_dropout(
      arg0,
      input,
      p,
      train,
    );
  }

  _dart_atg_feature_dropout _atg_feature_dropout;

  void atg_feature_dropout_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    double p,
    int train,
  ) {
    _atg_feature_dropout_ ??= _dylib.lookupFunction<_c_atg_feature_dropout_,
        _dart_atg_feature_dropout_>('atg_feature_dropout_');
    return _atg_feature_dropout_(
      arg0,
      self,
      p,
      train,
    );
  }

  _dart_atg_feature_dropout_ _atg_feature_dropout_;

  void atg_fft(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int signal_ndim,
    int normalized,
  ) {
    _atg_fft ??= _dylib.lookupFunction<_c_atg_fft, _dart_atg_fft>('atg_fft');
    return _atg_fft(
      arg0,
      self,
      signal_ndim,
      normalized,
    );
  }

  _dart_atg_fft _atg_fft;

  void atg_fill_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> value,
  ) {
    _atg_fill_ ??=
        _dylib.lookupFunction<_c_atg_fill_, _dart_atg_fill_>('atg_fill_');
    return _atg_fill_(
      arg0,
      self,
      value,
    );
  }

  _dart_atg_fill_ _atg_fill_;

  void atg_fill_1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> value,
  ) {
    _atg_fill_1 ??=
        _dylib.lookupFunction<_c_atg_fill_1, _dart_atg_fill_1>('atg_fill_1');
    return _atg_fill_1(
      arg0,
      self,
      value,
    );
  }

  _dart_atg_fill_1 _atg_fill_1;

  void atg_fill_diagonal_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> fill_value,
    int wrap,
  ) {
    _atg_fill_diagonal_ ??=
        _dylib.lookupFunction<_c_atg_fill_diagonal_, _dart_atg_fill_diagonal_>(
            'atg_fill_diagonal_');
    return _atg_fill_diagonal_(
      arg0,
      self,
      fill_value,
      wrap,
    );
  }

  _dart_atg_fill_diagonal_ _atg_fill_diagonal_;

  void atg_flatten(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int start_dim,
    int end_dim,
  ) {
    _atg_flatten ??=
        _dylib.lookupFunction<_c_atg_flatten, _dart_atg_flatten>('atg_flatten');
    return _atg_flatten(
      arg0,
      self,
      start_dim,
      end_dim,
    );
  }

  _dart_atg_flatten _atg_flatten;

  void atg_flip(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> dims_data,
    int dims_len,
  ) {
    _atg_flip ??=
        _dylib.lookupFunction<_c_atg_flip, _dart_atg_flip>('atg_flip');
    return _atg_flip(
      arg0,
      self,
      dims_data,
      dims_len,
    );
  }

  _dart_atg_flip _atg_flip;

  void atg_fliplr(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_fliplr ??=
        _dylib.lookupFunction<_c_atg_fliplr, _dart_atg_fliplr>('atg_fliplr');
    return _atg_fliplr(
      arg0,
      self,
    );
  }

  _dart_atg_fliplr _atg_fliplr;

  void atg_flipud(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_flipud ??=
        _dylib.lookupFunction<_c_atg_flipud, _dart_atg_flipud>('atg_flipud');
    return _atg_flipud(
      arg0,
      self,
    );
  }

  _dart_atg_flipud _atg_flipud;

  void atg_floor(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_floor ??=
        _dylib.lookupFunction<_c_atg_floor, _dart_atg_floor>('atg_floor');
    return _atg_floor(
      arg0,
      self,
    );
  }

  _dart_atg_floor _atg_floor;

  void atg_floor_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_floor_ ??=
        _dylib.lookupFunction<_c_atg_floor_, _dart_atg_floor_>('atg_floor_');
    return _atg_floor_(
      arg0,
      self,
    );
  }

  _dart_atg_floor_ _atg_floor_;

  void atg_floor_divide(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_floor_divide ??=
        _dylib.lookupFunction<_c_atg_floor_divide, _dart_atg_floor_divide>(
            'atg_floor_divide');
    return _atg_floor_divide(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_floor_divide _atg_floor_divide;

  void atg_floor_divide1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_floor_divide1 ??=
        _dylib.lookupFunction<_c_atg_floor_divide1, _dart_atg_floor_divide1>(
            'atg_floor_divide1');
    return _atg_floor_divide1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_floor_divide1 _atg_floor_divide1;

  void atg_floor_divide_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_floor_divide_ ??=
        _dylib.lookupFunction<_c_atg_floor_divide_, _dart_atg_floor_divide_>(
            'atg_floor_divide_');
    return _atg_floor_divide_(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_floor_divide_ _atg_floor_divide_;

  void atg_floor_divide_1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_floor_divide_1 ??=
        _dylib.lookupFunction<_c_atg_floor_divide_1, _dart_atg_floor_divide_1>(
            'atg_floor_divide_1');
    return _atg_floor_divide_1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_floor_divide_1 _atg_floor_divide_1;

  void atg_floor_divide_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_floor_divide_out ??= _dylib.lookupFunction<_c_atg_floor_divide_out,
        _dart_atg_floor_divide_out>('atg_floor_divide_out');
    return _atg_floor_divide_out(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_floor_divide_out _atg_floor_divide_out;

  void atg_floor_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_floor_out ??= _dylib
        .lookupFunction<_c_atg_floor_out, _dart_atg_floor_out>('atg_floor_out');
    return _atg_floor_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_floor_out _atg_floor_out;

  void atg_fmod(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_fmod ??=
        _dylib.lookupFunction<_c_atg_fmod, _dart_atg_fmod>('atg_fmod');
    return _atg_fmod(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_fmod _atg_fmod;

  void atg_fmod1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_fmod1 ??=
        _dylib.lookupFunction<_c_atg_fmod1, _dart_atg_fmod1>('atg_fmod1');
    return _atg_fmod1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_fmod1 _atg_fmod1;

  void atg_fmod_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_fmod_ ??=
        _dylib.lookupFunction<_c_atg_fmod_, _dart_atg_fmod_>('atg_fmod_');
    return _atg_fmod_(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_fmod_ _atg_fmod_;

  void atg_fmod_1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_fmod_1 ??=
        _dylib.lookupFunction<_c_atg_fmod_1, _dart_atg_fmod_1>('atg_fmod_1');
    return _atg_fmod_1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_fmod_1 _atg_fmod_1;

  void atg_fmod_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_fmod_out ??= _dylib
        .lookupFunction<_c_atg_fmod_out, _dart_atg_fmod_out>('atg_fmod_out');
    return _atg_fmod_out(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_fmod_out _atg_fmod_out;

  void atg_fmod_out1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_fmod_out1 ??= _dylib
        .lookupFunction<_c_atg_fmod_out1, _dart_atg_fmod_out1>('atg_fmod_out1');
    return _atg_fmod_out1(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_fmod_out1 _atg_fmod_out1;

  void atg_frac(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_frac ??=
        _dylib.lookupFunction<_c_atg_frac, _dart_atg_frac>('atg_frac');
    return _atg_frac(
      arg0,
      self,
    );
  }

  _dart_atg_frac _atg_frac;

  void atg_frac_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_frac_ ??=
        _dylib.lookupFunction<_c_atg_frac_, _dart_atg_frac_>('atg_frac_');
    return _atg_frac_(
      arg0,
      self,
    );
  }

  _dart_atg_frac_ _atg_frac_;

  void atg_frac_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_frac_out ??= _dylib
        .lookupFunction<_c_atg_frac_out, _dart_atg_frac_out>('atg_frac_out');
    return _atg_frac_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_frac_out _atg_frac_out;

  void atg_fractional_max_pool2d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    ffi.Pointer<ffi.Void> random_samples,
  ) {
    _atg_fractional_max_pool2d ??= _dylib.lookupFunction<
        _c_atg_fractional_max_pool2d,
        _dart_atg_fractional_max_pool2d>('atg_fractional_max_pool2d');
    return _atg_fractional_max_pool2d(
      arg0,
      self,
      kernel_size_data,
      kernel_size_len,
      output_size_data,
      output_size_len,
      random_samples,
    );
  }

  _dart_atg_fractional_max_pool2d _atg_fractional_max_pool2d;

  void atg_fractional_max_pool2d_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    ffi.Pointer<ffi.Void> indices,
  ) {
    _atg_fractional_max_pool2d_backward ??= _dylib.lookupFunction<
            _c_atg_fractional_max_pool2d_backward,
            _dart_atg_fractional_max_pool2d_backward>(
        'atg_fractional_max_pool2d_backward');
    return _atg_fractional_max_pool2d_backward(
      arg0,
      grad_output,
      self,
      kernel_size_data,
      kernel_size_len,
      output_size_data,
      output_size_len,
      indices,
    );
  }

  _dart_atg_fractional_max_pool2d_backward _atg_fractional_max_pool2d_backward;

  void atg_fractional_max_pool2d_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    ffi.Pointer<ffi.Void> indices,
  ) {
    _atg_fractional_max_pool2d_backward_out ??= _dylib.lookupFunction<
            _c_atg_fractional_max_pool2d_backward_out,
            _dart_atg_fractional_max_pool2d_backward_out>(
        'atg_fractional_max_pool2d_backward_out');
    return _atg_fractional_max_pool2d_backward_out(
      arg0,
      grad_input,
      grad_output,
      self,
      kernel_size_data,
      kernel_size_len,
      output_size_data,
      output_size_len,
      indices,
    );
  }

  _dart_atg_fractional_max_pool2d_backward_out
      _atg_fractional_max_pool2d_backward_out;

  void atg_fractional_max_pool2d_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> output,
    ffi.Pointer<ffi.Void> indices,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    ffi.Pointer<ffi.Void> random_samples,
  ) {
    _atg_fractional_max_pool2d_out ??= _dylib.lookupFunction<
        _c_atg_fractional_max_pool2d_out,
        _dart_atg_fractional_max_pool2d_out>('atg_fractional_max_pool2d_out');
    return _atg_fractional_max_pool2d_out(
      arg0,
      output,
      indices,
      self,
      kernel_size_data,
      kernel_size_len,
      output_size_data,
      output_size_len,
      random_samples,
    );
  }

  _dart_atg_fractional_max_pool2d_out _atg_fractional_max_pool2d_out;

  void atg_fractional_max_pool3d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    ffi.Pointer<ffi.Void> random_samples,
  ) {
    _atg_fractional_max_pool3d ??= _dylib.lookupFunction<
        _c_atg_fractional_max_pool3d,
        _dart_atg_fractional_max_pool3d>('atg_fractional_max_pool3d');
    return _atg_fractional_max_pool3d(
      arg0,
      self,
      kernel_size_data,
      kernel_size_len,
      output_size_data,
      output_size_len,
      random_samples,
    );
  }

  _dart_atg_fractional_max_pool3d _atg_fractional_max_pool3d;

  void atg_fractional_max_pool3d_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    ffi.Pointer<ffi.Void> indices,
  ) {
    _atg_fractional_max_pool3d_backward ??= _dylib.lookupFunction<
            _c_atg_fractional_max_pool3d_backward,
            _dart_atg_fractional_max_pool3d_backward>(
        'atg_fractional_max_pool3d_backward');
    return _atg_fractional_max_pool3d_backward(
      arg0,
      grad_output,
      self,
      kernel_size_data,
      kernel_size_len,
      output_size_data,
      output_size_len,
      indices,
    );
  }

  _dart_atg_fractional_max_pool3d_backward _atg_fractional_max_pool3d_backward;

  void atg_fractional_max_pool3d_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    ffi.Pointer<ffi.Void> indices,
  ) {
    _atg_fractional_max_pool3d_backward_out ??= _dylib.lookupFunction<
            _c_atg_fractional_max_pool3d_backward_out,
            _dart_atg_fractional_max_pool3d_backward_out>(
        'atg_fractional_max_pool3d_backward_out');
    return _atg_fractional_max_pool3d_backward_out(
      arg0,
      grad_input,
      grad_output,
      self,
      kernel_size_data,
      kernel_size_len,
      output_size_data,
      output_size_len,
      indices,
    );
  }

  _dart_atg_fractional_max_pool3d_backward_out
      _atg_fractional_max_pool3d_backward_out;

  void atg_fractional_max_pool3d_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> output,
    ffi.Pointer<ffi.Void> indices,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    ffi.Pointer<ffi.Void> random_samples,
  ) {
    _atg_fractional_max_pool3d_out ??= _dylib.lookupFunction<
        _c_atg_fractional_max_pool3d_out,
        _dart_atg_fractional_max_pool3d_out>('atg_fractional_max_pool3d_out');
    return _atg_fractional_max_pool3d_out(
      arg0,
      output,
      indices,
      self,
      kernel_size_data,
      kernel_size_len,
      output_size_data,
      output_size_len,
      random_samples,
    );
  }

  _dart_atg_fractional_max_pool3d_out _atg_fractional_max_pool3d_out;

  void atg_frobenius_norm(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_frobenius_norm ??=
        _dylib.lookupFunction<_c_atg_frobenius_norm, _dart_atg_frobenius_norm>(
            'atg_frobenius_norm');
    return _atg_frobenius_norm(
      arg0,
      self,
    );
  }

  _dart_atg_frobenius_norm _atg_frobenius_norm;

  void atg_frobenius_norm1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> dim_data,
    int dim_len,
    int keepdim,
  ) {
    _atg_frobenius_norm1 ??= _dylib.lookupFunction<_c_atg_frobenius_norm1,
        _dart_atg_frobenius_norm1>('atg_frobenius_norm1');
    return _atg_frobenius_norm1(
      arg0,
      self,
      dim_data,
      dim_len,
      keepdim,
    );
  }

  _dart_atg_frobenius_norm1 _atg_frobenius_norm1;

  void atg_frobenius_norm_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> dim_data,
    int dim_len,
    int keepdim,
  ) {
    _atg_frobenius_norm_out ??= _dylib.lookupFunction<_c_atg_frobenius_norm_out,
        _dart_atg_frobenius_norm_out>('atg_frobenius_norm_out');
    return _atg_frobenius_norm_out(
      arg0,
      out,
      self,
      dim_data,
      dim_len,
      keepdim,
    );
  }

  _dart_atg_frobenius_norm_out _atg_frobenius_norm_out;

  void atg_from_file(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Int8> filename_ptr,
    int filename_len,
    int shared,
    int size_v,
    int size_null,
    int options_kind,
    int options_device,
  ) {
    _atg_from_file ??= _dylib
        .lookupFunction<_c_atg_from_file, _dart_atg_from_file>('atg_from_file');
    return _atg_from_file(
      arg0,
      filename_ptr,
      filename_len,
      shared,
      size_v,
      size_null,
      options_kind,
      options_device,
    );
  }

  _dart_atg_from_file _atg_from_file;

  void atg_full(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
    ffi.Pointer<ffi.Void> fill_value,
    int options_kind,
    int options_device,
  ) {
    _atg_full ??=
        _dylib.lookupFunction<_c_atg_full, _dart_atg_full>('atg_full');
    return _atg_full(
      arg0,
      size_data,
      size_len,
      fill_value,
      options_kind,
      options_device,
    );
  }

  _dart_atg_full _atg_full;

  void atg_full_like(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> fill_value,
  ) {
    _atg_full_like ??= _dylib
        .lookupFunction<_c_atg_full_like, _dart_atg_full_like>('atg_full_like');
    return _atg_full_like(
      arg0,
      self,
      fill_value,
    );
  }

  _dart_atg_full_like _atg_full_like;

  void atg_full_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
    ffi.Pointer<ffi.Void> fill_value,
  ) {
    _atg_full_out ??= _dylib
        .lookupFunction<_c_atg_full_out, _dart_atg_full_out>('atg_full_out');
    return _atg_full_out(
      arg0,
      out,
      size_data,
      size_len,
      fill_value,
    );
  }

  _dart_atg_full_out _atg_full_out;

  void atg_gather(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    ffi.Pointer<ffi.Void> index,
    int sparse_grad,
  ) {
    _atg_gather ??=
        _dylib.lookupFunction<_c_atg_gather, _dart_atg_gather>('atg_gather');
    return _atg_gather(
      arg0,
      self,
      dim,
      index,
      sparse_grad,
    );
  }

  _dart_atg_gather _atg_gather;

  void atg_gather_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    int dim,
    ffi.Pointer<ffi.Void> index,
    int sparse_grad,
  ) {
    _atg_gather_out ??=
        _dylib.lookupFunction<_c_atg_gather_out, _dart_atg_gather_out>(
            'atg_gather_out');
    return _atg_gather_out(
      arg0,
      out,
      self,
      dim,
      index,
      sparse_grad,
    );
  }

  _dart_atg_gather_out _atg_gather_out;

  void atg_ge(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_ge ??= _dylib.lookupFunction<_c_atg_ge, _dart_atg_ge>('atg_ge');
    return _atg_ge(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_ge _atg_ge;

  void atg_ge1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_ge1 ??= _dylib.lookupFunction<_c_atg_ge1, _dart_atg_ge1>('atg_ge1');
    return _atg_ge1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_ge1 _atg_ge1;

  void atg_ge_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_ge_ ??= _dylib.lookupFunction<_c_atg_ge_, _dart_atg_ge_>('atg_ge_');
    return _atg_ge_(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_ge_ _atg_ge_;

  void atg_ge_1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_ge_1 ??=
        _dylib.lookupFunction<_c_atg_ge_1, _dart_atg_ge_1>('atg_ge_1');
    return _atg_ge_1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_ge_1 _atg_ge_1;

  void atg_ge_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_ge_out ??=
        _dylib.lookupFunction<_c_atg_ge_out, _dart_atg_ge_out>('atg_ge_out');
    return _atg_ge_out(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_ge_out _atg_ge_out;

  void atg_ge_out1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_ge_out1 ??=
        _dylib.lookupFunction<_c_atg_ge_out1, _dart_atg_ge_out1>('atg_ge_out1');
    return _atg_ge_out1(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_ge_out1 _atg_ge_out1;

  void atg_gelu(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_gelu ??=
        _dylib.lookupFunction<_c_atg_gelu, _dart_atg_gelu>('atg_gelu');
    return _atg_gelu(
      arg0,
      self,
    );
  }

  _dart_atg_gelu _atg_gelu;

  void atg_gelu_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_gelu_backward ??=
        _dylib.lookupFunction<_c_atg_gelu_backward, _dart_atg_gelu_backward>(
            'atg_gelu_backward');
    return _atg_gelu_backward(
      arg0,
      grad,
      self,
    );
  }

  _dart_atg_gelu_backward _atg_gelu_backward;

  void atg_geometric_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    double p,
  ) {
    _atg_geometric_ ??=
        _dylib.lookupFunction<_c_atg_geometric_, _dart_atg_geometric_>(
            'atg_geometric_');
    return _atg_geometric_(
      arg0,
      self,
      p,
    );
  }

  _dart_atg_geometric_ _atg_geometric_;

  void atg_geqrf(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_geqrf ??=
        _dylib.lookupFunction<_c_atg_geqrf, _dart_atg_geqrf>('atg_geqrf');
    return _atg_geqrf(
      arg0,
      self,
    );
  }

  _dart_atg_geqrf _atg_geqrf;

  void atg_geqrf_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> a,
    ffi.Pointer<ffi.Void> tau,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_geqrf_out ??= _dylib
        .lookupFunction<_c_atg_geqrf_out, _dart_atg_geqrf_out>('atg_geqrf_out');
    return _atg_geqrf_out(
      arg0,
      a,
      tau,
      self,
    );
  }

  _dart_atg_geqrf_out _atg_geqrf_out;

  void atg_ger(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> vec2,
  ) {
    _atg_ger ??= _dylib.lookupFunction<_c_atg_ger, _dart_atg_ger>('atg_ger');
    return _atg_ger(
      arg0,
      self,
      vec2,
    );
  }

  _dart_atg_ger _atg_ger;

  void atg_ger_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> vec2,
  ) {
    _atg_ger_out ??=
        _dylib.lookupFunction<_c_atg_ger_out, _dart_atg_ger_out>('atg_ger_out');
    return _atg_ger_out(
      arg0,
      out,
      self,
      vec2,
    );
  }

  _dart_atg_ger_out _atg_ger_out;

  void atg_glu(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
  ) {
    _atg_glu ??= _dylib.lookupFunction<_c_atg_glu, _dart_atg_glu>('atg_glu');
    return _atg_glu(
      arg0,
      self,
      dim,
    );
  }

  _dart_atg_glu _atg_glu;

  void atg_glu_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    int dim,
  ) {
    _atg_glu_backward ??=
        _dylib.lookupFunction<_c_atg_glu_backward, _dart_atg_glu_backward>(
            'atg_glu_backward');
    return _atg_glu_backward(
      arg0,
      grad_output,
      self,
      dim,
    );
  }

  _dart_atg_glu_backward _atg_glu_backward;

  void atg_glu_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    int dim,
  ) {
    _atg_glu_backward_out ??= _dylib.lookupFunction<_c_atg_glu_backward_out,
        _dart_atg_glu_backward_out>('atg_glu_backward_out');
    return _atg_glu_backward_out(
      arg0,
      grad_input,
      grad_output,
      self,
      dim,
    );
  }

  _dart_atg_glu_backward_out _atg_glu_backward_out;

  void atg_glu_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    int dim,
  ) {
    _atg_glu_out ??=
        _dylib.lookupFunction<_c_atg_glu_out, _dart_atg_glu_out>('atg_glu_out');
    return _atg_glu_out(
      arg0,
      out,
      self,
      dim,
    );
  }

  _dart_atg_glu_out _atg_glu_out;

  void atg_grad(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_grad ??=
        _dylib.lookupFunction<_c_atg_grad, _dart_atg_grad>('atg_grad');
    return _atg_grad(
      arg0,
      self,
    );
  }

  _dart_atg_grad _atg_grad;

  void atg_grid_sampler(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> grid,
    int interpolation_mode,
    int padding_mode,
    int align_corners,
  ) {
    _atg_grid_sampler ??=
        _dylib.lookupFunction<_c_atg_grid_sampler, _dart_atg_grid_sampler>(
            'atg_grid_sampler');
    return _atg_grid_sampler(
      arg0,
      input,
      grid,
      interpolation_mode,
      padding_mode,
      align_corners,
    );
  }

  _dart_atg_grid_sampler _atg_grid_sampler;

  void atg_grid_sampler_2d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> grid,
    int interpolation_mode,
    int padding_mode,
    int align_corners,
  ) {
    _atg_grid_sampler_2d ??= _dylib.lookupFunction<_c_atg_grid_sampler_2d,
        _dart_atg_grid_sampler_2d>('atg_grid_sampler_2d');
    return _atg_grid_sampler_2d(
      arg0,
      input,
      grid,
      interpolation_mode,
      padding_mode,
      align_corners,
    );
  }

  _dart_atg_grid_sampler_2d _atg_grid_sampler_2d;

  void atg_grid_sampler_2d_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> grid,
    int interpolation_mode,
    int padding_mode,
    int align_corners,
  ) {
    _atg_grid_sampler_2d_backward ??= _dylib.lookupFunction<
        _c_atg_grid_sampler_2d_backward,
        _dart_atg_grid_sampler_2d_backward>('atg_grid_sampler_2d_backward');
    return _atg_grid_sampler_2d_backward(
      arg0,
      grad_output,
      input,
      grid,
      interpolation_mode,
      padding_mode,
      align_corners,
    );
  }

  _dart_atg_grid_sampler_2d_backward _atg_grid_sampler_2d_backward;

  void atg_grid_sampler_3d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> grid,
    int interpolation_mode,
    int padding_mode,
    int align_corners,
  ) {
    _atg_grid_sampler_3d ??= _dylib.lookupFunction<_c_atg_grid_sampler_3d,
        _dart_atg_grid_sampler_3d>('atg_grid_sampler_3d');
    return _atg_grid_sampler_3d(
      arg0,
      input,
      grid,
      interpolation_mode,
      padding_mode,
      align_corners,
    );
  }

  _dart_atg_grid_sampler_3d _atg_grid_sampler_3d;

  void atg_grid_sampler_3d_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> grid,
    int interpolation_mode,
    int padding_mode,
    int align_corners,
  ) {
    _atg_grid_sampler_3d_backward ??= _dylib.lookupFunction<
        _c_atg_grid_sampler_3d_backward,
        _dart_atg_grid_sampler_3d_backward>('atg_grid_sampler_3d_backward');
    return _atg_grid_sampler_3d_backward(
      arg0,
      grad_output,
      input,
      grid,
      interpolation_mode,
      padding_mode,
      align_corners,
    );
  }

  _dart_atg_grid_sampler_3d_backward _atg_grid_sampler_3d_backward;

  void atg_group_norm(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    int num_groups,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> bias,
    double eps,
    int cudnn_enabled,
  ) {
    _atg_group_norm ??=
        _dylib.lookupFunction<_c_atg_group_norm, _dart_atg_group_norm>(
            'atg_group_norm');
    return _atg_group_norm(
      arg0,
      input,
      num_groups,
      weight,
      bias,
      eps,
      cudnn_enabled,
    );
  }

  _dart_atg_group_norm _atg_group_norm;

  void atg_gru(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> hx,
    ffi.Pointer<ffi.Pointer<ffi.Void>> params_data,
    int params_len,
    int has_biases,
    int num_layers,
    double dropout,
    int train,
    int bidirectional,
    int batch_first,
  ) {
    _atg_gru ??= _dylib.lookupFunction<_c_atg_gru, _dart_atg_gru>('atg_gru');
    return _atg_gru(
      arg0,
      input,
      hx,
      params_data,
      params_len,
      has_biases,
      num_layers,
      dropout,
      train,
      bidirectional,
      batch_first,
    );
  }

  _dart_atg_gru _atg_gru;

  void atg_gru1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.Void> batch_sizes,
    ffi.Pointer<ffi.Void> hx,
    ffi.Pointer<ffi.Pointer<ffi.Void>> params_data,
    int params_len,
    int has_biases,
    int num_layers,
    double dropout,
    int train,
    int bidirectional,
  ) {
    _atg_gru1 ??=
        _dylib.lookupFunction<_c_atg_gru1, _dart_atg_gru1>('atg_gru1');
    return _atg_gru1(
      arg0,
      data,
      batch_sizes,
      hx,
      params_data,
      params_len,
      has_biases,
      num_layers,
      dropout,
      train,
      bidirectional,
    );
  }

  _dart_atg_gru1 _atg_gru1;

  void atg_gru_cell(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> hx,
    ffi.Pointer<ffi.Void> w_ih,
    ffi.Pointer<ffi.Void> w_hh,
    ffi.Pointer<ffi.Void> b_ih,
    ffi.Pointer<ffi.Void> b_hh,
  ) {
    _atg_gru_cell ??= _dylib
        .lookupFunction<_c_atg_gru_cell, _dart_atg_gru_cell>('atg_gru_cell');
    return _atg_gru_cell(
      arg0,
      input,
      hx,
      w_ih,
      w_hh,
      b_ih,
      b_hh,
    );
  }

  _dart_atg_gru_cell _atg_gru_cell;

  void atg_gt(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_gt ??= _dylib.lookupFunction<_c_atg_gt, _dart_atg_gt>('atg_gt');
    return _atg_gt(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_gt _atg_gt;

  void atg_gt1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_gt1 ??= _dylib.lookupFunction<_c_atg_gt1, _dart_atg_gt1>('atg_gt1');
    return _atg_gt1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_gt1 _atg_gt1;

  void atg_gt_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_gt_ ??= _dylib.lookupFunction<_c_atg_gt_, _dart_atg_gt_>('atg_gt_');
    return _atg_gt_(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_gt_ _atg_gt_;

  void atg_gt_1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_gt_1 ??=
        _dylib.lookupFunction<_c_atg_gt_1, _dart_atg_gt_1>('atg_gt_1');
    return _atg_gt_1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_gt_1 _atg_gt_1;

  void atg_gt_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_gt_out ??=
        _dylib.lookupFunction<_c_atg_gt_out, _dart_atg_gt_out>('atg_gt_out');
    return _atg_gt_out(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_gt_out _atg_gt_out;

  void atg_gt_out1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_gt_out1 ??=
        _dylib.lookupFunction<_c_atg_gt_out1, _dart_atg_gt_out1>('atg_gt_out1');
    return _atg_gt_out1(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_gt_out1 _atg_gt_out1;

  void atg_hamming_window(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    int window_length,
    int options_kind,
    int options_device,
  ) {
    _atg_hamming_window ??=
        _dylib.lookupFunction<_c_atg_hamming_window, _dart_atg_hamming_window>(
            'atg_hamming_window');
    return _atg_hamming_window(
      arg0,
      window_length,
      options_kind,
      options_device,
    );
  }

  _dart_atg_hamming_window _atg_hamming_window;

  void atg_hamming_window1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    int window_length,
    int periodic,
    int options_kind,
    int options_device,
  ) {
    _atg_hamming_window1 ??= _dylib.lookupFunction<_c_atg_hamming_window1,
        _dart_atg_hamming_window1>('atg_hamming_window1');
    return _atg_hamming_window1(
      arg0,
      window_length,
      periodic,
      options_kind,
      options_device,
    );
  }

  _dart_atg_hamming_window1 _atg_hamming_window1;

  void atg_hamming_window2(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    int window_length,
    int periodic,
    double alpha,
    int options_kind,
    int options_device,
  ) {
    _atg_hamming_window2 ??= _dylib.lookupFunction<_c_atg_hamming_window2,
        _dart_atg_hamming_window2>('atg_hamming_window2');
    return _atg_hamming_window2(
      arg0,
      window_length,
      periodic,
      alpha,
      options_kind,
      options_device,
    );
  }

  _dart_atg_hamming_window2 _atg_hamming_window2;

  void atg_hamming_window3(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    int window_length,
    int periodic,
    double alpha,
    double beta,
    int options_kind,
    int options_device,
  ) {
    _atg_hamming_window3 ??= _dylib.lookupFunction<_c_atg_hamming_window3,
        _dart_atg_hamming_window3>('atg_hamming_window3');
    return _atg_hamming_window3(
      arg0,
      window_length,
      periodic,
      alpha,
      beta,
      options_kind,
      options_device,
    );
  }

  _dart_atg_hamming_window3 _atg_hamming_window3;

  void atg_hann_window(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    int window_length,
    int options_kind,
    int options_device,
  ) {
    _atg_hann_window ??=
        _dylib.lookupFunction<_c_atg_hann_window, _dart_atg_hann_window>(
            'atg_hann_window');
    return _atg_hann_window(
      arg0,
      window_length,
      options_kind,
      options_device,
    );
  }

  _dart_atg_hann_window _atg_hann_window;

  void atg_hann_window1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    int window_length,
    int periodic,
    int options_kind,
    int options_device,
  ) {
    _atg_hann_window1 ??=
        _dylib.lookupFunction<_c_atg_hann_window1, _dart_atg_hann_window1>(
            'atg_hann_window1');
    return _atg_hann_window1(
      arg0,
      window_length,
      periodic,
      options_kind,
      options_device,
    );
  }

  _dart_atg_hann_window1 _atg_hann_window1;

  void atg_hardshrink(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_hardshrink ??=
        _dylib.lookupFunction<_c_atg_hardshrink, _dart_atg_hardshrink>(
            'atg_hardshrink');
    return _atg_hardshrink(
      arg0,
      self,
    );
  }

  _dart_atg_hardshrink _atg_hardshrink;

  void atg_hardshrink_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> lambd,
  ) {
    _atg_hardshrink_backward ??= _dylib.lookupFunction<
        _c_atg_hardshrink_backward,
        _dart_atg_hardshrink_backward>('atg_hardshrink_backward');
    return _atg_hardshrink_backward(
      arg0,
      grad_out,
      self,
      lambd,
    );
  }

  _dart_atg_hardshrink_backward _atg_hardshrink_backward;

  void atg_hardsigmoid(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_hardsigmoid ??=
        _dylib.lookupFunction<_c_atg_hardsigmoid, _dart_atg_hardsigmoid>(
            'atg_hardsigmoid');
    return _atg_hardsigmoid(
      arg0,
      self,
    );
  }

  _dart_atg_hardsigmoid _atg_hardsigmoid;

  void atg_hardsigmoid_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_hardsigmoid_ ??=
        _dylib.lookupFunction<_c_atg_hardsigmoid_, _dart_atg_hardsigmoid_>(
            'atg_hardsigmoid_');
    return _atg_hardsigmoid_(
      arg0,
      self,
    );
  }

  _dart_atg_hardsigmoid_ _atg_hardsigmoid_;

  void atg_hardsigmoid_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_hardsigmoid_backward ??= _dylib.lookupFunction<
        _c_atg_hardsigmoid_backward,
        _dart_atg_hardsigmoid_backward>('atg_hardsigmoid_backward');
    return _atg_hardsigmoid_backward(
      arg0,
      grad_output,
      self,
    );
  }

  _dart_atg_hardsigmoid_backward _atg_hardsigmoid_backward;

  void atg_hardsigmoid_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_hardsigmoid_out ??= _dylib.lookupFunction<_c_atg_hardsigmoid_out,
        _dart_atg_hardsigmoid_out>('atg_hardsigmoid_out');
    return _atg_hardsigmoid_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_hardsigmoid_out _atg_hardsigmoid_out;

  void atg_hardswish(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_hardswish ??= _dylib
        .lookupFunction<_c_atg_hardswish, _dart_atg_hardswish>('atg_hardswish');
    return _atg_hardswish(
      arg0,
      self,
    );
  }

  _dart_atg_hardswish _atg_hardswish;

  void atg_hardswish_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_hardswish_ ??=
        _dylib.lookupFunction<_c_atg_hardswish_, _dart_atg_hardswish_>(
            'atg_hardswish_');
    return _atg_hardswish_(
      arg0,
      self,
    );
  }

  _dart_atg_hardswish_ _atg_hardswish_;

  void atg_hardswish_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_hardswish_backward ??= _dylib.lookupFunction<_c_atg_hardswish_backward,
        _dart_atg_hardswish_backward>('atg_hardswish_backward');
    return _atg_hardswish_backward(
      arg0,
      grad_output,
      self,
    );
  }

  _dart_atg_hardswish_backward _atg_hardswish_backward;

  void atg_hardswish_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_hardswish_out ??=
        _dylib.lookupFunction<_c_atg_hardswish_out, _dart_atg_hardswish_out>(
            'atg_hardswish_out');
    return _atg_hardswish_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_hardswish_out _atg_hardswish_out;

  void atg_hardtanh(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_hardtanh ??= _dylib
        .lookupFunction<_c_atg_hardtanh, _dart_atg_hardtanh>('atg_hardtanh');
    return _atg_hardtanh(
      arg0,
      self,
    );
  }

  _dart_atg_hardtanh _atg_hardtanh;

  void atg_hardtanh_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_hardtanh_ ??= _dylib
        .lookupFunction<_c_atg_hardtanh_, _dart_atg_hardtanh_>('atg_hardtanh_');
    return _atg_hardtanh_(
      arg0,
      self,
    );
  }

  _dart_atg_hardtanh_ _atg_hardtanh_;

  void atg_hardtanh_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> min_val,
    ffi.Pointer<ffi.Void> max_val,
  ) {
    _atg_hardtanh_backward ??= _dylib.lookupFunction<_c_atg_hardtanh_backward,
        _dart_atg_hardtanh_backward>('atg_hardtanh_backward');
    return _atg_hardtanh_backward(
      arg0,
      grad_output,
      self,
      min_val,
      max_val,
    );
  }

  _dart_atg_hardtanh_backward _atg_hardtanh_backward;

  void atg_hardtanh_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> min_val,
    ffi.Pointer<ffi.Void> max_val,
  ) {
    _atg_hardtanh_backward_out ??= _dylib.lookupFunction<
        _c_atg_hardtanh_backward_out,
        _dart_atg_hardtanh_backward_out>('atg_hardtanh_backward_out');
    return _atg_hardtanh_backward_out(
      arg0,
      grad_input,
      grad_output,
      self,
      min_val,
      max_val,
    );
  }

  _dart_atg_hardtanh_backward_out _atg_hardtanh_backward_out;

  void atg_hardtanh_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_hardtanh_out ??=
        _dylib.lookupFunction<_c_atg_hardtanh_out, _dart_atg_hardtanh_out>(
            'atg_hardtanh_out');
    return _atg_hardtanh_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_hardtanh_out _atg_hardtanh_out;

  void atg_hinge_embedding_loss(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    double margin,
    int reduction,
  ) {
    _atg_hinge_embedding_loss ??= _dylib.lookupFunction<
        _c_atg_hinge_embedding_loss,
        _dart_atg_hinge_embedding_loss>('atg_hinge_embedding_loss');
    return _atg_hinge_embedding_loss(
      arg0,
      self,
      target,
      margin,
      reduction,
    );
  }

  _dart_atg_hinge_embedding_loss _atg_hinge_embedding_loss;

  void atg_histc(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int bins,
  ) {
    _atg_histc ??=
        _dylib.lookupFunction<_c_atg_histc, _dart_atg_histc>('atg_histc');
    return _atg_histc(
      arg0,
      self,
      bins,
    );
  }

  _dart_atg_histc _atg_histc;

  void atg_histc_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    int bins,
  ) {
    _atg_histc_out ??= _dylib
        .lookupFunction<_c_atg_histc_out, _dart_atg_histc_out>('atg_histc_out');
    return _atg_histc_out(
      arg0,
      out,
      self,
      bins,
    );
  }

  _dart_atg_histc_out _atg_histc_out;

  void atg_hspmm(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> mat1,
    ffi.Pointer<ffi.Void> mat2,
  ) {
    _atg_hspmm ??=
        _dylib.lookupFunction<_c_atg_hspmm, _dart_atg_hspmm>('atg_hspmm');
    return _atg_hspmm(
      arg0,
      mat1,
      mat2,
    );
  }

  _dart_atg_hspmm _atg_hspmm;

  void atg_hspmm_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> mat1,
    ffi.Pointer<ffi.Void> mat2,
  ) {
    _atg_hspmm_out ??= _dylib
        .lookupFunction<_c_atg_hspmm_out, _dart_atg_hspmm_out>('atg_hspmm_out');
    return _atg_hspmm_out(
      arg0,
      out,
      mat1,
      mat2,
    );
  }

  _dart_atg_hspmm_out _atg_hspmm_out;

  void atg_ifft(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int signal_ndim,
    int normalized,
  ) {
    _atg_ifft ??=
        _dylib.lookupFunction<_c_atg_ifft, _dart_atg_ifft>('atg_ifft');
    return _atg_ifft(
      arg0,
      self,
      signal_ndim,
      normalized,
    );
  }

  _dart_atg_ifft _atg_ifft;

  void atg_im2col(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
  ) {
    _atg_im2col ??=
        _dylib.lookupFunction<_c_atg_im2col, _dart_atg_im2col>('atg_im2col');
    return _atg_im2col(
      arg0,
      self,
      kernel_size_data,
      kernel_size_len,
      dilation_data,
      dilation_len,
      padding_data,
      padding_len,
      stride_data,
      stride_len,
    );
  }

  _dart_atg_im2col _atg_im2col;

  void atg_im2col_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Int64> input_size_data,
    int input_size_len,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
  ) {
    _atg_im2col_backward ??= _dylib.lookupFunction<_c_atg_im2col_backward,
        _dart_atg_im2col_backward>('atg_im2col_backward');
    return _atg_im2col_backward(
      arg0,
      grad_output,
      input_size_data,
      input_size_len,
      kernel_size_data,
      kernel_size_len,
      dilation_data,
      dilation_len,
      padding_data,
      padding_len,
      stride_data,
      stride_len,
    );
  }

  _dart_atg_im2col_backward _atg_im2col_backward;

  void atg_im2col_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Int64> input_size_data,
    int input_size_len,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
  ) {
    _atg_im2col_backward_out ??= _dylib.lookupFunction<
        _c_atg_im2col_backward_out,
        _dart_atg_im2col_backward_out>('atg_im2col_backward_out');
    return _atg_im2col_backward_out(
      arg0,
      grad_input,
      grad_output,
      input_size_data,
      input_size_len,
      kernel_size_data,
      kernel_size_len,
      dilation_data,
      dilation_len,
      padding_data,
      padding_len,
      stride_data,
      stride_len,
    );
  }

  _dart_atg_im2col_backward_out _atg_im2col_backward_out;

  void atg_im2col_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
  ) {
    _atg_im2col_out ??=
        _dylib.lookupFunction<_c_atg_im2col_out, _dart_atg_im2col_out>(
            'atg_im2col_out');
    return _atg_im2col_out(
      arg0,
      out,
      self,
      kernel_size_data,
      kernel_size_len,
      dilation_data,
      dilation_len,
      padding_data,
      padding_len,
      stride_data,
      stride_len,
    );
  }

  _dart_atg_im2col_out _atg_im2col_out;

  void atg_imag(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_imag ??=
        _dylib.lookupFunction<_c_atg_imag, _dart_atg_imag>('atg_imag');
    return _atg_imag(
      arg0,
      self,
    );
  }

  _dart_atg_imag _atg_imag;

  void atg_index(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Pointer<ffi.Void>> indices_data,
    int indices_len,
  ) {
    _atg_index ??=
        _dylib.lookupFunction<_c_atg_index, _dart_atg_index>('atg_index');
    return _atg_index(
      arg0,
      self,
      indices_data,
      indices_len,
    );
  }

  _dart_atg_index _atg_index;

  void atg_index_add(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    ffi.Pointer<ffi.Void> index,
    ffi.Pointer<ffi.Void> source,
  ) {
    _atg_index_add ??= _dylib
        .lookupFunction<_c_atg_index_add, _dart_atg_index_add>('atg_index_add');
    return _atg_index_add(
      arg0,
      self,
      dim,
      index,
      source,
    );
  }

  _dart_atg_index_add _atg_index_add;

  void atg_index_add_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    ffi.Pointer<ffi.Void> index,
    ffi.Pointer<ffi.Void> source,
  ) {
    _atg_index_add_ ??=
        _dylib.lookupFunction<_c_atg_index_add_, _dart_atg_index_add_>(
            'atg_index_add_');
    return _atg_index_add_(
      arg0,
      self,
      dim,
      index,
      source,
    );
  }

  _dart_atg_index_add_ _atg_index_add_;

  void atg_index_copy(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    ffi.Pointer<ffi.Void> index,
    ffi.Pointer<ffi.Void> source,
  ) {
    _atg_index_copy ??=
        _dylib.lookupFunction<_c_atg_index_copy, _dart_atg_index_copy>(
            'atg_index_copy');
    return _atg_index_copy(
      arg0,
      self,
      dim,
      index,
      source,
    );
  }

  _dart_atg_index_copy _atg_index_copy;

  void atg_index_copy_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    ffi.Pointer<ffi.Void> index,
    ffi.Pointer<ffi.Void> source,
  ) {
    _atg_index_copy_ ??=
        _dylib.lookupFunction<_c_atg_index_copy_, _dart_atg_index_copy_>(
            'atg_index_copy_');
    return _atg_index_copy_(
      arg0,
      self,
      dim,
      index,
      source,
    );
  }

  _dart_atg_index_copy_ _atg_index_copy_;

  void atg_index_fill(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    ffi.Pointer<ffi.Void> index,
    ffi.Pointer<ffi.Void> value,
  ) {
    _atg_index_fill ??=
        _dylib.lookupFunction<_c_atg_index_fill, _dart_atg_index_fill>(
            'atg_index_fill');
    return _atg_index_fill(
      arg0,
      self,
      dim,
      index,
      value,
    );
  }

  _dart_atg_index_fill _atg_index_fill;

  void atg_index_fill1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    ffi.Pointer<ffi.Void> index,
    ffi.Pointer<ffi.Void> value,
  ) {
    _atg_index_fill1 ??=
        _dylib.lookupFunction<_c_atg_index_fill1, _dart_atg_index_fill1>(
            'atg_index_fill1');
    return _atg_index_fill1(
      arg0,
      self,
      dim,
      index,
      value,
    );
  }

  _dart_atg_index_fill1 _atg_index_fill1;

  void atg_index_fill_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    ffi.Pointer<ffi.Void> index,
    ffi.Pointer<ffi.Void> value,
  ) {
    _atg_index_fill_ ??=
        _dylib.lookupFunction<_c_atg_index_fill_, _dart_atg_index_fill_>(
            'atg_index_fill_');
    return _atg_index_fill_(
      arg0,
      self,
      dim,
      index,
      value,
    );
  }

  _dart_atg_index_fill_ _atg_index_fill_;

  void atg_index_fill_1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    ffi.Pointer<ffi.Void> index,
    ffi.Pointer<ffi.Void> value,
  ) {
    _atg_index_fill_1 ??=
        _dylib.lookupFunction<_c_atg_index_fill_1, _dart_atg_index_fill_1>(
            'atg_index_fill_1');
    return _atg_index_fill_1(
      arg0,
      self,
      dim,
      index,
      value,
    );
  }

  _dart_atg_index_fill_1 _atg_index_fill_1;

  void atg_index_put(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Pointer<ffi.Void>> indices_data,
    int indices_len,
    ffi.Pointer<ffi.Void> values,
    int accumulate,
  ) {
    _atg_index_put ??= _dylib
        .lookupFunction<_c_atg_index_put, _dart_atg_index_put>('atg_index_put');
    return _atg_index_put(
      arg0,
      self,
      indices_data,
      indices_len,
      values,
      accumulate,
    );
  }

  _dart_atg_index_put _atg_index_put;

  void atg_index_put_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Pointer<ffi.Void>> indices_data,
    int indices_len,
    ffi.Pointer<ffi.Void> values,
    int accumulate,
  ) {
    _atg_index_put_ ??=
        _dylib.lookupFunction<_c_atg_index_put_, _dart_atg_index_put_>(
            'atg_index_put_');
    return _atg_index_put_(
      arg0,
      self,
      indices_data,
      indices_len,
      values,
      accumulate,
    );
  }

  _dart_atg_index_put_ _atg_index_put_;

  void atg_index_select(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    ffi.Pointer<ffi.Void> index,
  ) {
    _atg_index_select ??=
        _dylib.lookupFunction<_c_atg_index_select, _dart_atg_index_select>(
            'atg_index_select');
    return _atg_index_select(
      arg0,
      self,
      dim,
      index,
    );
  }

  _dart_atg_index_select _atg_index_select;

  void atg_index_select_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    int dim,
    ffi.Pointer<ffi.Void> index,
  ) {
    _atg_index_select_out ??= _dylib.lookupFunction<_c_atg_index_select_out,
        _dart_atg_index_select_out>('atg_index_select_out');
    return _atg_index_select_out(
      arg0,
      out,
      self,
      dim,
      index,
    );
  }

  _dart_atg_index_select_out _atg_index_select_out;

  void atg_indices(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_indices ??=
        _dylib.lookupFunction<_c_atg_indices, _dart_atg_indices>('atg_indices');
    return _atg_indices(
      arg0,
      self,
    );
  }

  _dart_atg_indices _atg_indices;

  void atg_instance_norm(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> bias,
    ffi.Pointer<ffi.Void> running_mean,
    ffi.Pointer<ffi.Void> running_var,
    int use_input_stats,
    double momentum,
    double eps,
    int cudnn_enabled,
  ) {
    _atg_instance_norm ??=
        _dylib.lookupFunction<_c_atg_instance_norm, _dart_atg_instance_norm>(
            'atg_instance_norm');
    return _atg_instance_norm(
      arg0,
      input,
      weight,
      bias,
      running_mean,
      running_var,
      use_input_stats,
      momentum,
      eps,
      cudnn_enabled,
    );
  }

  _dart_atg_instance_norm _atg_instance_norm;

  void atg_int_repr(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_int_repr ??= _dylib
        .lookupFunction<_c_atg_int_repr, _dart_atg_int_repr>('atg_int_repr');
    return _atg_int_repr(
      arg0,
      self,
    );
  }

  _dart_atg_int_repr _atg_int_repr;

  void atg_inverse(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_inverse ??=
        _dylib.lookupFunction<_c_atg_inverse, _dart_atg_inverse>('atg_inverse');
    return _atg_inverse(
      arg0,
      self,
    );
  }

  _dart_atg_inverse _atg_inverse;

  void atg_inverse_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_inverse_out ??=
        _dylib.lookupFunction<_c_atg_inverse_out, _dart_atg_inverse_out>(
            'atg_inverse_out');
    return _atg_inverse_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_inverse_out _atg_inverse_out;

  void atg_irfft(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int signal_ndim,
    int normalized,
    int onesided,
    ffi.Pointer<ffi.Int64> signal_sizes_data,
    int signal_sizes_len,
  ) {
    _atg_irfft ??=
        _dylib.lookupFunction<_c_atg_irfft, _dart_atg_irfft>('atg_irfft');
    return _atg_irfft(
      arg0,
      self,
      signal_ndim,
      normalized,
      onesided,
      signal_sizes_data,
      signal_sizes_len,
    );
  }

  _dart_atg_irfft _atg_irfft;

  void atg_isclose(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
    double rtol,
    double atol,
    int equal_nan,
  ) {
    _atg_isclose ??=
        _dylib.lookupFunction<_c_atg_isclose, _dart_atg_isclose>('atg_isclose');
    return _atg_isclose(
      arg0,
      self,
      other,
      rtol,
      atol,
      equal_nan,
    );
  }

  _dart_atg_isclose _atg_isclose;

  void atg_isfinite(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_isfinite ??= _dylib
        .lookupFunction<_c_atg_isfinite, _dart_atg_isfinite>('atg_isfinite');
    return _atg_isfinite(
      arg0,
      self,
    );
  }

  _dart_atg_isfinite _atg_isfinite;

  void atg_isinf(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_isinf ??=
        _dylib.lookupFunction<_c_atg_isinf, _dart_atg_isinf>('atg_isinf');
    return _atg_isinf(
      arg0,
      self,
    );
  }

  _dart_atg_isinf _atg_isinf;

  void atg_isnan(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_isnan ??=
        _dylib.lookupFunction<_c_atg_isnan, _dart_atg_isnan>('atg_isnan');
    return _atg_isnan(
      arg0,
      self,
    );
  }

  _dart_atg_isnan _atg_isnan;

  void atg_istft(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int n_fft,
    int hop_length_v,
    int hop_length_null,
    int win_length_v,
    int win_length_null,
    ffi.Pointer<ffi.Void> window,
    int center,
    int normalized,
    int onesided,
    int length_v,
    int length_null,
  ) {
    _atg_istft ??=
        _dylib.lookupFunction<_c_atg_istft, _dart_atg_istft>('atg_istft');
    return _atg_istft(
      arg0,
      self,
      n_fft,
      hop_length_v,
      hop_length_null,
      win_length_v,
      win_length_null,
      window,
      center,
      normalized,
      onesided,
      length_v,
      length_null,
    );
  }

  _dart_atg_istft _atg_istft;

  void atg_kl_div(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    int reduction,
    int log_target,
  ) {
    _atg_kl_div ??=
        _dylib.lookupFunction<_c_atg_kl_div, _dart_atg_kl_div>('atg_kl_div');
    return _atg_kl_div(
      arg0,
      self,
      target,
      reduction,
      log_target,
    );
  }

  _dart_atg_kl_div _atg_kl_div;

  void atg_kl_div_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    int reduction,
    int log_target,
  ) {
    _atg_kl_div_backward ??= _dylib.lookupFunction<_c_atg_kl_div_backward,
        _dart_atg_kl_div_backward>('atg_kl_div_backward');
    return _atg_kl_div_backward(
      arg0,
      grad_output,
      self,
      target,
      reduction,
      log_target,
    );
  }

  _dart_atg_kl_div_backward _atg_kl_div_backward;

  void atg_kthvalue(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int k,
    int dim,
    int keepdim,
  ) {
    _atg_kthvalue ??= _dylib
        .lookupFunction<_c_atg_kthvalue, _dart_atg_kthvalue>('atg_kthvalue');
    return _atg_kthvalue(
      arg0,
      self,
      k,
      dim,
      keepdim,
    );
  }

  _dart_atg_kthvalue _atg_kthvalue;

  void atg_kthvalue_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> values,
    ffi.Pointer<ffi.Void> indices,
    ffi.Pointer<ffi.Void> self,
    int k,
    int dim,
    int keepdim,
  ) {
    _atg_kthvalue_out ??=
        _dylib.lookupFunction<_c_atg_kthvalue_out, _dart_atg_kthvalue_out>(
            'atg_kthvalue_out');
    return _atg_kthvalue_out(
      arg0,
      values,
      indices,
      self,
      k,
      dim,
      keepdim,
    );
  }

  _dart_atg_kthvalue_out _atg_kthvalue_out;

  void atg_l1_loss(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    int reduction,
  ) {
    _atg_l1_loss ??=
        _dylib.lookupFunction<_c_atg_l1_loss, _dart_atg_l1_loss>('atg_l1_loss');
    return _atg_l1_loss(
      arg0,
      self,
      target,
      reduction,
    );
  }

  _dart_atg_l1_loss _atg_l1_loss;

  void atg_l1_loss_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    int reduction,
  ) {
    _atg_l1_loss_backward ??= _dylib.lookupFunction<_c_atg_l1_loss_backward,
        _dart_atg_l1_loss_backward>('atg_l1_loss_backward');
    return _atg_l1_loss_backward(
      arg0,
      grad_output,
      self,
      target,
      reduction,
    );
  }

  _dart_atg_l1_loss_backward _atg_l1_loss_backward;

  void atg_l1_loss_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    int reduction,
  ) {
    _atg_l1_loss_backward_out ??= _dylib.lookupFunction<
        _c_atg_l1_loss_backward_out,
        _dart_atg_l1_loss_backward_out>('atg_l1_loss_backward_out');
    return _atg_l1_loss_backward_out(
      arg0,
      grad_input,
      grad_output,
      self,
      target,
      reduction,
    );
  }

  _dart_atg_l1_loss_backward_out _atg_l1_loss_backward_out;

  void atg_l1_loss_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    int reduction,
  ) {
    _atg_l1_loss_out ??=
        _dylib.lookupFunction<_c_atg_l1_loss_out, _dart_atg_l1_loss_out>(
            'atg_l1_loss_out');
    return _atg_l1_loss_out(
      arg0,
      out,
      self,
      target,
      reduction,
    );
  }

  _dart_atg_l1_loss_out _atg_l1_loss_out;

  void atg_layer_norm(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Int64> normalized_shape_data,
    int normalized_shape_len,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> bias,
    double eps,
    int cudnn_enable,
  ) {
    _atg_layer_norm ??=
        _dylib.lookupFunction<_c_atg_layer_norm, _dart_atg_layer_norm>(
            'atg_layer_norm');
    return _atg_layer_norm(
      arg0,
      input,
      normalized_shape_data,
      normalized_shape_len,
      weight,
      bias,
      eps,
      cudnn_enable,
    );
  }

  _dart_atg_layer_norm _atg_layer_norm;

  void atg_le(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_le ??= _dylib.lookupFunction<_c_atg_le, _dart_atg_le>('atg_le');
    return _atg_le(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_le _atg_le;

  void atg_le1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_le1 ??= _dylib.lookupFunction<_c_atg_le1, _dart_atg_le1>('atg_le1');
    return _atg_le1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_le1 _atg_le1;

  void atg_le_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_le_ ??= _dylib.lookupFunction<_c_atg_le_, _dart_atg_le_>('atg_le_');
    return _atg_le_(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_le_ _atg_le_;

  void atg_le_1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_le_1 ??=
        _dylib.lookupFunction<_c_atg_le_1, _dart_atg_le_1>('atg_le_1');
    return _atg_le_1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_le_1 _atg_le_1;

  void atg_le_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_le_out ??=
        _dylib.lookupFunction<_c_atg_le_out, _dart_atg_le_out>('atg_le_out');
    return _atg_le_out(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_le_out _atg_le_out;

  void atg_le_out1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_le_out1 ??=
        _dylib.lookupFunction<_c_atg_le_out1, _dart_atg_le_out1>('atg_le_out1');
    return _atg_le_out1(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_le_out1 _atg_le_out1;

  void atg_leaky_relu(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_leaky_relu ??=
        _dylib.lookupFunction<_c_atg_leaky_relu, _dart_atg_leaky_relu>(
            'atg_leaky_relu');
    return _atg_leaky_relu(
      arg0,
      self,
    );
  }

  _dart_atg_leaky_relu _atg_leaky_relu;

  void atg_leaky_relu_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_leaky_relu_ ??=
        _dylib.lookupFunction<_c_atg_leaky_relu_, _dart_atg_leaky_relu_>(
            'atg_leaky_relu_');
    return _atg_leaky_relu_(
      arg0,
      self,
    );
  }

  _dart_atg_leaky_relu_ _atg_leaky_relu_;

  void atg_leaky_relu_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> negative_slope,
    int self_is_result,
  ) {
    _atg_leaky_relu_backward ??= _dylib.lookupFunction<
        _c_atg_leaky_relu_backward,
        _dart_atg_leaky_relu_backward>('atg_leaky_relu_backward');
    return _atg_leaky_relu_backward(
      arg0,
      grad_output,
      self,
      negative_slope,
      self_is_result,
    );
  }

  _dart_atg_leaky_relu_backward _atg_leaky_relu_backward;

  void atg_leaky_relu_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_leaky_relu_out ??=
        _dylib.lookupFunction<_c_atg_leaky_relu_out, _dart_atg_leaky_relu_out>(
            'atg_leaky_relu_out');
    return _atg_leaky_relu_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_leaky_relu_out _atg_leaky_relu_out;

  void atg_lerp(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> end,
    ffi.Pointer<ffi.Void> weight,
  ) {
    _atg_lerp ??=
        _dylib.lookupFunction<_c_atg_lerp, _dart_atg_lerp>('atg_lerp');
    return _atg_lerp(
      arg0,
      self,
      end,
      weight,
    );
  }

  _dart_atg_lerp _atg_lerp;

  void atg_lerp1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> end,
    ffi.Pointer<ffi.Void> weight,
  ) {
    _atg_lerp1 ??=
        _dylib.lookupFunction<_c_atg_lerp1, _dart_atg_lerp1>('atg_lerp1');
    return _atg_lerp1(
      arg0,
      self,
      end,
      weight,
    );
  }

  _dart_atg_lerp1 _atg_lerp1;

  void atg_lerp_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> end,
    ffi.Pointer<ffi.Void> weight,
  ) {
    _atg_lerp_ ??=
        _dylib.lookupFunction<_c_atg_lerp_, _dart_atg_lerp_>('atg_lerp_');
    return _atg_lerp_(
      arg0,
      self,
      end,
      weight,
    );
  }

  _dart_atg_lerp_ _atg_lerp_;

  void atg_lerp_1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> end,
    ffi.Pointer<ffi.Void> weight,
  ) {
    _atg_lerp_1 ??=
        _dylib.lookupFunction<_c_atg_lerp_1, _dart_atg_lerp_1>('atg_lerp_1');
    return _atg_lerp_1(
      arg0,
      self,
      end,
      weight,
    );
  }

  _dart_atg_lerp_1 _atg_lerp_1;

  void atg_lerp_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> end,
    ffi.Pointer<ffi.Void> weight,
  ) {
    _atg_lerp_out ??= _dylib
        .lookupFunction<_c_atg_lerp_out, _dart_atg_lerp_out>('atg_lerp_out');
    return _atg_lerp_out(
      arg0,
      out,
      self,
      end,
      weight,
    );
  }

  _dart_atg_lerp_out _atg_lerp_out;

  void atg_lerp_out1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> end,
    ffi.Pointer<ffi.Void> weight,
  ) {
    _atg_lerp_out1 ??= _dylib
        .lookupFunction<_c_atg_lerp_out1, _dart_atg_lerp_out1>('atg_lerp_out1');
    return _atg_lerp_out1(
      arg0,
      out,
      self,
      end,
      weight,
    );
  }

  _dart_atg_lerp_out1 _atg_lerp_out1;

  void atg_lgamma(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_lgamma ??=
        _dylib.lookupFunction<_c_atg_lgamma, _dart_atg_lgamma>('atg_lgamma');
    return _atg_lgamma(
      arg0,
      self,
    );
  }

  _dart_atg_lgamma _atg_lgamma;

  void atg_lgamma_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_lgamma_ ??=
        _dylib.lookupFunction<_c_atg_lgamma_, _dart_atg_lgamma_>('atg_lgamma_');
    return _atg_lgamma_(
      arg0,
      self,
    );
  }

  _dart_atg_lgamma_ _atg_lgamma_;

  void atg_lgamma_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_lgamma_out ??=
        _dylib.lookupFunction<_c_atg_lgamma_out, _dart_atg_lgamma_out>(
            'atg_lgamma_out');
    return _atg_lgamma_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_lgamma_out _atg_lgamma_out;

  void atg_linear(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> bias,
  ) {
    _atg_linear ??=
        _dylib.lookupFunction<_c_atg_linear, _dart_atg_linear>('atg_linear');
    return _atg_linear(
      arg0,
      input,
      weight,
      bias,
    );
  }

  _dart_atg_linear _atg_linear;

  void atg_linspace(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> start,
    ffi.Pointer<ffi.Void> end,
    int steps,
    int options_kind,
    int options_device,
  ) {
    _atg_linspace ??= _dylib
        .lookupFunction<_c_atg_linspace, _dart_atg_linspace>('atg_linspace');
    return _atg_linspace(
      arg0,
      start,
      end,
      steps,
      options_kind,
      options_device,
    );
  }

  _dart_atg_linspace _atg_linspace;

  void atg_linspace_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> start,
    ffi.Pointer<ffi.Void> end,
    int steps,
  ) {
    _atg_linspace_out ??=
        _dylib.lookupFunction<_c_atg_linspace_out, _dart_atg_linspace_out>(
            'atg_linspace_out');
    return _atg_linspace_out(
      arg0,
      out,
      start,
      end,
      steps,
    );
  }

  _dart_atg_linspace_out _atg_linspace_out;

  void atg_log(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_log ??= _dylib.lookupFunction<_c_atg_log, _dart_atg_log>('atg_log');
    return _atg_log(
      arg0,
      self,
    );
  }

  _dart_atg_log _atg_log;

  void atg_log10(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_log10 ??=
        _dylib.lookupFunction<_c_atg_log10, _dart_atg_log10>('atg_log10');
    return _atg_log10(
      arg0,
      self,
    );
  }

  _dart_atg_log10 _atg_log10;

  void atg_log10_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_log10_ ??=
        _dylib.lookupFunction<_c_atg_log10_, _dart_atg_log10_>('atg_log10_');
    return _atg_log10_(
      arg0,
      self,
    );
  }

  _dart_atg_log10_ _atg_log10_;

  void atg_log10_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_log10_out ??= _dylib
        .lookupFunction<_c_atg_log10_out, _dart_atg_log10_out>('atg_log10_out');
    return _atg_log10_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_log10_out _atg_log10_out;

  void atg_log1p(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_log1p ??=
        _dylib.lookupFunction<_c_atg_log1p, _dart_atg_log1p>('atg_log1p');
    return _atg_log1p(
      arg0,
      self,
    );
  }

  _dart_atg_log1p _atg_log1p;

  void atg_log1p_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_log1p_ ??=
        _dylib.lookupFunction<_c_atg_log1p_, _dart_atg_log1p_>('atg_log1p_');
    return _atg_log1p_(
      arg0,
      self,
    );
  }

  _dart_atg_log1p_ _atg_log1p_;

  void atg_log1p_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_log1p_out ??= _dylib
        .lookupFunction<_c_atg_log1p_out, _dart_atg_log1p_out>('atg_log1p_out');
    return _atg_log1p_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_log1p_out _atg_log1p_out;

  void atg_log2(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_log2 ??=
        _dylib.lookupFunction<_c_atg_log2, _dart_atg_log2>('atg_log2');
    return _atg_log2(
      arg0,
      self,
    );
  }

  _dart_atg_log2 _atg_log2;

  void atg_log2_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_log2_ ??=
        _dylib.lookupFunction<_c_atg_log2_, _dart_atg_log2_>('atg_log2_');
    return _atg_log2_(
      arg0,
      self,
    );
  }

  _dart_atg_log2_ _atg_log2_;

  void atg_log2_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_log2_out ??= _dylib
        .lookupFunction<_c_atg_log2_out, _dart_atg_log2_out>('atg_log2_out');
    return _atg_log2_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_log2_out _atg_log2_out;

  void atg_log_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_log_ ??=
        _dylib.lookupFunction<_c_atg_log_, _dart_atg_log_>('atg_log_');
    return _atg_log_(
      arg0,
      self,
    );
  }

  _dart_atg_log_ _atg_log_;

  void atg_log_normal_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    double mean,
    double std,
  ) {
    _atg_log_normal_ ??=
        _dylib.lookupFunction<_c_atg_log_normal_, _dart_atg_log_normal_>(
            'atg_log_normal_');
    return _atg_log_normal_(
      arg0,
      self,
      mean,
      std,
    );
  }

  _dart_atg_log_normal_ _atg_log_normal_;

  void atg_log_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_log_out ??=
        _dylib.lookupFunction<_c_atg_log_out, _dart_atg_log_out>('atg_log_out');
    return _atg_log_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_log_out _atg_log_out;

  void atg_log_sigmoid(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_log_sigmoid ??=
        _dylib.lookupFunction<_c_atg_log_sigmoid, _dart_atg_log_sigmoid>(
            'atg_log_sigmoid');
    return _atg_log_sigmoid(
      arg0,
      self,
    );
  }

  _dart_atg_log_sigmoid _atg_log_sigmoid;

  void atg_log_sigmoid_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> buffer,
  ) {
    _atg_log_sigmoid_backward ??= _dylib.lookupFunction<
        _c_atg_log_sigmoid_backward,
        _dart_atg_log_sigmoid_backward>('atg_log_sigmoid_backward');
    return _atg_log_sigmoid_backward(
      arg0,
      grad_output,
      self,
      buffer,
    );
  }

  _dart_atg_log_sigmoid_backward _atg_log_sigmoid_backward;

  void atg_log_sigmoid_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> buffer,
  ) {
    _atg_log_sigmoid_backward_out ??= _dylib.lookupFunction<
        _c_atg_log_sigmoid_backward_out,
        _dart_atg_log_sigmoid_backward_out>('atg_log_sigmoid_backward_out');
    return _atg_log_sigmoid_backward_out(
      arg0,
      grad_input,
      grad_output,
      self,
      buffer,
    );
  }

  _dart_atg_log_sigmoid_backward_out _atg_log_sigmoid_backward_out;

  void atg_log_sigmoid_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_log_sigmoid_out ??= _dylib.lookupFunction<_c_atg_log_sigmoid_out,
        _dart_atg_log_sigmoid_out>('atg_log_sigmoid_out');
    return _atg_log_sigmoid_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_log_sigmoid_out _atg_log_sigmoid_out;

  void atg_log_softmax(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int dtype,
  ) {
    _atg_log_softmax ??=
        _dylib.lookupFunction<_c_atg_log_softmax, _dart_atg_log_softmax>(
            'atg_log_softmax');
    return _atg_log_softmax(
      arg0,
      self,
      dim,
      dtype,
    );
  }

  _dart_atg_log_softmax _atg_log_softmax;

  void atg_logaddexp(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_logaddexp ??= _dylib
        .lookupFunction<_c_atg_logaddexp, _dart_atg_logaddexp>('atg_logaddexp');
    return _atg_logaddexp(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_logaddexp _atg_logaddexp;

  void atg_logaddexp2(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_logaddexp2 ??=
        _dylib.lookupFunction<_c_atg_logaddexp2, _dart_atg_logaddexp2>(
            'atg_logaddexp2');
    return _atg_logaddexp2(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_logaddexp2 _atg_logaddexp2;

  void atg_logaddexp2_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_logaddexp2_out ??=
        _dylib.lookupFunction<_c_atg_logaddexp2_out, _dart_atg_logaddexp2_out>(
            'atg_logaddexp2_out');
    return _atg_logaddexp2_out(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_logaddexp2_out _atg_logaddexp2_out;

  void atg_logaddexp_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_logaddexp_out ??=
        _dylib.lookupFunction<_c_atg_logaddexp_out, _dart_atg_logaddexp_out>(
            'atg_logaddexp_out');
    return _atg_logaddexp_out(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_logaddexp_out _atg_logaddexp_out;

  void atg_logcumsumexp(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
  ) {
    _atg_logcumsumexp ??=
        _dylib.lookupFunction<_c_atg_logcumsumexp, _dart_atg_logcumsumexp>(
            'atg_logcumsumexp');
    return _atg_logcumsumexp(
      arg0,
      self,
      dim,
    );
  }

  _dart_atg_logcumsumexp _atg_logcumsumexp;

  void atg_logcumsumexp_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    int dim,
  ) {
    _atg_logcumsumexp_out ??= _dylib.lookupFunction<_c_atg_logcumsumexp_out,
        _dart_atg_logcumsumexp_out>('atg_logcumsumexp_out');
    return _atg_logcumsumexp_out(
      arg0,
      out,
      self,
      dim,
    );
  }

  _dart_atg_logcumsumexp_out _atg_logcumsumexp_out;

  void atg_logdet(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_logdet ??=
        _dylib.lookupFunction<_c_atg_logdet, _dart_atg_logdet>('atg_logdet');
    return _atg_logdet(
      arg0,
      self,
    );
  }

  _dart_atg_logdet _atg_logdet;

  void atg_logical_and(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_logical_and ??=
        _dylib.lookupFunction<_c_atg_logical_and, _dart_atg_logical_and>(
            'atg_logical_and');
    return _atg_logical_and(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_logical_and _atg_logical_and;

  void atg_logical_and_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_logical_and_ ??=
        _dylib.lookupFunction<_c_atg_logical_and_, _dart_atg_logical_and_>(
            'atg_logical_and_');
    return _atg_logical_and_(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_logical_and_ _atg_logical_and_;

  void atg_logical_and_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_logical_and_out ??= _dylib.lookupFunction<_c_atg_logical_and_out,
        _dart_atg_logical_and_out>('atg_logical_and_out');
    return _atg_logical_and_out(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_logical_and_out _atg_logical_and_out;

  void atg_logical_not(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_logical_not ??=
        _dylib.lookupFunction<_c_atg_logical_not, _dart_atg_logical_not>(
            'atg_logical_not');
    return _atg_logical_not(
      arg0,
      self,
    );
  }

  _dart_atg_logical_not _atg_logical_not;

  void atg_logical_not_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_logical_not_ ??=
        _dylib.lookupFunction<_c_atg_logical_not_, _dart_atg_logical_not_>(
            'atg_logical_not_');
    return _atg_logical_not_(
      arg0,
      self,
    );
  }

  _dart_atg_logical_not_ _atg_logical_not_;

  void atg_logical_not_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_logical_not_out ??= _dylib.lookupFunction<_c_atg_logical_not_out,
        _dart_atg_logical_not_out>('atg_logical_not_out');
    return _atg_logical_not_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_logical_not_out _atg_logical_not_out;

  void atg_logical_or(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_logical_or ??=
        _dylib.lookupFunction<_c_atg_logical_or, _dart_atg_logical_or>(
            'atg_logical_or');
    return _atg_logical_or(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_logical_or _atg_logical_or;

  void atg_logical_or_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_logical_or_ ??=
        _dylib.lookupFunction<_c_atg_logical_or_, _dart_atg_logical_or_>(
            'atg_logical_or_');
    return _atg_logical_or_(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_logical_or_ _atg_logical_or_;

  void atg_logical_or_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_logical_or_out ??=
        _dylib.lookupFunction<_c_atg_logical_or_out, _dart_atg_logical_or_out>(
            'atg_logical_or_out');
    return _atg_logical_or_out(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_logical_or_out _atg_logical_or_out;

  void atg_logical_xor(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_logical_xor ??=
        _dylib.lookupFunction<_c_atg_logical_xor, _dart_atg_logical_xor>(
            'atg_logical_xor');
    return _atg_logical_xor(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_logical_xor _atg_logical_xor;

  void atg_logical_xor_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_logical_xor_ ??=
        _dylib.lookupFunction<_c_atg_logical_xor_, _dart_atg_logical_xor_>(
            'atg_logical_xor_');
    return _atg_logical_xor_(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_logical_xor_ _atg_logical_xor_;

  void atg_logical_xor_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_logical_xor_out ??= _dylib.lookupFunction<_c_atg_logical_xor_out,
        _dart_atg_logical_xor_out>('atg_logical_xor_out');
    return _atg_logical_xor_out(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_logical_xor_out _atg_logical_xor_out;

  void atg_logspace(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> start,
    ffi.Pointer<ffi.Void> end,
    int steps,
    double base,
    int options_kind,
    int options_device,
  ) {
    _atg_logspace ??= _dylib
        .lookupFunction<_c_atg_logspace, _dart_atg_logspace>('atg_logspace');
    return _atg_logspace(
      arg0,
      start,
      end,
      steps,
      base,
      options_kind,
      options_device,
    );
  }

  _dart_atg_logspace _atg_logspace;

  void atg_logspace_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> start,
    ffi.Pointer<ffi.Void> end,
    int steps,
    double base,
  ) {
    _atg_logspace_out ??=
        _dylib.lookupFunction<_c_atg_logspace_out, _dart_atg_logspace_out>(
            'atg_logspace_out');
    return _atg_logspace_out(
      arg0,
      out,
      start,
      end,
      steps,
      base,
    );
  }

  _dart_atg_logspace_out _atg_logspace_out;

  void atg_logsumexp(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> dim_data,
    int dim_len,
    int keepdim,
  ) {
    _atg_logsumexp ??= _dylib
        .lookupFunction<_c_atg_logsumexp, _dart_atg_logsumexp>('atg_logsumexp');
    return _atg_logsumexp(
      arg0,
      self,
      dim_data,
      dim_len,
      keepdim,
    );
  }

  _dart_atg_logsumexp _atg_logsumexp;

  void atg_logsumexp_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> dim_data,
    int dim_len,
    int keepdim,
  ) {
    _atg_logsumexp_out ??=
        _dylib.lookupFunction<_c_atg_logsumexp_out, _dart_atg_logsumexp_out>(
            'atg_logsumexp_out');
    return _atg_logsumexp_out(
      arg0,
      out,
      self,
      dim_data,
      dim_len,
      keepdim,
    );
  }

  _dart_atg_logsumexp_out _atg_logsumexp_out;

  void atg_lstm(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Pointer<ffi.Void>> hx_data,
    int hx_len,
    ffi.Pointer<ffi.Pointer<ffi.Void>> params_data,
    int params_len,
    int has_biases,
    int num_layers,
    double dropout,
    int train,
    int bidirectional,
    int batch_first,
  ) {
    _atg_lstm ??=
        _dylib.lookupFunction<_c_atg_lstm, _dart_atg_lstm>('atg_lstm');
    return _atg_lstm(
      arg0,
      input,
      hx_data,
      hx_len,
      params_data,
      params_len,
      has_biases,
      num_layers,
      dropout,
      train,
      bidirectional,
      batch_first,
    );
  }

  _dart_atg_lstm _atg_lstm;

  void atg_lstm1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.Void> batch_sizes,
    ffi.Pointer<ffi.Pointer<ffi.Void>> hx_data,
    int hx_len,
    ffi.Pointer<ffi.Pointer<ffi.Void>> params_data,
    int params_len,
    int has_biases,
    int num_layers,
    double dropout,
    int train,
    int bidirectional,
  ) {
    _atg_lstm1 ??=
        _dylib.lookupFunction<_c_atg_lstm1, _dart_atg_lstm1>('atg_lstm1');
    return _atg_lstm1(
      arg0,
      data,
      batch_sizes,
      hx_data,
      hx_len,
      params_data,
      params_len,
      has_biases,
      num_layers,
      dropout,
      train,
      bidirectional,
    );
  }

  _dart_atg_lstm1 _atg_lstm1;

  void atg_lstm_cell(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Pointer<ffi.Void>> hx_data,
    int hx_len,
    ffi.Pointer<ffi.Void> w_ih,
    ffi.Pointer<ffi.Void> w_hh,
    ffi.Pointer<ffi.Void> b_ih,
    ffi.Pointer<ffi.Void> b_hh,
  ) {
    _atg_lstm_cell ??= _dylib
        .lookupFunction<_c_atg_lstm_cell, _dart_atg_lstm_cell>('atg_lstm_cell');
    return _atg_lstm_cell(
      arg0,
      input,
      hx_data,
      hx_len,
      w_ih,
      w_hh,
      b_ih,
      b_hh,
    );
  }

  _dart_atg_lstm_cell _atg_lstm_cell;

  void atg_lstsq(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> A,
  ) {
    _atg_lstsq ??=
        _dylib.lookupFunction<_c_atg_lstsq, _dart_atg_lstsq>('atg_lstsq');
    return _atg_lstsq(
      arg0,
      self,
      A,
    );
  }

  _dart_atg_lstsq _atg_lstsq;

  void atg_lstsq_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> X,
    ffi.Pointer<ffi.Void> qr,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> A,
  ) {
    _atg_lstsq_out ??= _dylib
        .lookupFunction<_c_atg_lstsq_out, _dart_atg_lstsq_out>('atg_lstsq_out');
    return _atg_lstsq_out(
      arg0,
      X,
      qr,
      self,
      A,
    );
  }

  _dart_atg_lstsq_out _atg_lstsq_out;

  void atg_lt(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_lt ??= _dylib.lookupFunction<_c_atg_lt, _dart_atg_lt>('atg_lt');
    return _atg_lt(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_lt _atg_lt;

  void atg_lt1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_lt1 ??= _dylib.lookupFunction<_c_atg_lt1, _dart_atg_lt1>('atg_lt1');
    return _atg_lt1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_lt1 _atg_lt1;

  void atg_lt_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_lt_ ??= _dylib.lookupFunction<_c_atg_lt_, _dart_atg_lt_>('atg_lt_');
    return _atg_lt_(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_lt_ _atg_lt_;

  void atg_lt_1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_lt_1 ??=
        _dylib.lookupFunction<_c_atg_lt_1, _dart_atg_lt_1>('atg_lt_1');
    return _atg_lt_1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_lt_1 _atg_lt_1;

  void atg_lt_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_lt_out ??=
        _dylib.lookupFunction<_c_atg_lt_out, _dart_atg_lt_out>('atg_lt_out');
    return _atg_lt_out(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_lt_out _atg_lt_out;

  void atg_lt_out1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_lt_out1 ??=
        _dylib.lookupFunction<_c_atg_lt_out1, _dart_atg_lt_out1>('atg_lt_out1');
    return _atg_lt_out1(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_lt_out1 _atg_lt_out1;

  void atg_lu_solve(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> LU_data,
    ffi.Pointer<ffi.Void> LU_pivots,
  ) {
    _atg_lu_solve ??= _dylib
        .lookupFunction<_c_atg_lu_solve, _dart_atg_lu_solve>('atg_lu_solve');
    return _atg_lu_solve(
      arg0,
      self,
      LU_data,
      LU_pivots,
    );
  }

  _dart_atg_lu_solve _atg_lu_solve;

  void atg_lu_solve_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> LU_data,
    ffi.Pointer<ffi.Void> LU_pivots,
  ) {
    _atg_lu_solve_out ??=
        _dylib.lookupFunction<_c_atg_lu_solve_out, _dart_atg_lu_solve_out>(
            'atg_lu_solve_out');
    return _atg_lu_solve_out(
      arg0,
      out,
      self,
      LU_data,
      LU_pivots,
    );
  }

  _dart_atg_lu_solve_out _atg_lu_solve_out;

  void atg_margin_ranking_loss(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input1,
    ffi.Pointer<ffi.Void> input2,
    ffi.Pointer<ffi.Void> target,
    double margin,
    int reduction,
  ) {
    _atg_margin_ranking_loss ??= _dylib.lookupFunction<
        _c_atg_margin_ranking_loss,
        _dart_atg_margin_ranking_loss>('atg_margin_ranking_loss');
    return _atg_margin_ranking_loss(
      arg0,
      input1,
      input2,
      target,
      margin,
      reduction,
    );
  }

  _dart_atg_margin_ranking_loss _atg_margin_ranking_loss;

  void atg_masked_fill(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> mask,
    ffi.Pointer<ffi.Void> value,
  ) {
    _atg_masked_fill ??=
        _dylib.lookupFunction<_c_atg_masked_fill, _dart_atg_masked_fill>(
            'atg_masked_fill');
    return _atg_masked_fill(
      arg0,
      self,
      mask,
      value,
    );
  }

  _dart_atg_masked_fill _atg_masked_fill;

  void atg_masked_fill1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> mask,
    ffi.Pointer<ffi.Void> value,
  ) {
    _atg_masked_fill1 ??=
        _dylib.lookupFunction<_c_atg_masked_fill1, _dart_atg_masked_fill1>(
            'atg_masked_fill1');
    return _atg_masked_fill1(
      arg0,
      self,
      mask,
      value,
    );
  }

  _dart_atg_masked_fill1 _atg_masked_fill1;

  void atg_masked_fill_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> mask,
    ffi.Pointer<ffi.Void> value,
  ) {
    _atg_masked_fill_ ??=
        _dylib.lookupFunction<_c_atg_masked_fill_, _dart_atg_masked_fill_>(
            'atg_masked_fill_');
    return _atg_masked_fill_(
      arg0,
      self,
      mask,
      value,
    );
  }

  _dart_atg_masked_fill_ _atg_masked_fill_;

  void atg_masked_fill_1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> mask,
    ffi.Pointer<ffi.Void> value,
  ) {
    _atg_masked_fill_1 ??=
        _dylib.lookupFunction<_c_atg_masked_fill_1, _dart_atg_masked_fill_1>(
            'atg_masked_fill_1');
    return _atg_masked_fill_1(
      arg0,
      self,
      mask,
      value,
    );
  }

  _dart_atg_masked_fill_1 _atg_masked_fill_1;

  void atg_masked_scatter(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> mask,
    ffi.Pointer<ffi.Void> source,
  ) {
    _atg_masked_scatter ??=
        _dylib.lookupFunction<_c_atg_masked_scatter, _dart_atg_masked_scatter>(
            'atg_masked_scatter');
    return _atg_masked_scatter(
      arg0,
      self,
      mask,
      source,
    );
  }

  _dart_atg_masked_scatter _atg_masked_scatter;

  void atg_masked_scatter_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> mask,
    ffi.Pointer<ffi.Void> source,
  ) {
    _atg_masked_scatter_ ??= _dylib.lookupFunction<_c_atg_masked_scatter_,
        _dart_atg_masked_scatter_>('atg_masked_scatter_');
    return _atg_masked_scatter_(
      arg0,
      self,
      mask,
      source,
    );
  }

  _dart_atg_masked_scatter_ _atg_masked_scatter_;

  void atg_masked_select(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> mask,
  ) {
    _atg_masked_select ??=
        _dylib.lookupFunction<_c_atg_masked_select, _dart_atg_masked_select>(
            'atg_masked_select');
    return _atg_masked_select(
      arg0,
      self,
      mask,
    );
  }

  _dart_atg_masked_select _atg_masked_select;

  void atg_masked_select_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> mask,
  ) {
    _atg_masked_select_out ??= _dylib.lookupFunction<_c_atg_masked_select_out,
        _dart_atg_masked_select_out>('atg_masked_select_out');
    return _atg_masked_select_out(
      arg0,
      out,
      self,
      mask,
    );
  }

  _dart_atg_masked_select_out _atg_masked_select_out;

  void atg_matmul(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_matmul ??=
        _dylib.lookupFunction<_c_atg_matmul, _dart_atg_matmul>('atg_matmul');
    return _atg_matmul(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_matmul _atg_matmul;

  void atg_matmul_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_matmul_out ??=
        _dylib.lookupFunction<_c_atg_matmul_out, _dart_atg_matmul_out>(
            'atg_matmul_out');
    return _atg_matmul_out(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_matmul_out _atg_matmul_out;

  void atg_matrix_power(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int n,
  ) {
    _atg_matrix_power ??=
        _dylib.lookupFunction<_c_atg_matrix_power, _dart_atg_matrix_power>(
            'atg_matrix_power');
    return _atg_matrix_power(
      arg0,
      self,
      n,
    );
  }

  _dart_atg_matrix_power _atg_matrix_power;

  void atg_matrix_rank(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int symmetric,
  ) {
    _atg_matrix_rank ??=
        _dylib.lookupFunction<_c_atg_matrix_rank, _dart_atg_matrix_rank>(
            'atg_matrix_rank');
    return _atg_matrix_rank(
      arg0,
      self,
      symmetric,
    );
  }

  _dart_atg_matrix_rank _atg_matrix_rank;

  void atg_matrix_rank1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    double tol,
    int symmetric,
  ) {
    _atg_matrix_rank1 ??=
        _dylib.lookupFunction<_c_atg_matrix_rank1, _dart_atg_matrix_rank1>(
            'atg_matrix_rank1');
    return _atg_matrix_rank1(
      arg0,
      self,
      tol,
      symmetric,
    );
  }

  _dart_atg_matrix_rank1 _atg_matrix_rank1;

  void atg_max(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_max ??= _dylib.lookupFunction<_c_atg_max, _dart_atg_max>('atg_max');
    return _atg_max(
      arg0,
      self,
    );
  }

  _dart_atg_max _atg_max;

  void atg_max1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_max1 ??=
        _dylib.lookupFunction<_c_atg_max1, _dart_atg_max1>('atg_max1');
    return _atg_max1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_max1 _atg_max1;

  void atg_max2(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int keepdim,
  ) {
    _atg_max2 ??=
        _dylib.lookupFunction<_c_atg_max2, _dart_atg_max2>('atg_max2');
    return _atg_max2(
      arg0,
      self,
      dim,
      keepdim,
    );
  }

  _dart_atg_max2 _atg_max2;

  void atg_max_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_max_out ??=
        _dylib.lookupFunction<_c_atg_max_out, _dart_atg_max_out>('atg_max_out');
    return _atg_max_out(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_max_out _atg_max_out;

  void atg_max_out1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> max,
    ffi.Pointer<ffi.Void> max_values,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int keepdim,
  ) {
    _atg_max_out1 ??= _dylib
        .lookupFunction<_c_atg_max_out1, _dart_atg_max_out1>('atg_max_out1');
    return _atg_max_out1(
      arg0,
      max,
      max_values,
      self,
      dim,
      keepdim,
    );
  }

  _dart_atg_max_out1 _atg_max_out1;

  void atg_max_pool1d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int ceil_mode,
  ) {
    _atg_max_pool1d ??=
        _dylib.lookupFunction<_c_atg_max_pool1d, _dart_atg_max_pool1d>(
            'atg_max_pool1d');
    return _atg_max_pool1d(
      arg0,
      self,
      kernel_size_data,
      kernel_size_len,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      dilation_data,
      dilation_len,
      ceil_mode,
    );
  }

  _dart_atg_max_pool1d _atg_max_pool1d;

  void atg_max_pool1d_with_indices(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int ceil_mode,
  ) {
    _atg_max_pool1d_with_indices ??= _dylib.lookupFunction<
        _c_atg_max_pool1d_with_indices,
        _dart_atg_max_pool1d_with_indices>('atg_max_pool1d_with_indices');
    return _atg_max_pool1d_with_indices(
      arg0,
      self,
      kernel_size_data,
      kernel_size_len,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      dilation_data,
      dilation_len,
      ceil_mode,
    );
  }

  _dart_atg_max_pool1d_with_indices _atg_max_pool1d_with_indices;

  void atg_max_pool2d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int ceil_mode,
  ) {
    _atg_max_pool2d ??=
        _dylib.lookupFunction<_c_atg_max_pool2d, _dart_atg_max_pool2d>(
            'atg_max_pool2d');
    return _atg_max_pool2d(
      arg0,
      self,
      kernel_size_data,
      kernel_size_len,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      dilation_data,
      dilation_len,
      ceil_mode,
    );
  }

  _dart_atg_max_pool2d _atg_max_pool2d;

  void atg_max_pool2d_with_indices(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int ceil_mode,
  ) {
    _atg_max_pool2d_with_indices ??= _dylib.lookupFunction<
        _c_atg_max_pool2d_with_indices,
        _dart_atg_max_pool2d_with_indices>('atg_max_pool2d_with_indices');
    return _atg_max_pool2d_with_indices(
      arg0,
      self,
      kernel_size_data,
      kernel_size_len,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      dilation_data,
      dilation_len,
      ceil_mode,
    );
  }

  _dart_atg_max_pool2d_with_indices _atg_max_pool2d_with_indices;

  void atg_max_pool2d_with_indices_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int ceil_mode,
    ffi.Pointer<ffi.Void> indices,
  ) {
    _atg_max_pool2d_with_indices_backward ??= _dylib.lookupFunction<
            _c_atg_max_pool2d_with_indices_backward,
            _dart_atg_max_pool2d_with_indices_backward>(
        'atg_max_pool2d_with_indices_backward');
    return _atg_max_pool2d_with_indices_backward(
      arg0,
      grad_output,
      self,
      kernel_size_data,
      kernel_size_len,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      dilation_data,
      dilation_len,
      ceil_mode,
      indices,
    );
  }

  _dart_atg_max_pool2d_with_indices_backward
      _atg_max_pool2d_with_indices_backward;

  void atg_max_pool2d_with_indices_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int ceil_mode,
    ffi.Pointer<ffi.Void> indices,
  ) {
    _atg_max_pool2d_with_indices_backward_out ??= _dylib.lookupFunction<
            _c_atg_max_pool2d_with_indices_backward_out,
            _dart_atg_max_pool2d_with_indices_backward_out>(
        'atg_max_pool2d_with_indices_backward_out');
    return _atg_max_pool2d_with_indices_backward_out(
      arg0,
      grad_input,
      grad_output,
      self,
      kernel_size_data,
      kernel_size_len,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      dilation_data,
      dilation_len,
      ceil_mode,
      indices,
    );
  }

  _dart_atg_max_pool2d_with_indices_backward_out
      _atg_max_pool2d_with_indices_backward_out;

  void atg_max_pool2d_with_indices_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> indices,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int ceil_mode,
  ) {
    _atg_max_pool2d_with_indices_out ??= _dylib.lookupFunction<
            _c_atg_max_pool2d_with_indices_out,
            _dart_atg_max_pool2d_with_indices_out>(
        'atg_max_pool2d_with_indices_out');
    return _atg_max_pool2d_with_indices_out(
      arg0,
      out,
      indices,
      self,
      kernel_size_data,
      kernel_size_len,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      dilation_data,
      dilation_len,
      ceil_mode,
    );
  }

  _dart_atg_max_pool2d_with_indices_out _atg_max_pool2d_with_indices_out;

  void atg_max_pool3d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int ceil_mode,
  ) {
    _atg_max_pool3d ??=
        _dylib.lookupFunction<_c_atg_max_pool3d, _dart_atg_max_pool3d>(
            'atg_max_pool3d');
    return _atg_max_pool3d(
      arg0,
      self,
      kernel_size_data,
      kernel_size_len,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      dilation_data,
      dilation_len,
      ceil_mode,
    );
  }

  _dart_atg_max_pool3d _atg_max_pool3d;

  void atg_max_pool3d_with_indices(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int ceil_mode,
  ) {
    _atg_max_pool3d_with_indices ??= _dylib.lookupFunction<
        _c_atg_max_pool3d_with_indices,
        _dart_atg_max_pool3d_with_indices>('atg_max_pool3d_with_indices');
    return _atg_max_pool3d_with_indices(
      arg0,
      self,
      kernel_size_data,
      kernel_size_len,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      dilation_data,
      dilation_len,
      ceil_mode,
    );
  }

  _dart_atg_max_pool3d_with_indices _atg_max_pool3d_with_indices;

  void atg_max_pool3d_with_indices_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int ceil_mode,
    ffi.Pointer<ffi.Void> indices,
  ) {
    _atg_max_pool3d_with_indices_backward ??= _dylib.lookupFunction<
            _c_atg_max_pool3d_with_indices_backward,
            _dart_atg_max_pool3d_with_indices_backward>(
        'atg_max_pool3d_with_indices_backward');
    return _atg_max_pool3d_with_indices_backward(
      arg0,
      grad_output,
      self,
      kernel_size_data,
      kernel_size_len,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      dilation_data,
      dilation_len,
      ceil_mode,
      indices,
    );
  }

  _dart_atg_max_pool3d_with_indices_backward
      _atg_max_pool3d_with_indices_backward;

  void atg_max_pool3d_with_indices_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int ceil_mode,
    ffi.Pointer<ffi.Void> indices,
  ) {
    _atg_max_pool3d_with_indices_backward_out ??= _dylib.lookupFunction<
            _c_atg_max_pool3d_with_indices_backward_out,
            _dart_atg_max_pool3d_with_indices_backward_out>(
        'atg_max_pool3d_with_indices_backward_out');
    return _atg_max_pool3d_with_indices_backward_out(
      arg0,
      grad_input,
      grad_output,
      self,
      kernel_size_data,
      kernel_size_len,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      dilation_data,
      dilation_len,
      ceil_mode,
      indices,
    );
  }

  _dart_atg_max_pool3d_with_indices_backward_out
      _atg_max_pool3d_with_indices_backward_out;

  void atg_max_pool3d_with_indices_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> indices,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int ceil_mode,
  ) {
    _atg_max_pool3d_with_indices_out ??= _dylib.lookupFunction<
            _c_atg_max_pool3d_with_indices_out,
            _dart_atg_max_pool3d_with_indices_out>(
        'atg_max_pool3d_with_indices_out');
    return _atg_max_pool3d_with_indices_out(
      arg0,
      out,
      indices,
      self,
      kernel_size_data,
      kernel_size_len,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      dilation_data,
      dilation_len,
      ceil_mode,
    );
  }

  _dart_atg_max_pool3d_with_indices_out _atg_max_pool3d_with_indices_out;

  void atg_max_unpool2d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> indices,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
  ) {
    _atg_max_unpool2d ??=
        _dylib.lookupFunction<_c_atg_max_unpool2d, _dart_atg_max_unpool2d>(
            'atg_max_unpool2d');
    return _atg_max_unpool2d(
      arg0,
      self,
      indices,
      output_size_data,
      output_size_len,
    );
  }

  _dart_atg_max_unpool2d _atg_max_unpool2d;

  void atg_max_unpool2d_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> indices,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
  ) {
    _atg_max_unpool2d_backward ??= _dylib.lookupFunction<
        _c_atg_max_unpool2d_backward,
        _dart_atg_max_unpool2d_backward>('atg_max_unpool2d_backward');
    return _atg_max_unpool2d_backward(
      arg0,
      grad_output,
      self,
      indices,
      output_size_data,
      output_size_len,
    );
  }

  _dart_atg_max_unpool2d_backward _atg_max_unpool2d_backward;

  void atg_max_unpool2d_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> indices,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
  ) {
    _atg_max_unpool2d_backward_out ??= _dylib.lookupFunction<
        _c_atg_max_unpool2d_backward_out,
        _dart_atg_max_unpool2d_backward_out>('atg_max_unpool2d_backward_out');
    return _atg_max_unpool2d_backward_out(
      arg0,
      grad_input,
      grad_output,
      self,
      indices,
      output_size_data,
      output_size_len,
    );
  }

  _dart_atg_max_unpool2d_backward_out _atg_max_unpool2d_backward_out;

  void atg_max_unpool2d_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> indices,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
  ) {
    _atg_max_unpool2d_out ??= _dylib.lookupFunction<_c_atg_max_unpool2d_out,
        _dart_atg_max_unpool2d_out>('atg_max_unpool2d_out');
    return _atg_max_unpool2d_out(
      arg0,
      out,
      self,
      indices,
      output_size_data,
      output_size_len,
    );
  }

  _dart_atg_max_unpool2d_out _atg_max_unpool2d_out;

  void atg_max_unpool3d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> indices,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
  ) {
    _atg_max_unpool3d ??=
        _dylib.lookupFunction<_c_atg_max_unpool3d, _dart_atg_max_unpool3d>(
            'atg_max_unpool3d');
    return _atg_max_unpool3d(
      arg0,
      self,
      indices,
      output_size_data,
      output_size_len,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
    );
  }

  _dart_atg_max_unpool3d _atg_max_unpool3d;

  void atg_max_unpool3d_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> indices,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
  ) {
    _atg_max_unpool3d_backward ??= _dylib.lookupFunction<
        _c_atg_max_unpool3d_backward,
        _dart_atg_max_unpool3d_backward>('atg_max_unpool3d_backward');
    return _atg_max_unpool3d_backward(
      arg0,
      grad_output,
      self,
      indices,
      output_size_data,
      output_size_len,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
    );
  }

  _dart_atg_max_unpool3d_backward _atg_max_unpool3d_backward;

  void atg_max_unpool3d_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> indices,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
  ) {
    _atg_max_unpool3d_backward_out ??= _dylib.lookupFunction<
        _c_atg_max_unpool3d_backward_out,
        _dart_atg_max_unpool3d_backward_out>('atg_max_unpool3d_backward_out');
    return _atg_max_unpool3d_backward_out(
      arg0,
      grad_input,
      grad_output,
      self,
      indices,
      output_size_data,
      output_size_len,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
    );
  }

  _dart_atg_max_unpool3d_backward_out _atg_max_unpool3d_backward_out;

  void atg_max_unpool3d_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> indices,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
  ) {
    _atg_max_unpool3d_out ??= _dylib.lookupFunction<_c_atg_max_unpool3d_out,
        _dart_atg_max_unpool3d_out>('atg_max_unpool3d_out');
    return _atg_max_unpool3d_out(
      arg0,
      out,
      self,
      indices,
      output_size_data,
      output_size_len,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
    );
  }

  _dart_atg_max_unpool3d_out _atg_max_unpool3d_out;

  void atg_max_values(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> dim_data,
    int dim_len,
    int keepdim,
  ) {
    _atg_max_values ??=
        _dylib.lookupFunction<_c_atg_max_values, _dart_atg_max_values>(
            'atg_max_values');
    return _atg_max_values(
      arg0,
      self,
      dim_data,
      dim_len,
      keepdim,
    );
  }

  _dart_atg_max_values _atg_max_values;

  void atg_mean(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dtype,
  ) {
    _atg_mean ??=
        _dylib.lookupFunction<_c_atg_mean, _dart_atg_mean>('atg_mean');
    return _atg_mean(
      arg0,
      self,
      dtype,
    );
  }

  _dart_atg_mean _atg_mean;

  void atg_mean1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> dim_data,
    int dim_len,
    int keepdim,
    int dtype,
  ) {
    _atg_mean1 ??=
        _dylib.lookupFunction<_c_atg_mean1, _dart_atg_mean1>('atg_mean1');
    return _atg_mean1(
      arg0,
      self,
      dim_data,
      dim_len,
      keepdim,
      dtype,
    );
  }

  _dart_atg_mean1 _atg_mean1;

  void atg_mean_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> dim_data,
    int dim_len,
    int keepdim,
    int dtype,
  ) {
    _atg_mean_out ??= _dylib
        .lookupFunction<_c_atg_mean_out, _dart_atg_mean_out>('atg_mean_out');
    return _atg_mean_out(
      arg0,
      out,
      self,
      dim_data,
      dim_len,
      keepdim,
      dtype,
    );
  }

  _dart_atg_mean_out _atg_mean_out;

  void atg_median(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_median ??=
        _dylib.lookupFunction<_c_atg_median, _dart_atg_median>('atg_median');
    return _atg_median(
      arg0,
      self,
    );
  }

  _dart_atg_median _atg_median;

  void atg_median1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int keepdim,
  ) {
    _atg_median1 ??=
        _dylib.lookupFunction<_c_atg_median1, _dart_atg_median1>('atg_median1');
    return _atg_median1(
      arg0,
      self,
      dim,
      keepdim,
    );
  }

  _dart_atg_median1 _atg_median1;

  void atg_median_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> values,
    ffi.Pointer<ffi.Void> indices,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int keepdim,
  ) {
    _atg_median_out ??=
        _dylib.lookupFunction<_c_atg_median_out, _dart_atg_median_out>(
            'atg_median_out');
    return _atg_median_out(
      arg0,
      values,
      indices,
      self,
      dim,
      keepdim,
    );
  }

  _dart_atg_median_out _atg_median_out;

  ffi.Pointer<ffi.Pointer<ffi.Void>> atg_meshgrid(
    ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
    int tensors_len,
  ) {
    _atg_meshgrid ??= _dylib
        .lookupFunction<_c_atg_meshgrid, _dart_atg_meshgrid>('atg_meshgrid');
    return _atg_meshgrid(
      tensors_data,
      tensors_len,
    );
  }

  _dart_atg_meshgrid _atg_meshgrid;

  void atg_min(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_min ??= _dylib.lookupFunction<_c_atg_min, _dart_atg_min>('atg_min');
    return _atg_min(
      arg0,
      self,
    );
  }

  _dart_atg_min _atg_min;

  void atg_min1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_min1 ??=
        _dylib.lookupFunction<_c_atg_min1, _dart_atg_min1>('atg_min1');
    return _atg_min1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_min1 _atg_min1;

  void atg_min2(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int keepdim,
  ) {
    _atg_min2 ??=
        _dylib.lookupFunction<_c_atg_min2, _dart_atg_min2>('atg_min2');
    return _atg_min2(
      arg0,
      self,
      dim,
      keepdim,
    );
  }

  _dart_atg_min2 _atg_min2;

  void atg_min_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_min_out ??=
        _dylib.lookupFunction<_c_atg_min_out, _dart_atg_min_out>('atg_min_out');
    return _atg_min_out(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_min_out _atg_min_out;

  void atg_min_out1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> min,
    ffi.Pointer<ffi.Void> min_indices,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int keepdim,
  ) {
    _atg_min_out1 ??= _dylib
        .lookupFunction<_c_atg_min_out1, _dart_atg_min_out1>('atg_min_out1');
    return _atg_min_out1(
      arg0,
      min,
      min_indices,
      self,
      dim,
      keepdim,
    );
  }

  _dart_atg_min_out1 _atg_min_out1;

  void atg_min_values(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> dim_data,
    int dim_len,
    int keepdim,
  ) {
    _atg_min_values ??=
        _dylib.lookupFunction<_c_atg_min_values, _dart_atg_min_values>(
            'atg_min_values');
    return _atg_min_values(
      arg0,
      self,
      dim_data,
      dim_len,
      keepdim,
    );
  }

  _dart_atg_min_values _atg_min_values;

  void atg_miopen_batch_norm(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> bias,
    ffi.Pointer<ffi.Void> running_mean,
    ffi.Pointer<ffi.Void> running_var,
    int training,
    double exponential_average_factor,
    double epsilon,
  ) {
    _atg_miopen_batch_norm ??= _dylib.lookupFunction<_c_atg_miopen_batch_norm,
        _dart_atg_miopen_batch_norm>('atg_miopen_batch_norm');
    return _atg_miopen_batch_norm(
      arg0,
      input,
      weight,
      bias,
      running_mean,
      running_var,
      training,
      exponential_average_factor,
      epsilon,
    );
  }

  _dart_atg_miopen_batch_norm _atg_miopen_batch_norm;

  void atg_miopen_batch_norm_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> running_mean,
    ffi.Pointer<ffi.Void> running_var,
    ffi.Pointer<ffi.Void> save_mean,
    ffi.Pointer<ffi.Void> save_var,
    double epsilon,
  ) {
    _atg_miopen_batch_norm_backward ??= _dylib.lookupFunction<
        _c_atg_miopen_batch_norm_backward,
        _dart_atg_miopen_batch_norm_backward>('atg_miopen_batch_norm_backward');
    return _atg_miopen_batch_norm_backward(
      arg0,
      input,
      grad_output,
      weight,
      running_mean,
      running_var,
      save_mean,
      save_var,
      epsilon,
    );
  }

  _dart_atg_miopen_batch_norm_backward _atg_miopen_batch_norm_backward;

  void atg_miopen_convolution(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> bias,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int groups,
    int benchmark,
    int deterministic,
  ) {
    _atg_miopen_convolution ??= _dylib.lookupFunction<_c_atg_miopen_convolution,
        _dart_atg_miopen_convolution>('atg_miopen_convolution');
    return _atg_miopen_convolution(
      arg0,
      self,
      weight,
      bias,
      padding_data,
      padding_len,
      stride_data,
      stride_len,
      dilation_data,
      dilation_len,
      groups,
      benchmark,
      deterministic,
    );
  }

  _dart_atg_miopen_convolution _atg_miopen_convolution;

  void atg_miopen_convolution_backward_bias(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
  ) {
    _atg_miopen_convolution_backward_bias ??= _dylib.lookupFunction<
            _c_atg_miopen_convolution_backward_bias,
            _dart_atg_miopen_convolution_backward_bias>(
        'atg_miopen_convolution_backward_bias');
    return _atg_miopen_convolution_backward_bias(
      arg0,
      grad_output,
    );
  }

  _dart_atg_miopen_convolution_backward_bias
      _atg_miopen_convolution_backward_bias;

  void atg_miopen_convolution_backward_input(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Int64> self_size_data,
    int self_size_len,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int groups,
    int benchmark,
    int deterministic,
  ) {
    _atg_miopen_convolution_backward_input ??= _dylib.lookupFunction<
            _c_atg_miopen_convolution_backward_input,
            _dart_atg_miopen_convolution_backward_input>(
        'atg_miopen_convolution_backward_input');
    return _atg_miopen_convolution_backward_input(
      arg0,
      self_size_data,
      self_size_len,
      grad_output,
      weight,
      padding_data,
      padding_len,
      stride_data,
      stride_len,
      dilation_data,
      dilation_len,
      groups,
      benchmark,
      deterministic,
    );
  }

  _dart_atg_miopen_convolution_backward_input
      _atg_miopen_convolution_backward_input;

  void atg_miopen_convolution_backward_weight(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Int64> weight_size_data,
    int weight_size_len,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int groups,
    int benchmark,
    int deterministic,
  ) {
    _atg_miopen_convolution_backward_weight ??= _dylib.lookupFunction<
            _c_atg_miopen_convolution_backward_weight,
            _dart_atg_miopen_convolution_backward_weight>(
        'atg_miopen_convolution_backward_weight');
    return _atg_miopen_convolution_backward_weight(
      arg0,
      weight_size_data,
      weight_size_len,
      grad_output,
      self,
      padding_data,
      padding_len,
      stride_data,
      stride_len,
      dilation_data,
      dilation_len,
      groups,
      benchmark,
      deterministic,
    );
  }

  _dart_atg_miopen_convolution_backward_weight
      _atg_miopen_convolution_backward_weight;

  void atg_miopen_convolution_transpose(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> bias,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> output_padding_data,
    int output_padding_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int groups,
    int benchmark,
    int deterministic,
  ) {
    _atg_miopen_convolution_transpose ??= _dylib.lookupFunction<
            _c_atg_miopen_convolution_transpose,
            _dart_atg_miopen_convolution_transpose>(
        'atg_miopen_convolution_transpose');
    return _atg_miopen_convolution_transpose(
      arg0,
      self,
      weight,
      bias,
      padding_data,
      padding_len,
      output_padding_data,
      output_padding_len,
      stride_data,
      stride_len,
      dilation_data,
      dilation_len,
      groups,
      benchmark,
      deterministic,
    );
  }

  _dart_atg_miopen_convolution_transpose _atg_miopen_convolution_transpose;

  void atg_miopen_convolution_transpose_backward_input(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int groups,
    int benchmark,
    int deterministic,
  ) {
    _atg_miopen_convolution_transpose_backward_input ??= _dylib.lookupFunction<
            _c_atg_miopen_convolution_transpose_backward_input,
            _dart_atg_miopen_convolution_transpose_backward_input>(
        'atg_miopen_convolution_transpose_backward_input');
    return _atg_miopen_convolution_transpose_backward_input(
      arg0,
      grad_output,
      weight,
      padding_data,
      padding_len,
      stride_data,
      stride_len,
      dilation_data,
      dilation_len,
      groups,
      benchmark,
      deterministic,
    );
  }

  _dart_atg_miopen_convolution_transpose_backward_input
      _atg_miopen_convolution_transpose_backward_input;

  void atg_miopen_convolution_transpose_backward_weight(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Int64> weight_size_data,
    int weight_size_len,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int groups,
    int benchmark,
    int deterministic,
  ) {
    _atg_miopen_convolution_transpose_backward_weight ??= _dylib.lookupFunction<
            _c_atg_miopen_convolution_transpose_backward_weight,
            _dart_atg_miopen_convolution_transpose_backward_weight>(
        'atg_miopen_convolution_transpose_backward_weight');
    return _atg_miopen_convolution_transpose_backward_weight(
      arg0,
      weight_size_data,
      weight_size_len,
      grad_output,
      self,
      padding_data,
      padding_len,
      stride_data,
      stride_len,
      dilation_data,
      dilation_len,
      groups,
      benchmark,
      deterministic,
    );
  }

  _dart_atg_miopen_convolution_transpose_backward_weight
      _atg_miopen_convolution_transpose_backward_weight;

  void atg_miopen_depthwise_convolution(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> bias,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int groups,
    int benchmark,
    int deterministic,
  ) {
    _atg_miopen_depthwise_convolution ??= _dylib.lookupFunction<
            _c_atg_miopen_depthwise_convolution,
            _dart_atg_miopen_depthwise_convolution>(
        'atg_miopen_depthwise_convolution');
    return _atg_miopen_depthwise_convolution(
      arg0,
      self,
      weight,
      bias,
      padding_data,
      padding_len,
      stride_data,
      stride_len,
      dilation_data,
      dilation_len,
      groups,
      benchmark,
      deterministic,
    );
  }

  _dart_atg_miopen_depthwise_convolution _atg_miopen_depthwise_convolution;

  void atg_miopen_depthwise_convolution_backward_input(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Int64> self_size_data,
    int self_size_len,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int groups,
    int benchmark,
    int deterministic,
  ) {
    _atg_miopen_depthwise_convolution_backward_input ??= _dylib.lookupFunction<
            _c_atg_miopen_depthwise_convolution_backward_input,
            _dart_atg_miopen_depthwise_convolution_backward_input>(
        'atg_miopen_depthwise_convolution_backward_input');
    return _atg_miopen_depthwise_convolution_backward_input(
      arg0,
      self_size_data,
      self_size_len,
      grad_output,
      weight,
      padding_data,
      padding_len,
      stride_data,
      stride_len,
      dilation_data,
      dilation_len,
      groups,
      benchmark,
      deterministic,
    );
  }

  _dart_atg_miopen_depthwise_convolution_backward_input
      _atg_miopen_depthwise_convolution_backward_input;

  void atg_miopen_depthwise_convolution_backward_weight(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Int64> weight_size_data,
    int weight_size_len,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int groups,
    int benchmark,
    int deterministic,
  ) {
    _atg_miopen_depthwise_convolution_backward_weight ??= _dylib.lookupFunction<
            _c_atg_miopen_depthwise_convolution_backward_weight,
            _dart_atg_miopen_depthwise_convolution_backward_weight>(
        'atg_miopen_depthwise_convolution_backward_weight');
    return _atg_miopen_depthwise_convolution_backward_weight(
      arg0,
      weight_size_data,
      weight_size_len,
      grad_output,
      self,
      padding_data,
      padding_len,
      stride_data,
      stride_len,
      dilation_data,
      dilation_len,
      groups,
      benchmark,
      deterministic,
    );
  }

  _dart_atg_miopen_depthwise_convolution_backward_weight
      _atg_miopen_depthwise_convolution_backward_weight;

  void atg_miopen_rnn(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Pointer<ffi.Void>> weight_data,
    int weight_len,
    int weight_stride0,
    ffi.Pointer<ffi.Void> hx,
    ffi.Pointer<ffi.Void> cx,
    int mode,
    int hidden_size,
    int num_layers,
    int batch_first,
    double dropout,
    int train,
    int bidirectional,
    ffi.Pointer<ffi.Int64> batch_sizes_data,
    int batch_sizes_len,
    ffi.Pointer<ffi.Void> dropout_state,
  ) {
    _atg_miopen_rnn ??=
        _dylib.lookupFunction<_c_atg_miopen_rnn, _dart_atg_miopen_rnn>(
            'atg_miopen_rnn');
    return _atg_miopen_rnn(
      arg0,
      input,
      weight_data,
      weight_len,
      weight_stride0,
      hx,
      cx,
      mode,
      hidden_size,
      num_layers,
      batch_first,
      dropout,
      train,
      bidirectional,
      batch_sizes_data,
      batch_sizes_len,
      dropout_state,
    );
  }

  _dart_atg_miopen_rnn _atg_miopen_rnn;

  void atg_mkldnn_adaptive_avg_pool2d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
  ) {
    _atg_mkldnn_adaptive_avg_pool2d ??= _dylib.lookupFunction<
        _c_atg_mkldnn_adaptive_avg_pool2d,
        _dart_atg_mkldnn_adaptive_avg_pool2d>('atg_mkldnn_adaptive_avg_pool2d');
    return _atg_mkldnn_adaptive_avg_pool2d(
      arg0,
      self,
      output_size_data,
      output_size_len,
    );
  }

  _dart_atg_mkldnn_adaptive_avg_pool2d _atg_mkldnn_adaptive_avg_pool2d;

  void atg_mkldnn_convolution(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> bias,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int groups,
  ) {
    _atg_mkldnn_convolution ??= _dylib.lookupFunction<_c_atg_mkldnn_convolution,
        _dart_atg_mkldnn_convolution>('atg_mkldnn_convolution');
    return _atg_mkldnn_convolution(
      arg0,
      self,
      weight,
      bias,
      padding_data,
      padding_len,
      stride_data,
      stride_len,
      dilation_data,
      dilation_len,
      groups,
    );
  }

  _dart_atg_mkldnn_convolution _atg_mkldnn_convolution;

  void atg_mkldnn_convolution_backward_input(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Int64> self_size_data,
    int self_size_len,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int groups,
    int bias_defined,
  ) {
    _atg_mkldnn_convolution_backward_input ??= _dylib.lookupFunction<
            _c_atg_mkldnn_convolution_backward_input,
            _dart_atg_mkldnn_convolution_backward_input>(
        'atg_mkldnn_convolution_backward_input');
    return _atg_mkldnn_convolution_backward_input(
      arg0,
      self_size_data,
      self_size_len,
      grad_output,
      weight,
      padding_data,
      padding_len,
      stride_data,
      stride_len,
      dilation_data,
      dilation_len,
      groups,
      bias_defined,
    );
  }

  _dart_atg_mkldnn_convolution_backward_input
      _atg_mkldnn_convolution_backward_input;

  void atg_mkldnn_convolution_backward_weights(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Int64> weight_size_data,
    int weight_size_len,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int groups,
    int bias_defined,
  ) {
    _atg_mkldnn_convolution_backward_weights ??= _dylib.lookupFunction<
            _c_atg_mkldnn_convolution_backward_weights,
            _dart_atg_mkldnn_convolution_backward_weights>(
        'atg_mkldnn_convolution_backward_weights');
    return _atg_mkldnn_convolution_backward_weights(
      arg0,
      weight_size_data,
      weight_size_len,
      grad_output,
      self,
      padding_data,
      padding_len,
      stride_data,
      stride_len,
      dilation_data,
      dilation_len,
      groups,
      bias_defined,
    );
  }

  _dart_atg_mkldnn_convolution_backward_weights
      _atg_mkldnn_convolution_backward_weights;

  void atg_mkldnn_linear(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> bias,
  ) {
    _atg_mkldnn_linear ??=
        _dylib.lookupFunction<_c_atg_mkldnn_linear, _dart_atg_mkldnn_linear>(
            'atg_mkldnn_linear');
    return _atg_mkldnn_linear(
      arg0,
      input,
      weight,
      bias,
    );
  }

  _dart_atg_mkldnn_linear _atg_mkldnn_linear;

  void atg_mkldnn_max_pool2d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int ceil_mode,
  ) {
    _atg_mkldnn_max_pool2d ??= _dylib.lookupFunction<_c_atg_mkldnn_max_pool2d,
        _dart_atg_mkldnn_max_pool2d>('atg_mkldnn_max_pool2d');
    return _atg_mkldnn_max_pool2d(
      arg0,
      self,
      kernel_size_data,
      kernel_size_len,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      dilation_data,
      dilation_len,
      ceil_mode,
    );
  }

  _dart_atg_mkldnn_max_pool2d _atg_mkldnn_max_pool2d;

  void atg_mkldnn_reorder_conv2d_weight(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int groups,
  ) {
    _atg_mkldnn_reorder_conv2d_weight ??= _dylib.lookupFunction<
            _c_atg_mkldnn_reorder_conv2d_weight,
            _dart_atg_mkldnn_reorder_conv2d_weight>(
        'atg_mkldnn_reorder_conv2d_weight');
    return _atg_mkldnn_reorder_conv2d_weight(
      arg0,
      self,
      padding_data,
      padding_len,
      stride_data,
      stride_len,
      dilation_data,
      dilation_len,
      groups,
    );
  }

  _dart_atg_mkldnn_reorder_conv2d_weight _atg_mkldnn_reorder_conv2d_weight;

  void atg_mm(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> mat2,
  ) {
    _atg_mm ??= _dylib.lookupFunction<_c_atg_mm, _dart_atg_mm>('atg_mm');
    return _atg_mm(
      arg0,
      self,
      mat2,
    );
  }

  _dart_atg_mm _atg_mm;

  void atg_mm_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> mat2,
  ) {
    _atg_mm_out ??=
        _dylib.lookupFunction<_c_atg_mm_out, _dart_atg_mm_out>('atg_mm_out');
    return _atg_mm_out(
      arg0,
      out,
      self,
      mat2,
    );
  }

  _dart_atg_mm_out _atg_mm_out;

  void atg_mode(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int keepdim,
  ) {
    _atg_mode ??=
        _dylib.lookupFunction<_c_atg_mode, _dart_atg_mode>('atg_mode');
    return _atg_mode(
      arg0,
      self,
      dim,
      keepdim,
    );
  }

  _dart_atg_mode _atg_mode;

  void atg_mode_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> values,
    ffi.Pointer<ffi.Void> indices,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int keepdim,
  ) {
    _atg_mode_out ??= _dylib
        .lookupFunction<_c_atg_mode_out, _dart_atg_mode_out>('atg_mode_out');
    return _atg_mode_out(
      arg0,
      values,
      indices,
      self,
      dim,
      keepdim,
    );
  }

  _dart_atg_mode_out _atg_mode_out;

  void atg_mse_loss(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    int reduction,
  ) {
    _atg_mse_loss ??= _dylib
        .lookupFunction<_c_atg_mse_loss, _dart_atg_mse_loss>('atg_mse_loss');
    return _atg_mse_loss(
      arg0,
      self,
      target,
      reduction,
    );
  }

  _dart_atg_mse_loss _atg_mse_loss;

  void atg_mse_loss_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    int reduction,
  ) {
    _atg_mse_loss_backward ??= _dylib.lookupFunction<_c_atg_mse_loss_backward,
        _dart_atg_mse_loss_backward>('atg_mse_loss_backward');
    return _atg_mse_loss_backward(
      arg0,
      grad_output,
      self,
      target,
      reduction,
    );
  }

  _dart_atg_mse_loss_backward _atg_mse_loss_backward;

  void atg_mse_loss_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    int reduction,
  ) {
    _atg_mse_loss_backward_out ??= _dylib.lookupFunction<
        _c_atg_mse_loss_backward_out,
        _dart_atg_mse_loss_backward_out>('atg_mse_loss_backward_out');
    return _atg_mse_loss_backward_out(
      arg0,
      grad_input,
      grad_output,
      self,
      target,
      reduction,
    );
  }

  _dart_atg_mse_loss_backward_out _atg_mse_loss_backward_out;

  void atg_mse_loss_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    int reduction,
  ) {
    _atg_mse_loss_out ??=
        _dylib.lookupFunction<_c_atg_mse_loss_out, _dart_atg_mse_loss_out>(
            'atg_mse_loss_out');
    return _atg_mse_loss_out(
      arg0,
      out,
      self,
      target,
      reduction,
    );
  }

  _dart_atg_mse_loss_out _atg_mse_loss_out;

  void atg_mul(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_mul ??= _dylib.lookupFunction<_c_atg_mul, _dart_atg_mul>('atg_mul');
    return _atg_mul(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_mul _atg_mul;

  void atg_mul1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_mul1 ??=
        _dylib.lookupFunction<_c_atg_mul1, _dart_atg_mul1>('atg_mul1');
    return _atg_mul1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_mul1 _atg_mul1;

  void atg_mul_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_mul_ ??=
        _dylib.lookupFunction<_c_atg_mul_, _dart_atg_mul_>('atg_mul_');
    return _atg_mul_(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_mul_ _atg_mul_;

  void atg_mul_1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_mul_1 ??=
        _dylib.lookupFunction<_c_atg_mul_1, _dart_atg_mul_1>('atg_mul_1');
    return _atg_mul_1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_mul_1 _atg_mul_1;

  void atg_mul_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_mul_out ??=
        _dylib.lookupFunction<_c_atg_mul_out, _dart_atg_mul_out>('atg_mul_out');
    return _atg_mul_out(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_mul_out _atg_mul_out;

  void atg_multi_margin_loss_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<ffi.Void> margin,
    ffi.Pointer<ffi.Void> weight,
    int reduction,
  ) {
    _atg_multi_margin_loss_backward ??= _dylib.lookupFunction<
        _c_atg_multi_margin_loss_backward,
        _dart_atg_multi_margin_loss_backward>('atg_multi_margin_loss_backward');
    return _atg_multi_margin_loss_backward(
      arg0,
      grad_output,
      self,
      target,
      p,
      margin,
      weight,
      reduction,
    );
  }

  _dart_atg_multi_margin_loss_backward _atg_multi_margin_loss_backward;

  void atg_multi_margin_loss_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<ffi.Void> margin,
    ffi.Pointer<ffi.Void> weight,
    int reduction,
  ) {
    _atg_multi_margin_loss_backward_out ??= _dylib.lookupFunction<
            _c_atg_multi_margin_loss_backward_out,
            _dart_atg_multi_margin_loss_backward_out>(
        'atg_multi_margin_loss_backward_out');
    return _atg_multi_margin_loss_backward_out(
      arg0,
      grad_input,
      grad_output,
      self,
      target,
      p,
      margin,
      weight,
      reduction,
    );
  }

  _dart_atg_multi_margin_loss_backward_out _atg_multi_margin_loss_backward_out;

  void atg_multilabel_margin_loss(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    int reduction,
  ) {
    _atg_multilabel_margin_loss ??= _dylib.lookupFunction<
        _c_atg_multilabel_margin_loss,
        _dart_atg_multilabel_margin_loss>('atg_multilabel_margin_loss');
    return _atg_multilabel_margin_loss(
      arg0,
      self,
      target,
      reduction,
    );
  }

  _dart_atg_multilabel_margin_loss _atg_multilabel_margin_loss;

  void atg_multilabel_margin_loss_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    int reduction,
    ffi.Pointer<ffi.Void> is_target,
  ) {
    _atg_multilabel_margin_loss_backward ??= _dylib.lookupFunction<
            _c_atg_multilabel_margin_loss_backward,
            _dart_atg_multilabel_margin_loss_backward>(
        'atg_multilabel_margin_loss_backward');
    return _atg_multilabel_margin_loss_backward(
      arg0,
      grad_output,
      self,
      target,
      reduction,
      is_target,
    );
  }

  _dart_atg_multilabel_margin_loss_backward
      _atg_multilabel_margin_loss_backward;

  void atg_multilabel_margin_loss_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    int reduction,
    ffi.Pointer<ffi.Void> is_target,
  ) {
    _atg_multilabel_margin_loss_backward_out ??= _dylib.lookupFunction<
            _c_atg_multilabel_margin_loss_backward_out,
            _dart_atg_multilabel_margin_loss_backward_out>(
        'atg_multilabel_margin_loss_backward_out');
    return _atg_multilabel_margin_loss_backward_out(
      arg0,
      grad_input,
      grad_output,
      self,
      target,
      reduction,
      is_target,
    );
  }

  _dart_atg_multilabel_margin_loss_backward_out
      _atg_multilabel_margin_loss_backward_out;

  void atg_multilabel_margin_loss_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    int reduction,
  ) {
    _atg_multilabel_margin_loss_out ??= _dylib.lookupFunction<
        _c_atg_multilabel_margin_loss_out,
        _dart_atg_multilabel_margin_loss_out>('atg_multilabel_margin_loss_out');
    return _atg_multilabel_margin_loss_out(
      arg0,
      out,
      self,
      target,
      reduction,
    );
  }

  _dart_atg_multilabel_margin_loss_out _atg_multilabel_margin_loss_out;

  void atg_multinomial(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int num_samples,
    int replacement,
  ) {
    _atg_multinomial ??=
        _dylib.lookupFunction<_c_atg_multinomial, _dart_atg_multinomial>(
            'atg_multinomial');
    return _atg_multinomial(
      arg0,
      self,
      num_samples,
      replacement,
    );
  }

  _dart_atg_multinomial _atg_multinomial;

  void atg_multinomial_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    int num_samples,
    int replacement,
  ) {
    _atg_multinomial_out ??= _dylib.lookupFunction<_c_atg_multinomial_out,
        _dart_atg_multinomial_out>('atg_multinomial_out');
    return _atg_multinomial_out(
      arg0,
      out,
      self,
      num_samples,
      replacement,
    );
  }

  _dart_atg_multinomial_out _atg_multinomial_out;

  void atg_mv(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> vec,
  ) {
    _atg_mv ??= _dylib.lookupFunction<_c_atg_mv, _dart_atg_mv>('atg_mv');
    return _atg_mv(
      arg0,
      self,
      vec,
    );
  }

  _dart_atg_mv _atg_mv;

  void atg_mv_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> vec,
  ) {
    _atg_mv_out ??=
        _dylib.lookupFunction<_c_atg_mv_out, _dart_atg_mv_out>('atg_mv_out');
    return _atg_mv_out(
      arg0,
      out,
      self,
      vec,
    );
  }

  _dart_atg_mv_out _atg_mv_out;

  void atg_mvlgamma(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int p,
  ) {
    _atg_mvlgamma ??= _dylib
        .lookupFunction<_c_atg_mvlgamma, _dart_atg_mvlgamma>('atg_mvlgamma');
    return _atg_mvlgamma(
      arg0,
      self,
      p,
    );
  }

  _dart_atg_mvlgamma _atg_mvlgamma;

  void atg_mvlgamma_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int p,
  ) {
    _atg_mvlgamma_ ??= _dylib
        .lookupFunction<_c_atg_mvlgamma_, _dart_atg_mvlgamma_>('atg_mvlgamma_');
    return _atg_mvlgamma_(
      arg0,
      self,
      p,
    );
  }

  _dart_atg_mvlgamma_ _atg_mvlgamma_;

  void atg_narrow(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int start,
    int length,
  ) {
    _atg_narrow ??=
        _dylib.lookupFunction<_c_atg_narrow, _dart_atg_narrow>('atg_narrow');
    return _atg_narrow(
      arg0,
      self,
      dim,
      start,
      length,
    );
  }

  _dart_atg_narrow _atg_narrow;

  void atg_narrow1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    ffi.Pointer<ffi.Void> start,
    int length,
  ) {
    _atg_narrow1 ??=
        _dylib.lookupFunction<_c_atg_narrow1, _dart_atg_narrow1>('atg_narrow1');
    return _atg_narrow1(
      arg0,
      self,
      dim,
      start,
      length,
    );
  }

  _dart_atg_narrow1 _atg_narrow1;

  void atg_narrow_copy(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int start,
    int length,
  ) {
    _atg_narrow_copy ??=
        _dylib.lookupFunction<_c_atg_narrow_copy, _dart_atg_narrow_copy>(
            'atg_narrow_copy');
    return _atg_narrow_copy(
      arg0,
      self,
      dim,
      start,
      length,
    );
  }

  _dart_atg_narrow_copy _atg_narrow_copy;

  void atg_native_batch_norm(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> bias,
    ffi.Pointer<ffi.Void> running_mean,
    ffi.Pointer<ffi.Void> running_var,
    int training,
    double momentum,
    double eps,
  ) {
    _atg_native_batch_norm ??= _dylib.lookupFunction<_c_atg_native_batch_norm,
        _dart_atg_native_batch_norm>('atg_native_batch_norm');
    return _atg_native_batch_norm(
      arg0,
      input,
      weight,
      bias,
      running_mean,
      running_var,
      training,
      momentum,
      eps,
    );
  }

  _dart_atg_native_batch_norm _atg_native_batch_norm;

  void atg_native_batch_norm_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> save_mean,
    ffi.Pointer<ffi.Void> save_invstd,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> bias,
    ffi.Pointer<ffi.Void> running_mean,
    ffi.Pointer<ffi.Void> running_var,
    int training,
    double momentum,
    double eps,
  ) {
    _atg_native_batch_norm_out ??= _dylib.lookupFunction<
        _c_atg_native_batch_norm_out,
        _dart_atg_native_batch_norm_out>('atg_native_batch_norm_out');
    return _atg_native_batch_norm_out(
      arg0,
      out,
      save_mean,
      save_invstd,
      input,
      weight,
      bias,
      running_mean,
      running_var,
      training,
      momentum,
      eps,
    );
  }

  _dart_atg_native_batch_norm_out _atg_native_batch_norm_out;

  void atg_native_group_norm(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> bias,
    int n,
    int C,
    int HxW,
    int group,
    double eps,
  ) {
    _atg_native_group_norm ??= _dylib.lookupFunction<_c_atg_native_group_norm,
        _dart_atg_native_group_norm>('atg_native_group_norm');
    return _atg_native_group_norm(
      arg0,
      input,
      weight,
      bias,
      n,
      C,
      HxW,
      group,
      eps,
    );
  }

  _dart_atg_native_group_norm _atg_native_group_norm;

  void atg_native_layer_norm(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> bias,
    int M,
    int n,
    double eps,
  ) {
    _atg_native_layer_norm ??= _dylib.lookupFunction<_c_atg_native_layer_norm,
        _dart_atg_native_layer_norm>('atg_native_layer_norm');
    return _atg_native_layer_norm(
      arg0,
      input,
      weight,
      bias,
      M,
      n,
      eps,
    );
  }

  _dart_atg_native_layer_norm _atg_native_layer_norm;

  void atg_native_norm(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_native_norm ??=
        _dylib.lookupFunction<_c_atg_native_norm, _dart_atg_native_norm>(
            'atg_native_norm');
    return _atg_native_norm(
      arg0,
      self,
    );
  }

  _dart_atg_native_norm _atg_native_norm;

  void atg_ne(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_ne ??= _dylib.lookupFunction<_c_atg_ne, _dart_atg_ne>('atg_ne');
    return _atg_ne(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_ne _atg_ne;

  void atg_ne1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_ne1 ??= _dylib.lookupFunction<_c_atg_ne1, _dart_atg_ne1>('atg_ne1');
    return _atg_ne1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_ne1 _atg_ne1;

  void atg_ne_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_ne_ ??= _dylib.lookupFunction<_c_atg_ne_, _dart_atg_ne_>('atg_ne_');
    return _atg_ne_(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_ne_ _atg_ne_;

  void atg_ne_1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_ne_1 ??=
        _dylib.lookupFunction<_c_atg_ne_1, _dart_atg_ne_1>('atg_ne_1');
    return _atg_ne_1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_ne_1 _atg_ne_1;

  void atg_ne_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_ne_out ??=
        _dylib.lookupFunction<_c_atg_ne_out, _dart_atg_ne_out>('atg_ne_out');
    return _atg_ne_out(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_ne_out _atg_ne_out;

  void atg_ne_out1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_ne_out1 ??=
        _dylib.lookupFunction<_c_atg_ne_out1, _dart_atg_ne_out1>('atg_ne_out1');
    return _atg_ne_out1(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_ne_out1 _atg_ne_out1;

  void atg_neg(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_neg ??= _dylib.lookupFunction<_c_atg_neg, _dart_atg_neg>('atg_neg');
    return _atg_neg(
      arg0,
      self,
    );
  }

  _dart_atg_neg _atg_neg;

  void atg_neg_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_neg_ ??=
        _dylib.lookupFunction<_c_atg_neg_, _dart_atg_neg_>('atg_neg_');
    return _atg_neg_(
      arg0,
      self,
    );
  }

  _dart_atg_neg_ _atg_neg_;

  void atg_neg_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_neg_out ??=
        _dylib.lookupFunction<_c_atg_neg_out, _dart_atg_neg_out>('atg_neg_out');
    return _atg_neg_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_neg_out _atg_neg_out;

  void atg_new_empty(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
    int options_kind,
    int options_device,
  ) {
    _atg_new_empty ??= _dylib
        .lookupFunction<_c_atg_new_empty, _dart_atg_new_empty>('atg_new_empty');
    return _atg_new_empty(
      arg0,
      self,
      size_data,
      size_len,
      options_kind,
      options_device,
    );
  }

  _dart_atg_new_empty _atg_new_empty;

  void atg_new_full(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
    ffi.Pointer<ffi.Void> fill_value,
    int options_kind,
    int options_device,
  ) {
    _atg_new_full ??= _dylib
        .lookupFunction<_c_atg_new_full, _dart_atg_new_full>('atg_new_full');
    return _atg_new_full(
      arg0,
      self,
      size_data,
      size_len,
      fill_value,
      options_kind,
      options_device,
    );
  }

  _dart_atg_new_full _atg_new_full;

  void atg_new_zeros(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
    int options_kind,
    int options_device,
  ) {
    _atg_new_zeros ??= _dylib
        .lookupFunction<_c_atg_new_zeros, _dart_atg_new_zeros>('atg_new_zeros');
    return _atg_new_zeros(
      arg0,
      self,
      size_data,
      size_len,
      options_kind,
      options_device,
    );
  }

  _dart_atg_new_zeros _atg_new_zeros;

  void atg_nll_loss(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    ffi.Pointer<ffi.Void> weight,
    int reduction,
    int ignore_index,
  ) {
    _atg_nll_loss ??= _dylib
        .lookupFunction<_c_atg_nll_loss, _dart_atg_nll_loss>('atg_nll_loss');
    return _atg_nll_loss(
      arg0,
      self,
      target,
      weight,
      reduction,
      ignore_index,
    );
  }

  _dart_atg_nll_loss _atg_nll_loss;

  void atg_nll_loss2d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    ffi.Pointer<ffi.Void> weight,
    int reduction,
    int ignore_index,
  ) {
    _atg_nll_loss2d ??=
        _dylib.lookupFunction<_c_atg_nll_loss2d, _dart_atg_nll_loss2d>(
            'atg_nll_loss2d');
    return _atg_nll_loss2d(
      arg0,
      self,
      target,
      weight,
      reduction,
      ignore_index,
    );
  }

  _dart_atg_nll_loss2d _atg_nll_loss2d;

  void atg_nll_loss2d_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    ffi.Pointer<ffi.Void> weight,
    int reduction,
    int ignore_index,
    ffi.Pointer<ffi.Void> total_weight,
  ) {
    _atg_nll_loss2d_backward ??= _dylib.lookupFunction<
        _c_atg_nll_loss2d_backward,
        _dart_atg_nll_loss2d_backward>('atg_nll_loss2d_backward');
    return _atg_nll_loss2d_backward(
      arg0,
      grad_output,
      self,
      target,
      weight,
      reduction,
      ignore_index,
      total_weight,
    );
  }

  _dart_atg_nll_loss2d_backward _atg_nll_loss2d_backward;

  void atg_nll_loss2d_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    ffi.Pointer<ffi.Void> weight,
    int reduction,
    int ignore_index,
    ffi.Pointer<ffi.Void> total_weight,
  ) {
    _atg_nll_loss2d_backward_out ??= _dylib.lookupFunction<
        _c_atg_nll_loss2d_backward_out,
        _dart_atg_nll_loss2d_backward_out>('atg_nll_loss2d_backward_out');
    return _atg_nll_loss2d_backward_out(
      arg0,
      grad_input,
      grad_output,
      self,
      target,
      weight,
      reduction,
      ignore_index,
      total_weight,
    );
  }

  _dart_atg_nll_loss2d_backward_out _atg_nll_loss2d_backward_out;

  void atg_nll_loss2d_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    ffi.Pointer<ffi.Void> weight,
    int reduction,
    int ignore_index,
  ) {
    _atg_nll_loss2d_out ??=
        _dylib.lookupFunction<_c_atg_nll_loss2d_out, _dart_atg_nll_loss2d_out>(
            'atg_nll_loss2d_out');
    return _atg_nll_loss2d_out(
      arg0,
      out,
      self,
      target,
      weight,
      reduction,
      ignore_index,
    );
  }

  _dart_atg_nll_loss2d_out _atg_nll_loss2d_out;

  void atg_nll_loss_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    ffi.Pointer<ffi.Void> weight,
    int reduction,
    int ignore_index,
    ffi.Pointer<ffi.Void> total_weight,
  ) {
    _atg_nll_loss_backward ??= _dylib.lookupFunction<_c_atg_nll_loss_backward,
        _dart_atg_nll_loss_backward>('atg_nll_loss_backward');
    return _atg_nll_loss_backward(
      arg0,
      grad_output,
      self,
      target,
      weight,
      reduction,
      ignore_index,
      total_weight,
    );
  }

  _dart_atg_nll_loss_backward _atg_nll_loss_backward;

  void atg_nll_loss_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    ffi.Pointer<ffi.Void> weight,
    int reduction,
    int ignore_index,
    ffi.Pointer<ffi.Void> total_weight,
  ) {
    _atg_nll_loss_backward_out ??= _dylib.lookupFunction<
        _c_atg_nll_loss_backward_out,
        _dart_atg_nll_loss_backward_out>('atg_nll_loss_backward_out');
    return _atg_nll_loss_backward_out(
      arg0,
      grad_input,
      grad_output,
      self,
      target,
      weight,
      reduction,
      ignore_index,
      total_weight,
    );
  }

  _dart_atg_nll_loss_backward_out _atg_nll_loss_backward_out;

  void atg_nll_loss_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    ffi.Pointer<ffi.Void> weight,
    int reduction,
    int ignore_index,
  ) {
    _atg_nll_loss_out ??=
        _dylib.lookupFunction<_c_atg_nll_loss_out, _dart_atg_nll_loss_out>(
            'atg_nll_loss_out');
    return _atg_nll_loss_out(
      arg0,
      out,
      self,
      target,
      weight,
      reduction,
      ignore_index,
    );
  }

  _dart_atg_nll_loss_out _atg_nll_loss_out;

  void atg_nonzero(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_nonzero ??=
        _dylib.lookupFunction<_c_atg_nonzero, _dart_atg_nonzero>('atg_nonzero');
    return _atg_nonzero(
      arg0,
      self,
    );
  }

  _dart_atg_nonzero _atg_nonzero;

  ffi.Pointer<ffi.Pointer<ffi.Void>> atg_nonzero_numpy(
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_nonzero_numpy ??=
        _dylib.lookupFunction<_c_atg_nonzero_numpy, _dart_atg_nonzero_numpy>(
            'atg_nonzero_numpy');
    return _atg_nonzero_numpy(
      self,
    );
  }

  _dart_atg_nonzero_numpy _atg_nonzero_numpy;

  void atg_nonzero_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_nonzero_out ??=
        _dylib.lookupFunction<_c_atg_nonzero_out, _dart_atg_nonzero_out>(
            'atg_nonzero_out');
    return _atg_nonzero_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_nonzero_out _atg_nonzero_out;

  void atg_norm(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_norm ??=
        _dylib.lookupFunction<_c_atg_norm, _dart_atg_norm>('atg_norm');
    return _atg_norm(
      arg0,
      self,
    );
  }

  _dart_atg_norm _atg_norm;

  void atg_norm1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> p,
    int dtype,
  ) {
    _atg_norm1 ??=
        _dylib.lookupFunction<_c_atg_norm1, _dart_atg_norm1>('atg_norm1');
    return _atg_norm1(
      arg0,
      self,
      p,
      dtype,
    );
  }

  _dart_atg_norm1 _atg_norm1;

  void atg_norm2(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<ffi.Int64> dim_data,
    int dim_len,
    int keepdim,
  ) {
    _atg_norm2 ??=
        _dylib.lookupFunction<_c_atg_norm2, _dart_atg_norm2>('atg_norm2');
    return _atg_norm2(
      arg0,
      self,
      p,
      dim_data,
      dim_len,
      keepdim,
    );
  }

  _dart_atg_norm2 _atg_norm2;

  void atg_norm3(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<ffi.Int64> dim_data,
    int dim_len,
    int keepdim,
    int dtype,
  ) {
    _atg_norm3 ??=
        _dylib.lookupFunction<_c_atg_norm3, _dart_atg_norm3>('atg_norm3');
    return _atg_norm3(
      arg0,
      self,
      p,
      dim_data,
      dim_len,
      keepdim,
      dtype,
    );
  }

  _dart_atg_norm3 _atg_norm3;

  void atg_norm_except_dim(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> v,
    int pow,
    int dim,
  ) {
    _atg_norm_except_dim ??= _dylib.lookupFunction<_c_atg_norm_except_dim,
        _dart_atg_norm_except_dim>('atg_norm_except_dim');
    return _atg_norm_except_dim(
      arg0,
      v,
      pow,
      dim,
    );
  }

  _dart_atg_norm_except_dim _atg_norm_except_dim;

  void atg_norm_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<ffi.Int64> dim_data,
    int dim_len,
    int keepdim,
  ) {
    _atg_norm_out ??= _dylib
        .lookupFunction<_c_atg_norm_out, _dart_atg_norm_out>('atg_norm_out');
    return _atg_norm_out(
      arg0,
      out,
      self,
      p,
      dim_data,
      dim_len,
      keepdim,
    );
  }

  _dart_atg_norm_out _atg_norm_out;

  void atg_norm_out1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<ffi.Int64> dim_data,
    int dim_len,
    int keepdim,
    int dtype,
  ) {
    _atg_norm_out1 ??= _dylib
        .lookupFunction<_c_atg_norm_out1, _dart_atg_norm_out1>('atg_norm_out1');
    return _atg_norm_out1(
      arg0,
      out,
      self,
      p,
      dim_data,
      dim_len,
      keepdim,
      dtype,
    );
  }

  _dart_atg_norm_out1 _atg_norm_out1;

  void atg_normal_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    double mean,
    double std,
  ) {
    _atg_normal_ ??=
        _dylib.lookupFunction<_c_atg_normal_, _dart_atg_normal_>('atg_normal_');
    return _atg_normal_(
      arg0,
      self,
      mean,
      std,
    );
  }

  _dart_atg_normal_ _atg_normal_;

  void atg_normal_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> mean,
    double std,
  ) {
    _atg_normal_out ??=
        _dylib.lookupFunction<_c_atg_normal_out, _dart_atg_normal_out>(
            'atg_normal_out');
    return _atg_normal_out(
      arg0,
      out,
      mean,
      std,
    );
  }

  _dart_atg_normal_out _atg_normal_out;

  void atg_normal_out1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    double mean,
    ffi.Pointer<ffi.Void> std,
  ) {
    _atg_normal_out1 ??=
        _dylib.lookupFunction<_c_atg_normal_out1, _dart_atg_normal_out1>(
            'atg_normal_out1');
    return _atg_normal_out1(
      arg0,
      out,
      mean,
      std,
    );
  }

  _dart_atg_normal_out1 _atg_normal_out1;

  void atg_normal_out2(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> mean,
    ffi.Pointer<ffi.Void> std,
  ) {
    _atg_normal_out2 ??=
        _dylib.lookupFunction<_c_atg_normal_out2, _dart_atg_normal_out2>(
            'atg_normal_out2');
    return _atg_normal_out2(
      arg0,
      out,
      mean,
      std,
    );
  }

  _dart_atg_normal_out2 _atg_normal_out2;

  void atg_normal_out3(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    double mean,
    double std,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
  ) {
    _atg_normal_out3 ??=
        _dylib.lookupFunction<_c_atg_normal_out3, _dart_atg_normal_out3>(
            'atg_normal_out3');
    return _atg_normal_out3(
      arg0,
      out,
      mean,
      std,
      size_data,
      size_len,
    );
  }

  _dart_atg_normal_out3 _atg_normal_out3;

  void atg_nuclear_norm(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int keepdim,
  ) {
    _atg_nuclear_norm ??=
        _dylib.lookupFunction<_c_atg_nuclear_norm, _dart_atg_nuclear_norm>(
            'atg_nuclear_norm');
    return _atg_nuclear_norm(
      arg0,
      self,
      keepdim,
    );
  }

  _dart_atg_nuclear_norm _atg_nuclear_norm;

  void atg_nuclear_norm1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> dim_data,
    int dim_len,
    int keepdim,
  ) {
    _atg_nuclear_norm1 ??=
        _dylib.lookupFunction<_c_atg_nuclear_norm1, _dart_atg_nuclear_norm1>(
            'atg_nuclear_norm1');
    return _atg_nuclear_norm1(
      arg0,
      self,
      dim_data,
      dim_len,
      keepdim,
    );
  }

  _dart_atg_nuclear_norm1 _atg_nuclear_norm1;

  void atg_nuclear_norm_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    int keepdim,
  ) {
    _atg_nuclear_norm_out ??= _dylib.lookupFunction<_c_atg_nuclear_norm_out,
        _dart_atg_nuclear_norm_out>('atg_nuclear_norm_out');
    return _atg_nuclear_norm_out(
      arg0,
      out,
      self,
      keepdim,
    );
  }

  _dart_atg_nuclear_norm_out _atg_nuclear_norm_out;

  void atg_nuclear_norm_out1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> dim_data,
    int dim_len,
    int keepdim,
  ) {
    _atg_nuclear_norm_out1 ??= _dylib.lookupFunction<_c_atg_nuclear_norm_out1,
        _dart_atg_nuclear_norm_out1>('atg_nuclear_norm_out1');
    return _atg_nuclear_norm_out1(
      arg0,
      out,
      self,
      dim_data,
      dim_len,
      keepdim,
    );
  }

  _dart_atg_nuclear_norm_out1 _atg_nuclear_norm_out1;

  void atg_numpy_t(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_numpy_t ??=
        _dylib.lookupFunction<_c_atg_numpy_t, _dart_atg_numpy_t>('atg_numpy_t');
    return _atg_numpy_t(
      arg0,
      self,
    );
  }

  _dart_atg_numpy_t _atg_numpy_t;

  void atg_one_hot(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int num_classes,
  ) {
    _atg_one_hot ??=
        _dylib.lookupFunction<_c_atg_one_hot, _dart_atg_one_hot>('atg_one_hot');
    return _atg_one_hot(
      arg0,
      self,
      num_classes,
    );
  }

  _dart_atg_one_hot _atg_one_hot;

  void atg_ones(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
    int options_kind,
    int options_device,
  ) {
    _atg_ones ??=
        _dylib.lookupFunction<_c_atg_ones, _dart_atg_ones>('atg_ones');
    return _atg_ones(
      arg0,
      size_data,
      size_len,
      options_kind,
      options_device,
    );
  }

  _dart_atg_ones _atg_ones;

  void atg_ones_like(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_ones_like ??= _dylib
        .lookupFunction<_c_atg_ones_like, _dart_atg_ones_like>('atg_ones_like');
    return _atg_ones_like(
      arg0,
      self,
    );
  }

  _dart_atg_ones_like _atg_ones_like;

  void atg_ones_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
  ) {
    _atg_ones_out ??= _dylib
        .lookupFunction<_c_atg_ones_out, _dart_atg_ones_out>('atg_ones_out');
    return _atg_ones_out(
      arg0,
      out,
      size_data,
      size_len,
    );
  }

  _dart_atg_ones_out _atg_ones_out;

  void atg_orgqr(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> input2,
  ) {
    _atg_orgqr ??=
        _dylib.lookupFunction<_c_atg_orgqr, _dart_atg_orgqr>('atg_orgqr');
    return _atg_orgqr(
      arg0,
      self,
      input2,
    );
  }

  _dart_atg_orgqr _atg_orgqr;

  void atg_orgqr_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> input2,
  ) {
    _atg_orgqr_out ??= _dylib
        .lookupFunction<_c_atg_orgqr_out, _dart_atg_orgqr_out>('atg_orgqr_out');
    return _atg_orgqr_out(
      arg0,
      out,
      self,
      input2,
    );
  }

  _dart_atg_orgqr_out _atg_orgqr_out;

  void atg_ormqr(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> input2,
    ffi.Pointer<ffi.Void> input3,
    int left,
    int transpose,
  ) {
    _atg_ormqr ??=
        _dylib.lookupFunction<_c_atg_ormqr, _dart_atg_ormqr>('atg_ormqr');
    return _atg_ormqr(
      arg0,
      self,
      input2,
      input3,
      left,
      transpose,
    );
  }

  _dart_atg_ormqr _atg_ormqr;

  void atg_ormqr_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> input2,
    ffi.Pointer<ffi.Void> input3,
    int left,
    int transpose,
  ) {
    _atg_ormqr_out ??= _dylib
        .lookupFunction<_c_atg_ormqr_out, _dart_atg_ormqr_out>('atg_ormqr_out');
    return _atg_ormqr_out(
      arg0,
      out,
      self,
      input2,
      input3,
      left,
      transpose,
    );
  }

  _dart_atg_ormqr_out _atg_ormqr_out;

  void atg_pairwise_distance(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> x1,
    ffi.Pointer<ffi.Void> x2,
    double p,
    double eps,
    int keepdim,
  ) {
    _atg_pairwise_distance ??= _dylib.lookupFunction<_c_atg_pairwise_distance,
        _dart_atg_pairwise_distance>('atg_pairwise_distance');
    return _atg_pairwise_distance(
      arg0,
      x1,
      x2,
      p,
      eps,
      keepdim,
    );
  }

  _dart_atg_pairwise_distance _atg_pairwise_distance;

  void atg_pdist(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    double p,
  ) {
    _atg_pdist ??=
        _dylib.lookupFunction<_c_atg_pdist, _dart_atg_pdist>('atg_pdist');
    return _atg_pdist(
      arg0,
      self,
      p,
    );
  }

  _dart_atg_pdist _atg_pdist;

  void atg_permute(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> dims_data,
    int dims_len,
  ) {
    _atg_permute ??=
        _dylib.lookupFunction<_c_atg_permute, _dart_atg_permute>('atg_permute');
    return _atg_permute(
      arg0,
      self,
      dims_data,
      dims_len,
    );
  }

  _dart_atg_permute _atg_permute;

  void atg_pin_memory(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_pin_memory ??=
        _dylib.lookupFunction<_c_atg_pin_memory, _dart_atg_pin_memory>(
            'atg_pin_memory');
    return _atg_pin_memory(
      arg0,
      self,
    );
  }

  _dart_atg_pin_memory _atg_pin_memory;

  void atg_pinverse(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    double rcond,
  ) {
    _atg_pinverse ??= _dylib
        .lookupFunction<_c_atg_pinverse, _dart_atg_pinverse>('atg_pinverse');
    return _atg_pinverse(
      arg0,
      self,
      rcond,
    );
  }

  _dart_atg_pinverse _atg_pinverse;

  void atg_pixel_shuffle(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int upscale_factor,
  ) {
    _atg_pixel_shuffle ??=
        _dylib.lookupFunction<_c_atg_pixel_shuffle, _dart_atg_pixel_shuffle>(
            'atg_pixel_shuffle');
    return _atg_pixel_shuffle(
      arg0,
      self,
      upscale_factor,
    );
  }

  _dart_atg_pixel_shuffle _atg_pixel_shuffle;

  void atg_poisson(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_poisson ??=
        _dylib.lookupFunction<_c_atg_poisson, _dart_atg_poisson>('atg_poisson');
    return _atg_poisson(
      arg0,
      self,
    );
  }

  _dart_atg_poisson _atg_poisson;

  void atg_poisson_nll_loss(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> target,
    int log_input,
    int full,
    double eps,
    int reduction,
  ) {
    _atg_poisson_nll_loss ??= _dylib.lookupFunction<_c_atg_poisson_nll_loss,
        _dart_atg_poisson_nll_loss>('atg_poisson_nll_loss');
    return _atg_poisson_nll_loss(
      arg0,
      input,
      target,
      log_input,
      full,
      eps,
      reduction,
    );
  }

  _dart_atg_poisson_nll_loss _atg_poisson_nll_loss;

  void atg_polygamma(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    int n,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_polygamma ??= _dylib
        .lookupFunction<_c_atg_polygamma, _dart_atg_polygamma>('atg_polygamma');
    return _atg_polygamma(
      arg0,
      n,
      self,
    );
  }

  _dart_atg_polygamma _atg_polygamma;

  void atg_polygamma_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int n,
  ) {
    _atg_polygamma_ ??=
        _dylib.lookupFunction<_c_atg_polygamma_, _dart_atg_polygamma_>(
            'atg_polygamma_');
    return _atg_polygamma_(
      arg0,
      self,
      n,
    );
  }

  _dart_atg_polygamma_ _atg_polygamma_;

  void atg_polygamma_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    int n,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_polygamma_out ??=
        _dylib.lookupFunction<_c_atg_polygamma_out, _dart_atg_polygamma_out>(
            'atg_polygamma_out');
    return _atg_polygamma_out(
      arg0,
      out,
      n,
      self,
    );
  }

  _dart_atg_polygamma_out _atg_polygamma_out;

  void atg_pow(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> exponent,
  ) {
    _atg_pow ??= _dylib.lookupFunction<_c_atg_pow, _dart_atg_pow>('atg_pow');
    return _atg_pow(
      arg0,
      self,
      exponent,
    );
  }

  _dart_atg_pow _atg_pow;

  void atg_pow1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> exponent,
  ) {
    _atg_pow1 ??=
        _dylib.lookupFunction<_c_atg_pow1, _dart_atg_pow1>('atg_pow1');
    return _atg_pow1(
      arg0,
      self,
      exponent,
    );
  }

  _dart_atg_pow1 _atg_pow1;

  void atg_pow2(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self_scalar,
    ffi.Pointer<ffi.Void> exponent,
  ) {
    _atg_pow2 ??=
        _dylib.lookupFunction<_c_atg_pow2, _dart_atg_pow2>('atg_pow2');
    return _atg_pow2(
      arg0,
      self_scalar,
      exponent,
    );
  }

  _dart_atg_pow2 _atg_pow2;

  void atg_pow_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> exponent,
  ) {
    _atg_pow_ ??=
        _dylib.lookupFunction<_c_atg_pow_, _dart_atg_pow_>('atg_pow_');
    return _atg_pow_(
      arg0,
      self,
      exponent,
    );
  }

  _dart_atg_pow_ _atg_pow_;

  void atg_pow_1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> exponent,
  ) {
    _atg_pow_1 ??=
        _dylib.lookupFunction<_c_atg_pow_1, _dart_atg_pow_1>('atg_pow_1');
    return _atg_pow_1(
      arg0,
      self,
      exponent,
    );
  }

  _dart_atg_pow_1 _atg_pow_1;

  void atg_pow_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> exponent,
  ) {
    _atg_pow_out ??=
        _dylib.lookupFunction<_c_atg_pow_out, _dart_atg_pow_out>('atg_pow_out');
    return _atg_pow_out(
      arg0,
      out,
      self,
      exponent,
    );
  }

  _dart_atg_pow_out _atg_pow_out;

  void atg_pow_out1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> exponent,
  ) {
    _atg_pow_out1 ??= _dylib
        .lookupFunction<_c_atg_pow_out1, _dart_atg_pow_out1>('atg_pow_out1');
    return _atg_pow_out1(
      arg0,
      out,
      self,
      exponent,
    );
  }

  _dart_atg_pow_out1 _atg_pow_out1;

  void atg_pow_out2(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self_scalar,
    ffi.Pointer<ffi.Void> exponent,
  ) {
    _atg_pow_out2 ??= _dylib
        .lookupFunction<_c_atg_pow_out2, _dart_atg_pow_out2>('atg_pow_out2');
    return _atg_pow_out2(
      arg0,
      out,
      self_scalar,
      exponent,
    );
  }

  _dart_atg_pow_out2 _atg_pow_out2;

  void atg_prelu(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> weight,
  ) {
    _atg_prelu ??=
        _dylib.lookupFunction<_c_atg_prelu, _dart_atg_prelu>('atg_prelu');
    return _atg_prelu(
      arg0,
      self,
      weight,
    );
  }

  _dart_atg_prelu _atg_prelu;

  void atg_prelu_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> weight,
  ) {
    _atg_prelu_backward ??=
        _dylib.lookupFunction<_c_atg_prelu_backward, _dart_atg_prelu_backward>(
            'atg_prelu_backward');
    return _atg_prelu_backward(
      arg0,
      grad_output,
      self,
      weight,
    );
  }

  _dart_atg_prelu_backward _atg_prelu_backward;

  void atg_prod(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dtype,
  ) {
    _atg_prod ??=
        _dylib.lookupFunction<_c_atg_prod, _dart_atg_prod>('atg_prod');
    return _atg_prod(
      arg0,
      self,
      dtype,
    );
  }

  _dart_atg_prod _atg_prod;

  void atg_prod1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int keepdim,
    int dtype,
  ) {
    _atg_prod1 ??=
        _dylib.lookupFunction<_c_atg_prod1, _dart_atg_prod1>('atg_prod1');
    return _atg_prod1(
      arg0,
      self,
      dim,
      keepdim,
      dtype,
    );
  }

  _dart_atg_prod1 _atg_prod1;

  void atg_prod_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int keepdim,
    int dtype,
  ) {
    _atg_prod_out ??= _dylib
        .lookupFunction<_c_atg_prod_out, _dart_atg_prod_out>('atg_prod_out');
    return _atg_prod_out(
      arg0,
      out,
      self,
      dim,
      keepdim,
      dtype,
    );
  }

  _dart_atg_prod_out _atg_prod_out;

  void atg_put_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> index,
    ffi.Pointer<ffi.Void> source,
    int accumulate,
  ) {
    _atg_put_ ??=
        _dylib.lookupFunction<_c_atg_put_, _dart_atg_put_>('atg_put_');
    return _atg_put_(
      arg0,
      self,
      index,
      source,
      accumulate,
    );
  }

  _dart_atg_put_ _atg_put_;

  void atg_q_per_channel_scales(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_q_per_channel_scales ??= _dylib.lookupFunction<
        _c_atg_q_per_channel_scales,
        _dart_atg_q_per_channel_scales>('atg_q_per_channel_scales');
    return _atg_q_per_channel_scales(
      arg0,
      self,
    );
  }

  _dart_atg_q_per_channel_scales _atg_q_per_channel_scales;

  void atg_q_per_channel_zero_points(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_q_per_channel_zero_points ??= _dylib.lookupFunction<
        _c_atg_q_per_channel_zero_points,
        _dart_atg_q_per_channel_zero_points>('atg_q_per_channel_zero_points');
    return _atg_q_per_channel_zero_points(
      arg0,
      self,
    );
  }

  _dart_atg_q_per_channel_zero_points _atg_q_per_channel_zero_points;

  void atg_qr(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int some,
  ) {
    _atg_qr ??= _dylib.lookupFunction<_c_atg_qr, _dart_atg_qr>('atg_qr');
    return _atg_qr(
      arg0,
      self,
      some,
    );
  }

  _dart_atg_qr _atg_qr;

  void atg_qr_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> Q,
    ffi.Pointer<ffi.Void> R,
    ffi.Pointer<ffi.Void> self,
    int some,
  ) {
    _atg_qr_out ??=
        _dylib.lookupFunction<_c_atg_qr_out, _dart_atg_qr_out>('atg_qr_out');
    return _atg_qr_out(
      arg0,
      Q,
      R,
      self,
      some,
    );
  }

  _dart_atg_qr_out _atg_qr_out;

  void atg_quantize_per_channel(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> scales,
    ffi.Pointer<ffi.Void> zero_points,
    int axis,
    int dtype,
  ) {
    _atg_quantize_per_channel ??= _dylib.lookupFunction<
        _c_atg_quantize_per_channel,
        _dart_atg_quantize_per_channel>('atg_quantize_per_channel');
    return _atg_quantize_per_channel(
      arg0,
      self,
      scales,
      zero_points,
      axis,
      dtype,
    );
  }

  _dart_atg_quantize_per_channel _atg_quantize_per_channel;

  void atg_quantize_per_tensor(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    double scale,
    int zero_point,
    int dtype,
  ) {
    _atg_quantize_per_tensor ??= _dylib.lookupFunction<
        _c_atg_quantize_per_tensor,
        _dart_atg_quantize_per_tensor>('atg_quantize_per_tensor');
    return _atg_quantize_per_tensor(
      arg0,
      self,
      scale,
      zero_point,
      dtype,
    );
  }

  _dart_atg_quantize_per_tensor _atg_quantize_per_tensor;

  ffi.Pointer<ffi.Pointer<ffi.Void>> atg_quantize_per_tensor1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
    int tensors_len,
    ffi.Pointer<ffi.Void> scales,
    ffi.Pointer<ffi.Void> zero_points,
    int dtype,
  ) {
    _atg_quantize_per_tensor1 ??= _dylib.lookupFunction<
        _c_atg_quantize_per_tensor1,
        _dart_atg_quantize_per_tensor1>('atg_quantize_per_tensor1');
    return _atg_quantize_per_tensor1(
      tensors_data,
      tensors_len,
      scales,
      zero_points,
      dtype,
    );
  }

  _dart_atg_quantize_per_tensor1 _atg_quantize_per_tensor1;

  void atg_quantized_batch_norm(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Void> bias,
    ffi.Pointer<ffi.Void> mean,
    ffi.Pointer<ffi.Void> var_1,
    double eps,
    double output_scale,
    int output_zero_point,
  ) {
    _atg_quantized_batch_norm ??= _dylib.lookupFunction<
        _c_atg_quantized_batch_norm,
        _dart_atg_quantized_batch_norm>('atg_quantized_batch_norm');
    return _atg_quantized_batch_norm(
      arg0,
      input,
      weight,
      bias,
      mean,
      var_1,
      eps,
      output_scale,
      output_zero_point,
    );
  }

  _dart_atg_quantized_batch_norm _atg_quantized_batch_norm;

  void atg_quantized_gru_cell(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> hx,
    ffi.Pointer<ffi.Void> w_ih,
    ffi.Pointer<ffi.Void> w_hh,
    ffi.Pointer<ffi.Void> b_ih,
    ffi.Pointer<ffi.Void> b_hh,
    ffi.Pointer<ffi.Void> packed_ih,
    ffi.Pointer<ffi.Void> packed_hh,
    ffi.Pointer<ffi.Void> col_offsets_ih,
    ffi.Pointer<ffi.Void> col_offsets_hh,
    ffi.Pointer<ffi.Void> scale_ih,
    ffi.Pointer<ffi.Void> scale_hh,
    ffi.Pointer<ffi.Void> zero_point_ih,
    ffi.Pointer<ffi.Void> zero_point_hh,
  ) {
    _atg_quantized_gru_cell ??= _dylib.lookupFunction<_c_atg_quantized_gru_cell,
        _dart_atg_quantized_gru_cell>('atg_quantized_gru_cell');
    return _atg_quantized_gru_cell(
      arg0,
      input,
      hx,
      w_ih,
      w_hh,
      b_ih,
      b_hh,
      packed_ih,
      packed_hh,
      col_offsets_ih,
      col_offsets_hh,
      scale_ih,
      scale_hh,
      zero_point_ih,
      zero_point_hh,
    );
  }

  _dart_atg_quantized_gru_cell _atg_quantized_gru_cell;

  void atg_quantized_lstm_cell(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Pointer<ffi.Void>> hx_data,
    int hx_len,
    ffi.Pointer<ffi.Void> w_ih,
    ffi.Pointer<ffi.Void> w_hh,
    ffi.Pointer<ffi.Void> b_ih,
    ffi.Pointer<ffi.Void> b_hh,
    ffi.Pointer<ffi.Void> packed_ih,
    ffi.Pointer<ffi.Void> packed_hh,
    ffi.Pointer<ffi.Void> col_offsets_ih,
    ffi.Pointer<ffi.Void> col_offsets_hh,
    ffi.Pointer<ffi.Void> scale_ih,
    ffi.Pointer<ffi.Void> scale_hh,
    ffi.Pointer<ffi.Void> zero_point_ih,
    ffi.Pointer<ffi.Void> zero_point_hh,
  ) {
    _atg_quantized_lstm_cell ??= _dylib.lookupFunction<
        _c_atg_quantized_lstm_cell,
        _dart_atg_quantized_lstm_cell>('atg_quantized_lstm_cell');
    return _atg_quantized_lstm_cell(
      arg0,
      input,
      hx_data,
      hx_len,
      w_ih,
      w_hh,
      b_ih,
      b_hh,
      packed_ih,
      packed_hh,
      col_offsets_ih,
      col_offsets_hh,
      scale_ih,
      scale_hh,
      zero_point_ih,
      zero_point_hh,
    );
  }

  _dart_atg_quantized_lstm_cell _atg_quantized_lstm_cell;

  void atg_quantized_max_pool2d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
    int ceil_mode,
  ) {
    _atg_quantized_max_pool2d ??= _dylib.lookupFunction<
        _c_atg_quantized_max_pool2d,
        _dart_atg_quantized_max_pool2d>('atg_quantized_max_pool2d');
    return _atg_quantized_max_pool2d(
      arg0,
      self,
      kernel_size_data,
      kernel_size_len,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      dilation_data,
      dilation_len,
      ceil_mode,
    );
  }

  _dart_atg_quantized_max_pool2d _atg_quantized_max_pool2d;

  void atg_quantized_rnn_relu_cell(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> hx,
    ffi.Pointer<ffi.Void> w_ih,
    ffi.Pointer<ffi.Void> w_hh,
    ffi.Pointer<ffi.Void> b_ih,
    ffi.Pointer<ffi.Void> b_hh,
    ffi.Pointer<ffi.Void> packed_ih,
    ffi.Pointer<ffi.Void> packed_hh,
    ffi.Pointer<ffi.Void> col_offsets_ih,
    ffi.Pointer<ffi.Void> col_offsets_hh,
    ffi.Pointer<ffi.Void> scale_ih,
    ffi.Pointer<ffi.Void> scale_hh,
    ffi.Pointer<ffi.Void> zero_point_ih,
    ffi.Pointer<ffi.Void> zero_point_hh,
  ) {
    _atg_quantized_rnn_relu_cell ??= _dylib.lookupFunction<
        _c_atg_quantized_rnn_relu_cell,
        _dart_atg_quantized_rnn_relu_cell>('atg_quantized_rnn_relu_cell');
    return _atg_quantized_rnn_relu_cell(
      arg0,
      input,
      hx,
      w_ih,
      w_hh,
      b_ih,
      b_hh,
      packed_ih,
      packed_hh,
      col_offsets_ih,
      col_offsets_hh,
      scale_ih,
      scale_hh,
      zero_point_ih,
      zero_point_hh,
    );
  }

  _dart_atg_quantized_rnn_relu_cell _atg_quantized_rnn_relu_cell;

  void atg_quantized_rnn_tanh_cell(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> hx,
    ffi.Pointer<ffi.Void> w_ih,
    ffi.Pointer<ffi.Void> w_hh,
    ffi.Pointer<ffi.Void> b_ih,
    ffi.Pointer<ffi.Void> b_hh,
    ffi.Pointer<ffi.Void> packed_ih,
    ffi.Pointer<ffi.Void> packed_hh,
    ffi.Pointer<ffi.Void> col_offsets_ih,
    ffi.Pointer<ffi.Void> col_offsets_hh,
    ffi.Pointer<ffi.Void> scale_ih,
    ffi.Pointer<ffi.Void> scale_hh,
    ffi.Pointer<ffi.Void> zero_point_ih,
    ffi.Pointer<ffi.Void> zero_point_hh,
  ) {
    _atg_quantized_rnn_tanh_cell ??= _dylib.lookupFunction<
        _c_atg_quantized_rnn_tanh_cell,
        _dart_atg_quantized_rnn_tanh_cell>('atg_quantized_rnn_tanh_cell');
    return _atg_quantized_rnn_tanh_cell(
      arg0,
      input,
      hx,
      w_ih,
      w_hh,
      b_ih,
      b_hh,
      packed_ih,
      packed_hh,
      col_offsets_ih,
      col_offsets_hh,
      scale_ih,
      scale_hh,
      zero_point_ih,
      zero_point_hh,
    );
  }

  _dart_atg_quantized_rnn_tanh_cell _atg_quantized_rnn_tanh_cell;

  void atg_rad2deg(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_rad2deg ??=
        _dylib.lookupFunction<_c_atg_rad2deg, _dart_atg_rad2deg>('atg_rad2deg');
    return _atg_rad2deg(
      arg0,
      self,
    );
  }

  _dart_atg_rad2deg _atg_rad2deg;

  void atg_rad2deg_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_rad2deg_ ??= _dylib
        .lookupFunction<_c_atg_rad2deg_, _dart_atg_rad2deg_>('atg_rad2deg_');
    return _atg_rad2deg_(
      arg0,
      self,
    );
  }

  _dart_atg_rad2deg_ _atg_rad2deg_;

  void atg_rad2deg_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_rad2deg_out ??=
        _dylib.lookupFunction<_c_atg_rad2deg_out, _dart_atg_rad2deg_out>(
            'atg_rad2deg_out');
    return _atg_rad2deg_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_rad2deg_out _atg_rad2deg_out;

  void atg_rand(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
    int options_kind,
    int options_device,
  ) {
    _atg_rand ??=
        _dylib.lookupFunction<_c_atg_rand, _dart_atg_rand>('atg_rand');
    return _atg_rand(
      arg0,
      size_data,
      size_len,
      options_kind,
      options_device,
    );
  }

  _dart_atg_rand _atg_rand;

  void atg_rand_like(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_rand_like ??= _dylib
        .lookupFunction<_c_atg_rand_like, _dart_atg_rand_like>('atg_rand_like');
    return _atg_rand_like(
      arg0,
      self,
    );
  }

  _dart_atg_rand_like _atg_rand_like;

  void atg_rand_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
  ) {
    _atg_rand_out ??= _dylib
        .lookupFunction<_c_atg_rand_out, _dart_atg_rand_out>('atg_rand_out');
    return _atg_rand_out(
      arg0,
      out,
      size_data,
      size_len,
    );
  }

  _dart_atg_rand_out _atg_rand_out;

  void atg_randint(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    int high,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
    int options_kind,
    int options_device,
  ) {
    _atg_randint ??=
        _dylib.lookupFunction<_c_atg_randint, _dart_atg_randint>('atg_randint');
    return _atg_randint(
      arg0,
      high,
      size_data,
      size_len,
      options_kind,
      options_device,
    );
  }

  _dart_atg_randint _atg_randint;

  void atg_randint1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    int low,
    int high,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
    int options_kind,
    int options_device,
  ) {
    _atg_randint1 ??= _dylib
        .lookupFunction<_c_atg_randint1, _dart_atg_randint1>('atg_randint1');
    return _atg_randint1(
      arg0,
      low,
      high,
      size_data,
      size_len,
      options_kind,
      options_device,
    );
  }

  _dart_atg_randint1 _atg_randint1;

  void atg_randint_like(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int high,
  ) {
    _atg_randint_like ??=
        _dylib.lookupFunction<_c_atg_randint_like, _dart_atg_randint_like>(
            'atg_randint_like');
    return _atg_randint_like(
      arg0,
      self,
      high,
    );
  }

  _dart_atg_randint_like _atg_randint_like;

  void atg_randint_like1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int low,
    int high,
  ) {
    _atg_randint_like1 ??=
        _dylib.lookupFunction<_c_atg_randint_like1, _dart_atg_randint_like1>(
            'atg_randint_like1');
    return _atg_randint_like1(
      arg0,
      self,
      low,
      high,
    );
  }

  _dart_atg_randint_like1 _atg_randint_like1;

  void atg_randint_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    int high,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
  ) {
    _atg_randint_out ??=
        _dylib.lookupFunction<_c_atg_randint_out, _dart_atg_randint_out>(
            'atg_randint_out');
    return _atg_randint_out(
      arg0,
      out,
      high,
      size_data,
      size_len,
    );
  }

  _dart_atg_randint_out _atg_randint_out;

  void atg_randint_out1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    int low,
    int high,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
  ) {
    _atg_randint_out1 ??=
        _dylib.lookupFunction<_c_atg_randint_out1, _dart_atg_randint_out1>(
            'atg_randint_out1');
    return _atg_randint_out1(
      arg0,
      out,
      low,
      high,
      size_data,
      size_len,
    );
  }

  _dart_atg_randint_out1 _atg_randint_out1;

  void atg_randn(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
    int options_kind,
    int options_device,
  ) {
    _atg_randn ??=
        _dylib.lookupFunction<_c_atg_randn, _dart_atg_randn>('atg_randn');
    return _atg_randn(
      arg0,
      size_data,
      size_len,
      options_kind,
      options_device,
    );
  }

  _dart_atg_randn _atg_randn;

  void atg_randn_like(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_randn_like ??=
        _dylib.lookupFunction<_c_atg_randn_like, _dart_atg_randn_like>(
            'atg_randn_like');
    return _atg_randn_like(
      arg0,
      self,
    );
  }

  _dart_atg_randn_like _atg_randn_like;

  void atg_randn_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
  ) {
    _atg_randn_out ??= _dylib
        .lookupFunction<_c_atg_randn_out, _dart_atg_randn_out>('atg_randn_out');
    return _atg_randn_out(
      arg0,
      out,
      size_data,
      size_len,
    );
  }

  _dart_atg_randn_out _atg_randn_out;

  void atg_random_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_random_ ??=
        _dylib.lookupFunction<_c_atg_random_, _dart_atg_random_>('atg_random_');
    return _atg_random_(
      arg0,
      self,
    );
  }

  _dart_atg_random_ _atg_random_;

  void atg_random_1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int to,
  ) {
    _atg_random_1 ??= _dylib
        .lookupFunction<_c_atg_random_1, _dart_atg_random_1>('atg_random_1');
    return _atg_random_1(
      arg0,
      self,
      to,
    );
  }

  _dart_atg_random_1 _atg_random_1;

  void atg_random_2(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int from,
    int to_v,
    int to_null,
  ) {
    _atg_random_2 ??= _dylib
        .lookupFunction<_c_atg_random_2, _dart_atg_random_2>('atg_random_2');
    return _atg_random_2(
      arg0,
      self,
      from,
      to_v,
      to_null,
    );
  }

  _dart_atg_random_2 _atg_random_2;

  void atg_randperm(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    int n,
    int options_kind,
    int options_device,
  ) {
    _atg_randperm ??= _dylib
        .lookupFunction<_c_atg_randperm, _dart_atg_randperm>('atg_randperm');
    return _atg_randperm(
      arg0,
      n,
      options_kind,
      options_device,
    );
  }

  _dart_atg_randperm _atg_randperm;

  void atg_randperm_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    int n,
  ) {
    _atg_randperm_out ??=
        _dylib.lookupFunction<_c_atg_randperm_out, _dart_atg_randperm_out>(
            'atg_randperm_out');
    return _atg_randperm_out(
      arg0,
      out,
      n,
    );
  }

  _dart_atg_randperm_out _atg_randperm_out;

  void atg_range(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> start,
    ffi.Pointer<ffi.Void> end,
    int options_kind,
    int options_device,
  ) {
    _atg_range ??=
        _dylib.lookupFunction<_c_atg_range, _dart_atg_range>('atg_range');
    return _atg_range(
      arg0,
      start,
      end,
      options_kind,
      options_device,
    );
  }

  _dart_atg_range _atg_range;

  void atg_range1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> start,
    ffi.Pointer<ffi.Void> end,
    int options_kind,
    int options_device,
  ) {
    _atg_range1 ??=
        _dylib.lookupFunction<_c_atg_range1, _dart_atg_range1>('atg_range1');
    return _atg_range1(
      arg0,
      start,
      end,
      options_kind,
      options_device,
    );
  }

  _dart_atg_range1 _atg_range1;

  void atg_range_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> start,
    ffi.Pointer<ffi.Void> end,
  ) {
    _atg_range_out ??= _dylib
        .lookupFunction<_c_atg_range_out, _dart_atg_range_out>('atg_range_out');
    return _atg_range_out(
      arg0,
      out,
      start,
      end,
    );
  }

  _dart_atg_range_out _atg_range_out;

  void atg_real(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_real ??=
        _dylib.lookupFunction<_c_atg_real, _dart_atg_real>('atg_real');
    return _atg_real(
      arg0,
      self,
    );
  }

  _dart_atg_real _atg_real;

  void atg_reciprocal(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_reciprocal ??=
        _dylib.lookupFunction<_c_atg_reciprocal, _dart_atg_reciprocal>(
            'atg_reciprocal');
    return _atg_reciprocal(
      arg0,
      self,
    );
  }

  _dart_atg_reciprocal _atg_reciprocal;

  void atg_reciprocal_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_reciprocal_ ??=
        _dylib.lookupFunction<_c_atg_reciprocal_, _dart_atg_reciprocal_>(
            'atg_reciprocal_');
    return _atg_reciprocal_(
      arg0,
      self,
    );
  }

  _dart_atg_reciprocal_ _atg_reciprocal_;

  void atg_reciprocal_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_reciprocal_out ??=
        _dylib.lookupFunction<_c_atg_reciprocal_out, _dart_atg_reciprocal_out>(
            'atg_reciprocal_out');
    return _atg_reciprocal_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_reciprocal_out _atg_reciprocal_out;

  void atg_reflection_pad1d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
  ) {
    _atg_reflection_pad1d ??= _dylib.lookupFunction<_c_atg_reflection_pad1d,
        _dart_atg_reflection_pad1d>('atg_reflection_pad1d');
    return _atg_reflection_pad1d(
      arg0,
      self,
      padding_data,
      padding_len,
    );
  }

  _dart_atg_reflection_pad1d _atg_reflection_pad1d;

  void atg_reflection_pad1d_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
  ) {
    _atg_reflection_pad1d_backward ??= _dylib.lookupFunction<
        _c_atg_reflection_pad1d_backward,
        _dart_atg_reflection_pad1d_backward>('atg_reflection_pad1d_backward');
    return _atg_reflection_pad1d_backward(
      arg0,
      grad_output,
      self,
      padding_data,
      padding_len,
    );
  }

  _dart_atg_reflection_pad1d_backward _atg_reflection_pad1d_backward;

  void atg_reflection_pad1d_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
  ) {
    _atg_reflection_pad1d_backward_out ??= _dylib.lookupFunction<
            _c_atg_reflection_pad1d_backward_out,
            _dart_atg_reflection_pad1d_backward_out>(
        'atg_reflection_pad1d_backward_out');
    return _atg_reflection_pad1d_backward_out(
      arg0,
      grad_input,
      grad_output,
      self,
      padding_data,
      padding_len,
    );
  }

  _dart_atg_reflection_pad1d_backward_out _atg_reflection_pad1d_backward_out;

  void atg_reflection_pad1d_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
  ) {
    _atg_reflection_pad1d_out ??= _dylib.lookupFunction<
        _c_atg_reflection_pad1d_out,
        _dart_atg_reflection_pad1d_out>('atg_reflection_pad1d_out');
    return _atg_reflection_pad1d_out(
      arg0,
      out,
      self,
      padding_data,
      padding_len,
    );
  }

  _dart_atg_reflection_pad1d_out _atg_reflection_pad1d_out;

  void atg_reflection_pad2d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
  ) {
    _atg_reflection_pad2d ??= _dylib.lookupFunction<_c_atg_reflection_pad2d,
        _dart_atg_reflection_pad2d>('atg_reflection_pad2d');
    return _atg_reflection_pad2d(
      arg0,
      self,
      padding_data,
      padding_len,
    );
  }

  _dart_atg_reflection_pad2d _atg_reflection_pad2d;

  void atg_reflection_pad2d_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
  ) {
    _atg_reflection_pad2d_backward ??= _dylib.lookupFunction<
        _c_atg_reflection_pad2d_backward,
        _dart_atg_reflection_pad2d_backward>('atg_reflection_pad2d_backward');
    return _atg_reflection_pad2d_backward(
      arg0,
      grad_output,
      self,
      padding_data,
      padding_len,
    );
  }

  _dart_atg_reflection_pad2d_backward _atg_reflection_pad2d_backward;

  void atg_reflection_pad2d_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
  ) {
    _atg_reflection_pad2d_backward_out ??= _dylib.lookupFunction<
            _c_atg_reflection_pad2d_backward_out,
            _dart_atg_reflection_pad2d_backward_out>(
        'atg_reflection_pad2d_backward_out');
    return _atg_reflection_pad2d_backward_out(
      arg0,
      grad_input,
      grad_output,
      self,
      padding_data,
      padding_len,
    );
  }

  _dart_atg_reflection_pad2d_backward_out _atg_reflection_pad2d_backward_out;

  void atg_reflection_pad2d_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
  ) {
    _atg_reflection_pad2d_out ??= _dylib.lookupFunction<
        _c_atg_reflection_pad2d_out,
        _dart_atg_reflection_pad2d_out>('atg_reflection_pad2d_out');
    return _atg_reflection_pad2d_out(
      arg0,
      out,
      self,
      padding_data,
      padding_len,
    );
  }

  _dart_atg_reflection_pad2d_out _atg_reflection_pad2d_out;

  void atg_relu(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_relu ??=
        _dylib.lookupFunction<_c_atg_relu, _dart_atg_relu>('atg_relu');
    return _atg_relu(
      arg0,
      self,
    );
  }

  _dart_atg_relu _atg_relu;

  void atg_relu_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_relu_ ??=
        _dylib.lookupFunction<_c_atg_relu_, _dart_atg_relu_>('atg_relu_');
    return _atg_relu_(
      arg0,
      self,
    );
  }

  _dart_atg_relu_ _atg_relu_;

  void atg_remainder(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_remainder ??= _dylib
        .lookupFunction<_c_atg_remainder, _dart_atg_remainder>('atg_remainder');
    return _atg_remainder(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_remainder _atg_remainder;

  void atg_remainder1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_remainder1 ??=
        _dylib.lookupFunction<_c_atg_remainder1, _dart_atg_remainder1>(
            'atg_remainder1');
    return _atg_remainder1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_remainder1 _atg_remainder1;

  void atg_remainder_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_remainder_ ??=
        _dylib.lookupFunction<_c_atg_remainder_, _dart_atg_remainder_>(
            'atg_remainder_');
    return _atg_remainder_(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_remainder_ _atg_remainder_;

  void atg_remainder_1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_remainder_1 ??=
        _dylib.lookupFunction<_c_atg_remainder_1, _dart_atg_remainder_1>(
            'atg_remainder_1');
    return _atg_remainder_1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_remainder_1 _atg_remainder_1;

  void atg_remainder_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_remainder_out ??=
        _dylib.lookupFunction<_c_atg_remainder_out, _dart_atg_remainder_out>(
            'atg_remainder_out');
    return _atg_remainder_out(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_remainder_out _atg_remainder_out;

  void atg_remainder_out1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_remainder_out1 ??=
        _dylib.lookupFunction<_c_atg_remainder_out1, _dart_atg_remainder_out1>(
            'atg_remainder_out1');
    return _atg_remainder_out1(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_remainder_out1 _atg_remainder_out1;

  void atg_renorm(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> p,
    int dim,
    ffi.Pointer<ffi.Void> maxnorm,
  ) {
    _atg_renorm ??=
        _dylib.lookupFunction<_c_atg_renorm, _dart_atg_renorm>('atg_renorm');
    return _atg_renorm(
      arg0,
      self,
      p,
      dim,
      maxnorm,
    );
  }

  _dart_atg_renorm _atg_renorm;

  void atg_renorm_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> p,
    int dim,
    ffi.Pointer<ffi.Void> maxnorm,
  ) {
    _atg_renorm_ ??=
        _dylib.lookupFunction<_c_atg_renorm_, _dart_atg_renorm_>('atg_renorm_');
    return _atg_renorm_(
      arg0,
      self,
      p,
      dim,
      maxnorm,
    );
  }

  _dart_atg_renorm_ _atg_renorm_;

  void atg_renorm_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> p,
    int dim,
    ffi.Pointer<ffi.Void> maxnorm,
  ) {
    _atg_renorm_out ??=
        _dylib.lookupFunction<_c_atg_renorm_out, _dart_atg_renorm_out>(
            'atg_renorm_out');
    return _atg_renorm_out(
      arg0,
      out,
      self,
      p,
      dim,
      maxnorm,
    );
  }

  _dart_atg_renorm_out _atg_renorm_out;

  void atg_repeat(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> repeats_data,
    int repeats_len,
  ) {
    _atg_repeat ??=
        _dylib.lookupFunction<_c_atg_repeat, _dart_atg_repeat>('atg_repeat');
    return _atg_repeat(
      arg0,
      self,
      repeats_data,
      repeats_len,
    );
  }

  _dart_atg_repeat _atg_repeat;

  void atg_repeat_interleave(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> repeats,
  ) {
    _atg_repeat_interleave ??= _dylib.lookupFunction<_c_atg_repeat_interleave,
        _dart_atg_repeat_interleave>('atg_repeat_interleave');
    return _atg_repeat_interleave(
      arg0,
      repeats,
    );
  }

  _dart_atg_repeat_interleave _atg_repeat_interleave;

  void atg_repeat_interleave1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> repeats,
    int dim_v,
    int dim_null,
  ) {
    _atg_repeat_interleave1 ??= _dylib.lookupFunction<_c_atg_repeat_interleave1,
        _dart_atg_repeat_interleave1>('atg_repeat_interleave1');
    return _atg_repeat_interleave1(
      arg0,
      self,
      repeats,
      dim_v,
      dim_null,
    );
  }

  _dart_atg_repeat_interleave1 _atg_repeat_interleave1;

  void atg_repeat_interleave2(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int repeats,
    int dim_v,
    int dim_null,
  ) {
    _atg_repeat_interleave2 ??= _dylib.lookupFunction<_c_atg_repeat_interleave2,
        _dart_atg_repeat_interleave2>('atg_repeat_interleave2');
    return _atg_repeat_interleave2(
      arg0,
      self,
      repeats,
      dim_v,
      dim_null,
    );
  }

  _dart_atg_repeat_interleave2 _atg_repeat_interleave2;

  void atg_replication_pad1d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
  ) {
    _atg_replication_pad1d ??= _dylib.lookupFunction<_c_atg_replication_pad1d,
        _dart_atg_replication_pad1d>('atg_replication_pad1d');
    return _atg_replication_pad1d(
      arg0,
      self,
      padding_data,
      padding_len,
    );
  }

  _dart_atg_replication_pad1d _atg_replication_pad1d;

  void atg_replication_pad1d_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
  ) {
    _atg_replication_pad1d_backward ??= _dylib.lookupFunction<
        _c_atg_replication_pad1d_backward,
        _dart_atg_replication_pad1d_backward>('atg_replication_pad1d_backward');
    return _atg_replication_pad1d_backward(
      arg0,
      grad_output,
      self,
      padding_data,
      padding_len,
    );
  }

  _dart_atg_replication_pad1d_backward _atg_replication_pad1d_backward;

  void atg_replication_pad1d_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
  ) {
    _atg_replication_pad1d_backward_out ??= _dylib.lookupFunction<
            _c_atg_replication_pad1d_backward_out,
            _dart_atg_replication_pad1d_backward_out>(
        'atg_replication_pad1d_backward_out');
    return _atg_replication_pad1d_backward_out(
      arg0,
      grad_input,
      grad_output,
      self,
      padding_data,
      padding_len,
    );
  }

  _dart_atg_replication_pad1d_backward_out _atg_replication_pad1d_backward_out;

  void atg_replication_pad1d_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
  ) {
    _atg_replication_pad1d_out ??= _dylib.lookupFunction<
        _c_atg_replication_pad1d_out,
        _dart_atg_replication_pad1d_out>('atg_replication_pad1d_out');
    return _atg_replication_pad1d_out(
      arg0,
      out,
      self,
      padding_data,
      padding_len,
    );
  }

  _dart_atg_replication_pad1d_out _atg_replication_pad1d_out;

  void atg_replication_pad2d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
  ) {
    _atg_replication_pad2d ??= _dylib.lookupFunction<_c_atg_replication_pad2d,
        _dart_atg_replication_pad2d>('atg_replication_pad2d');
    return _atg_replication_pad2d(
      arg0,
      self,
      padding_data,
      padding_len,
    );
  }

  _dart_atg_replication_pad2d _atg_replication_pad2d;

  void atg_replication_pad2d_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
  ) {
    _atg_replication_pad2d_backward ??= _dylib.lookupFunction<
        _c_atg_replication_pad2d_backward,
        _dart_atg_replication_pad2d_backward>('atg_replication_pad2d_backward');
    return _atg_replication_pad2d_backward(
      arg0,
      grad_output,
      self,
      padding_data,
      padding_len,
    );
  }

  _dart_atg_replication_pad2d_backward _atg_replication_pad2d_backward;

  void atg_replication_pad2d_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
  ) {
    _atg_replication_pad2d_backward_out ??= _dylib.lookupFunction<
            _c_atg_replication_pad2d_backward_out,
            _dart_atg_replication_pad2d_backward_out>(
        'atg_replication_pad2d_backward_out');
    return _atg_replication_pad2d_backward_out(
      arg0,
      grad_input,
      grad_output,
      self,
      padding_data,
      padding_len,
    );
  }

  _dart_atg_replication_pad2d_backward_out _atg_replication_pad2d_backward_out;

  void atg_replication_pad2d_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
  ) {
    _atg_replication_pad2d_out ??= _dylib.lookupFunction<
        _c_atg_replication_pad2d_out,
        _dart_atg_replication_pad2d_out>('atg_replication_pad2d_out');
    return _atg_replication_pad2d_out(
      arg0,
      out,
      self,
      padding_data,
      padding_len,
    );
  }

  _dart_atg_replication_pad2d_out _atg_replication_pad2d_out;

  void atg_replication_pad3d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
  ) {
    _atg_replication_pad3d ??= _dylib.lookupFunction<_c_atg_replication_pad3d,
        _dart_atg_replication_pad3d>('atg_replication_pad3d');
    return _atg_replication_pad3d(
      arg0,
      self,
      padding_data,
      padding_len,
    );
  }

  _dart_atg_replication_pad3d _atg_replication_pad3d;

  void atg_replication_pad3d_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
  ) {
    _atg_replication_pad3d_backward ??= _dylib.lookupFunction<
        _c_atg_replication_pad3d_backward,
        _dart_atg_replication_pad3d_backward>('atg_replication_pad3d_backward');
    return _atg_replication_pad3d_backward(
      arg0,
      grad_output,
      self,
      padding_data,
      padding_len,
    );
  }

  _dart_atg_replication_pad3d_backward _atg_replication_pad3d_backward;

  void atg_replication_pad3d_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
  ) {
    _atg_replication_pad3d_backward_out ??= _dylib.lookupFunction<
            _c_atg_replication_pad3d_backward_out,
            _dart_atg_replication_pad3d_backward_out>(
        'atg_replication_pad3d_backward_out');
    return _atg_replication_pad3d_backward_out(
      arg0,
      grad_input,
      grad_output,
      self,
      padding_data,
      padding_len,
    );
  }

  _dart_atg_replication_pad3d_backward_out _atg_replication_pad3d_backward_out;

  void atg_replication_pad3d_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
  ) {
    _atg_replication_pad3d_out ??= _dylib.lookupFunction<
        _c_atg_replication_pad3d_out,
        _dart_atg_replication_pad3d_out>('atg_replication_pad3d_out');
    return _atg_replication_pad3d_out(
      arg0,
      out,
      self,
      padding_data,
      padding_len,
    );
  }

  _dart_atg_replication_pad3d_out _atg_replication_pad3d_out;

  void atg_requires_grad_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int requires_grad,
  ) {
    _atg_requires_grad_ ??=
        _dylib.lookupFunction<_c_atg_requires_grad_, _dart_atg_requires_grad_>(
            'atg_requires_grad_');
    return _atg_requires_grad_(
      arg0,
      self,
      requires_grad,
    );
  }

  _dart_atg_requires_grad_ _atg_requires_grad_;

  void atg_reshape(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> shape_data,
    int shape_len,
  ) {
    _atg_reshape ??=
        _dylib.lookupFunction<_c_atg_reshape, _dart_atg_reshape>('atg_reshape');
    return _atg_reshape(
      arg0,
      self,
      shape_data,
      shape_len,
    );
  }

  _dart_atg_reshape _atg_reshape;

  void atg_reshape_as(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_reshape_as ??=
        _dylib.lookupFunction<_c_atg_reshape_as, _dart_atg_reshape_as>(
            'atg_reshape_as');
    return _atg_reshape_as(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_reshape_as _atg_reshape_as;

  void atg_resize_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
  ) {
    _atg_resize_ ??=
        _dylib.lookupFunction<_c_atg_resize_, _dart_atg_resize_>('atg_resize_');
    return _atg_resize_(
      arg0,
      self,
      size_data,
      size_len,
    );
  }

  _dart_atg_resize_ _atg_resize_;

  void atg_resize_as_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> the_template,
  ) {
    _atg_resize_as_ ??=
        _dylib.lookupFunction<_c_atg_resize_as_, _dart_atg_resize_as_>(
            'atg_resize_as_');
    return _atg_resize_as_(
      arg0,
      self,
      the_template,
    );
  }

  _dart_atg_resize_as_ _atg_resize_as_;

  void atg_rfft(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int signal_ndim,
    int normalized,
    int onesided,
  ) {
    _atg_rfft ??=
        _dylib.lookupFunction<_c_atg_rfft, _dart_atg_rfft>('atg_rfft');
    return _atg_rfft(
      arg0,
      self,
      signal_ndim,
      normalized,
      onesided,
    );
  }

  _dart_atg_rfft _atg_rfft;

  void atg_rnn_relu(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> hx,
    ffi.Pointer<ffi.Pointer<ffi.Void>> params_data,
    int params_len,
    int has_biases,
    int num_layers,
    double dropout,
    int train,
    int bidirectional,
    int batch_first,
  ) {
    _atg_rnn_relu ??= _dylib
        .lookupFunction<_c_atg_rnn_relu, _dart_atg_rnn_relu>('atg_rnn_relu');
    return _atg_rnn_relu(
      arg0,
      input,
      hx,
      params_data,
      params_len,
      has_biases,
      num_layers,
      dropout,
      train,
      bidirectional,
      batch_first,
    );
  }

  _dart_atg_rnn_relu _atg_rnn_relu;

  void atg_rnn_relu1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.Void> batch_sizes,
    ffi.Pointer<ffi.Void> hx,
    ffi.Pointer<ffi.Pointer<ffi.Void>> params_data,
    int params_len,
    int has_biases,
    int num_layers,
    double dropout,
    int train,
    int bidirectional,
  ) {
    _atg_rnn_relu1 ??= _dylib
        .lookupFunction<_c_atg_rnn_relu1, _dart_atg_rnn_relu1>('atg_rnn_relu1');
    return _atg_rnn_relu1(
      arg0,
      data,
      batch_sizes,
      hx,
      params_data,
      params_len,
      has_biases,
      num_layers,
      dropout,
      train,
      bidirectional,
    );
  }

  _dart_atg_rnn_relu1 _atg_rnn_relu1;

  void atg_rnn_relu_cell(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> hx,
    ffi.Pointer<ffi.Void> w_ih,
    ffi.Pointer<ffi.Void> w_hh,
    ffi.Pointer<ffi.Void> b_ih,
    ffi.Pointer<ffi.Void> b_hh,
  ) {
    _atg_rnn_relu_cell ??=
        _dylib.lookupFunction<_c_atg_rnn_relu_cell, _dart_atg_rnn_relu_cell>(
            'atg_rnn_relu_cell');
    return _atg_rnn_relu_cell(
      arg0,
      input,
      hx,
      w_ih,
      w_hh,
      b_ih,
      b_hh,
    );
  }

  _dart_atg_rnn_relu_cell _atg_rnn_relu_cell;

  void atg_rnn_tanh(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> hx,
    ffi.Pointer<ffi.Pointer<ffi.Void>> params_data,
    int params_len,
    int has_biases,
    int num_layers,
    double dropout,
    int train,
    int bidirectional,
    int batch_first,
  ) {
    _atg_rnn_tanh ??= _dylib
        .lookupFunction<_c_atg_rnn_tanh, _dart_atg_rnn_tanh>('atg_rnn_tanh');
    return _atg_rnn_tanh(
      arg0,
      input,
      hx,
      params_data,
      params_len,
      has_biases,
      num_layers,
      dropout,
      train,
      bidirectional,
      batch_first,
    );
  }

  _dart_atg_rnn_tanh _atg_rnn_tanh;

  void atg_rnn_tanh1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.Void> batch_sizes,
    ffi.Pointer<ffi.Void> hx,
    ffi.Pointer<ffi.Pointer<ffi.Void>> params_data,
    int params_len,
    int has_biases,
    int num_layers,
    double dropout,
    int train,
    int bidirectional,
  ) {
    _atg_rnn_tanh1 ??= _dylib
        .lookupFunction<_c_atg_rnn_tanh1, _dart_atg_rnn_tanh1>('atg_rnn_tanh1');
    return _atg_rnn_tanh1(
      arg0,
      data,
      batch_sizes,
      hx,
      params_data,
      params_len,
      has_biases,
      num_layers,
      dropout,
      train,
      bidirectional,
    );
  }

  _dart_atg_rnn_tanh1 _atg_rnn_tanh1;

  void atg_rnn_tanh_cell(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> input,
    ffi.Pointer<ffi.Void> hx,
    ffi.Pointer<ffi.Void> w_ih,
    ffi.Pointer<ffi.Void> w_hh,
    ffi.Pointer<ffi.Void> b_ih,
    ffi.Pointer<ffi.Void> b_hh,
  ) {
    _atg_rnn_tanh_cell ??=
        _dylib.lookupFunction<_c_atg_rnn_tanh_cell, _dart_atg_rnn_tanh_cell>(
            'atg_rnn_tanh_cell');
    return _atg_rnn_tanh_cell(
      arg0,
      input,
      hx,
      w_ih,
      w_hh,
      b_ih,
      b_hh,
    );
  }

  _dart_atg_rnn_tanh_cell _atg_rnn_tanh_cell;

  void atg_roll(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> shifts_data,
    int shifts_len,
    ffi.Pointer<ffi.Int64> dims_data,
    int dims_len,
  ) {
    _atg_roll ??=
        _dylib.lookupFunction<_c_atg_roll, _dart_atg_roll>('atg_roll');
    return _atg_roll(
      arg0,
      self,
      shifts_data,
      shifts_len,
      dims_data,
      dims_len,
    );
  }

  _dart_atg_roll _atg_roll;

  void atg_rot90(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int k,
    ffi.Pointer<ffi.Int64> dims_data,
    int dims_len,
  ) {
    _atg_rot90 ??=
        _dylib.lookupFunction<_c_atg_rot90, _dart_atg_rot90>('atg_rot90');
    return _atg_rot90(
      arg0,
      self,
      k,
      dims_data,
      dims_len,
    );
  }

  _dart_atg_rot90 _atg_rot90;

  void atg_round(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_round ??=
        _dylib.lookupFunction<_c_atg_round, _dart_atg_round>('atg_round');
    return _atg_round(
      arg0,
      self,
    );
  }

  _dart_atg_round _atg_round;

  void atg_round_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_round_ ??=
        _dylib.lookupFunction<_c_atg_round_, _dart_atg_round_>('atg_round_');
    return _atg_round_(
      arg0,
      self,
    );
  }

  _dart_atg_round_ _atg_round_;

  void atg_round_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_round_out ??= _dylib
        .lookupFunction<_c_atg_round_out, _dart_atg_round_out>('atg_round_out');
    return _atg_round_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_round_out _atg_round_out;

  void atg_rrelu(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int training,
  ) {
    _atg_rrelu ??=
        _dylib.lookupFunction<_c_atg_rrelu, _dart_atg_rrelu>('atg_rrelu');
    return _atg_rrelu(
      arg0,
      self,
      training,
    );
  }

  _dart_atg_rrelu _atg_rrelu;

  void atg_rrelu_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int training,
  ) {
    _atg_rrelu_ ??=
        _dylib.lookupFunction<_c_atg_rrelu_, _dart_atg_rrelu_>('atg_rrelu_');
    return _atg_rrelu_(
      arg0,
      self,
      training,
    );
  }

  _dart_atg_rrelu_ _atg_rrelu_;

  void atg_rrelu_with_noise(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> noise,
    int training,
  ) {
    _atg_rrelu_with_noise ??= _dylib.lookupFunction<_c_atg_rrelu_with_noise,
        _dart_atg_rrelu_with_noise>('atg_rrelu_with_noise');
    return _atg_rrelu_with_noise(
      arg0,
      self,
      noise,
      training,
    );
  }

  _dart_atg_rrelu_with_noise _atg_rrelu_with_noise;

  void atg_rrelu_with_noise_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> noise,
    int training,
  ) {
    _atg_rrelu_with_noise_ ??= _dylib.lookupFunction<_c_atg_rrelu_with_noise_,
        _dart_atg_rrelu_with_noise_>('atg_rrelu_with_noise_');
    return _atg_rrelu_with_noise_(
      arg0,
      self,
      noise,
      training,
    );
  }

  _dart_atg_rrelu_with_noise_ _atg_rrelu_with_noise_;

  void atg_rrelu_with_noise_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> noise,
    ffi.Pointer<ffi.Void> lower,
    ffi.Pointer<ffi.Void> upper,
    int training,
    int self_is_result,
  ) {
    _atg_rrelu_with_noise_backward ??= _dylib.lookupFunction<
        _c_atg_rrelu_with_noise_backward,
        _dart_atg_rrelu_with_noise_backward>('atg_rrelu_with_noise_backward');
    return _atg_rrelu_with_noise_backward(
      arg0,
      grad_output,
      self,
      noise,
      lower,
      upper,
      training,
      self_is_result,
    );
  }

  _dart_atg_rrelu_with_noise_backward _atg_rrelu_with_noise_backward;

  void atg_rrelu_with_noise_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> noise,
    int training,
  ) {
    _atg_rrelu_with_noise_out ??= _dylib.lookupFunction<
        _c_atg_rrelu_with_noise_out,
        _dart_atg_rrelu_with_noise_out>('atg_rrelu_with_noise_out');
    return _atg_rrelu_with_noise_out(
      arg0,
      out,
      self,
      noise,
      training,
    );
  }

  _dart_atg_rrelu_with_noise_out _atg_rrelu_with_noise_out;

  void atg_rsqrt(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_rsqrt ??=
        _dylib.lookupFunction<_c_atg_rsqrt, _dart_atg_rsqrt>('atg_rsqrt');
    return _atg_rsqrt(
      arg0,
      self,
    );
  }

  _dart_atg_rsqrt _atg_rsqrt;

  void atg_rsqrt_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_rsqrt_ ??=
        _dylib.lookupFunction<_c_atg_rsqrt_, _dart_atg_rsqrt_>('atg_rsqrt_');
    return _atg_rsqrt_(
      arg0,
      self,
    );
  }

  _dart_atg_rsqrt_ _atg_rsqrt_;

  void atg_rsqrt_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_rsqrt_out ??= _dylib
        .lookupFunction<_c_atg_rsqrt_out, _dart_atg_rsqrt_out>('atg_rsqrt_out');
    return _atg_rsqrt_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_rsqrt_out _atg_rsqrt_out;

  void atg_rsub(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_rsub ??=
        _dylib.lookupFunction<_c_atg_rsub, _dart_atg_rsub>('atg_rsub');
    return _atg_rsub(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_rsub _atg_rsub;

  void atg_rsub1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_rsub1 ??=
        _dylib.lookupFunction<_c_atg_rsub1, _dart_atg_rsub1>('atg_rsub1');
    return _atg_rsub1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_rsub1 _atg_rsub1;

  void atg_scalar_tensor(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> s,
    int options_kind,
    int options_device,
  ) {
    _atg_scalar_tensor ??=
        _dylib.lookupFunction<_c_atg_scalar_tensor, _dart_atg_scalar_tensor>(
            'atg_scalar_tensor');
    return _atg_scalar_tensor(
      arg0,
      s,
      options_kind,
      options_device,
    );
  }

  _dart_atg_scalar_tensor _atg_scalar_tensor;

  void atg_scatter(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    ffi.Pointer<ffi.Void> index,
    ffi.Pointer<ffi.Void> src,
  ) {
    _atg_scatter ??=
        _dylib.lookupFunction<_c_atg_scatter, _dart_atg_scatter>('atg_scatter');
    return _atg_scatter(
      arg0,
      self,
      dim,
      index,
      src,
    );
  }

  _dart_atg_scatter _atg_scatter;

  void atg_scatter1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    ffi.Pointer<ffi.Void> index,
    ffi.Pointer<ffi.Void> value,
  ) {
    _atg_scatter1 ??= _dylib
        .lookupFunction<_c_atg_scatter1, _dart_atg_scatter1>('atg_scatter1');
    return _atg_scatter1(
      arg0,
      self,
      dim,
      index,
      value,
    );
  }

  _dart_atg_scatter1 _atg_scatter1;

  void atg_scatter_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    ffi.Pointer<ffi.Void> index,
    ffi.Pointer<ffi.Void> src,
  ) {
    _atg_scatter_ ??= _dylib
        .lookupFunction<_c_atg_scatter_, _dart_atg_scatter_>('atg_scatter_');
    return _atg_scatter_(
      arg0,
      self,
      dim,
      index,
      src,
    );
  }

  _dart_atg_scatter_ _atg_scatter_;

  void atg_scatter_1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    ffi.Pointer<ffi.Void> index,
    ffi.Pointer<ffi.Void> value,
  ) {
    _atg_scatter_1 ??= _dylib
        .lookupFunction<_c_atg_scatter_1, _dart_atg_scatter_1>('atg_scatter_1');
    return _atg_scatter_1(
      arg0,
      self,
      dim,
      index,
      value,
    );
  }

  _dart_atg_scatter_1 _atg_scatter_1;

  void atg_scatter_add(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    ffi.Pointer<ffi.Void> index,
    ffi.Pointer<ffi.Void> src,
  ) {
    _atg_scatter_add ??=
        _dylib.lookupFunction<_c_atg_scatter_add, _dart_atg_scatter_add>(
            'atg_scatter_add');
    return _atg_scatter_add(
      arg0,
      self,
      dim,
      index,
      src,
    );
  }

  _dart_atg_scatter_add _atg_scatter_add;

  void atg_scatter_add_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    ffi.Pointer<ffi.Void> index,
    ffi.Pointer<ffi.Void> src,
  ) {
    _atg_scatter_add_ ??=
        _dylib.lookupFunction<_c_atg_scatter_add_, _dart_atg_scatter_add_>(
            'atg_scatter_add_');
    return _atg_scatter_add_(
      arg0,
      self,
      dim,
      index,
      src,
    );
  }

  _dart_atg_scatter_add_ _atg_scatter_add_;

  void atg_searchsorted(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> sorted_sequence,
    ffi.Pointer<ffi.Void> self,
    int out_int32,
    int right,
  ) {
    _atg_searchsorted ??=
        _dylib.lookupFunction<_c_atg_searchsorted, _dart_atg_searchsorted>(
            'atg_searchsorted');
    return _atg_searchsorted(
      arg0,
      sorted_sequence,
      self,
      out_int32,
      right,
    );
  }

  _dart_atg_searchsorted _atg_searchsorted;

  void atg_searchsorted1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> sorted_sequence,
    ffi.Pointer<ffi.Void> self_scalar,
    int out_int32,
    int right,
  ) {
    _atg_searchsorted1 ??=
        _dylib.lookupFunction<_c_atg_searchsorted1, _dart_atg_searchsorted1>(
            'atg_searchsorted1');
    return _atg_searchsorted1(
      arg0,
      sorted_sequence,
      self_scalar,
      out_int32,
      right,
    );
  }

  _dart_atg_searchsorted1 _atg_searchsorted1;

  void atg_searchsorted_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> sorted_sequence,
    ffi.Pointer<ffi.Void> self,
    int out_int32,
    int right,
  ) {
    _atg_searchsorted_out ??= _dylib.lookupFunction<_c_atg_searchsorted_out,
        _dart_atg_searchsorted_out>('atg_searchsorted_out');
    return _atg_searchsorted_out(
      arg0,
      out,
      sorted_sequence,
      self,
      out_int32,
      right,
    );
  }

  _dart_atg_searchsorted_out _atg_searchsorted_out;

  void atg_select(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int index,
  ) {
    _atg_select ??=
        _dylib.lookupFunction<_c_atg_select, _dart_atg_select>('atg_select');
    return _atg_select(
      arg0,
      self,
      dim,
      index,
    );
  }

  _dart_atg_select _atg_select;

  void atg_selu(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_selu ??=
        _dylib.lookupFunction<_c_atg_selu, _dart_atg_selu>('atg_selu');
    return _atg_selu(
      arg0,
      self,
    );
  }

  _dart_atg_selu _atg_selu;

  void atg_selu_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_selu_ ??=
        _dylib.lookupFunction<_c_atg_selu_, _dart_atg_selu_>('atg_selu_');
    return _atg_selu_(
      arg0,
      self,
    );
  }

  _dart_atg_selu_ _atg_selu_;

  void atg_set_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_set_ ??=
        _dylib.lookupFunction<_c_atg_set_, _dart_atg_set_>('atg_set_');
    return _atg_set_(
      arg0,
      self,
    );
  }

  _dart_atg_set_ _atg_set_;

  void atg_set_1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> source,
  ) {
    _atg_set_1 ??=
        _dylib.lookupFunction<_c_atg_set_1, _dart_atg_set_1>('atg_set_1');
    return _atg_set_1(
      arg0,
      self,
      source,
    );
  }

  _dart_atg_set_1 _atg_set_1;

  void atg_set_requires_grad(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int r,
  ) {
    _atg_set_requires_grad ??= _dylib.lookupFunction<_c_atg_set_requires_grad,
        _dart_atg_set_requires_grad>('atg_set_requires_grad');
    return _atg_set_requires_grad(
      arg0,
      self,
      r,
    );
  }

  _dart_atg_set_requires_grad _atg_set_requires_grad;

  void atg_sigmoid(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_sigmoid ??=
        _dylib.lookupFunction<_c_atg_sigmoid, _dart_atg_sigmoid>('atg_sigmoid');
    return _atg_sigmoid(
      arg0,
      self,
    );
  }

  _dart_atg_sigmoid _atg_sigmoid;

  void atg_sigmoid_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_sigmoid_ ??= _dylib
        .lookupFunction<_c_atg_sigmoid_, _dart_atg_sigmoid_>('atg_sigmoid_');
    return _atg_sigmoid_(
      arg0,
      self,
    );
  }

  _dart_atg_sigmoid_ _atg_sigmoid_;

  void atg_sigmoid_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> output,
  ) {
    _atg_sigmoid_backward ??= _dylib.lookupFunction<_c_atg_sigmoid_backward,
        _dart_atg_sigmoid_backward>('atg_sigmoid_backward');
    return _atg_sigmoid_backward(
      arg0,
      grad_output,
      output,
    );
  }

  _dart_atg_sigmoid_backward _atg_sigmoid_backward;

  void atg_sigmoid_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> output,
  ) {
    _atg_sigmoid_backward_out ??= _dylib.lookupFunction<
        _c_atg_sigmoid_backward_out,
        _dart_atg_sigmoid_backward_out>('atg_sigmoid_backward_out');
    return _atg_sigmoid_backward_out(
      arg0,
      grad_input,
      grad_output,
      output,
    );
  }

  _dart_atg_sigmoid_backward_out _atg_sigmoid_backward_out;

  void atg_sigmoid_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_sigmoid_out ??=
        _dylib.lookupFunction<_c_atg_sigmoid_out, _dart_atg_sigmoid_out>(
            'atg_sigmoid_out');
    return _atg_sigmoid_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_sigmoid_out _atg_sigmoid_out;

  void atg_sign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_sign ??=
        _dylib.lookupFunction<_c_atg_sign, _dart_atg_sign>('atg_sign');
    return _atg_sign(
      arg0,
      self,
    );
  }

  _dart_atg_sign _atg_sign;

  void atg_sign_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_sign_ ??=
        _dylib.lookupFunction<_c_atg_sign_, _dart_atg_sign_>('atg_sign_');
    return _atg_sign_(
      arg0,
      self,
    );
  }

  _dart_atg_sign_ _atg_sign_;

  void atg_sign_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_sign_out ??= _dylib
        .lookupFunction<_c_atg_sign_out, _dart_atg_sign_out>('atg_sign_out');
    return _atg_sign_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_sign_out _atg_sign_out;

  void atg_sin(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_sin ??= _dylib.lookupFunction<_c_atg_sin, _dart_atg_sin>('atg_sin');
    return _atg_sin(
      arg0,
      self,
    );
  }

  _dart_atg_sin _atg_sin;

  void atg_sin_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_sin_ ??=
        _dylib.lookupFunction<_c_atg_sin_, _dart_atg_sin_>('atg_sin_');
    return _atg_sin_(
      arg0,
      self,
    );
  }

  _dart_atg_sin_ _atg_sin_;

  void atg_sin_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_sin_out ??=
        _dylib.lookupFunction<_c_atg_sin_out, _dart_atg_sin_out>('atg_sin_out');
    return _atg_sin_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_sin_out _atg_sin_out;

  void atg_sinh(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_sinh ??=
        _dylib.lookupFunction<_c_atg_sinh, _dart_atg_sinh>('atg_sinh');
    return _atg_sinh(
      arg0,
      self,
    );
  }

  _dart_atg_sinh _atg_sinh;

  void atg_sinh_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_sinh_ ??=
        _dylib.lookupFunction<_c_atg_sinh_, _dart_atg_sinh_>('atg_sinh_');
    return _atg_sinh_(
      arg0,
      self,
    );
  }

  _dart_atg_sinh_ _atg_sinh_;

  void atg_sinh_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_sinh_out ??= _dylib
        .lookupFunction<_c_atg_sinh_out, _dart_atg_sinh_out>('atg_sinh_out');
    return _atg_sinh_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_sinh_out _atg_sinh_out;

  void atg_slice(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int start,
    int end,
    int step,
  ) {
    _atg_slice ??=
        _dylib.lookupFunction<_c_atg_slice, _dart_atg_slice>('atg_slice');
    return _atg_slice(
      arg0,
      self,
      dim,
      start,
      end,
      step,
    );
  }

  _dart_atg_slice _atg_slice;

  void atg_slogdet(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_slogdet ??=
        _dylib.lookupFunction<_c_atg_slogdet, _dart_atg_slogdet>('atg_slogdet');
    return _atg_slogdet(
      arg0,
      self,
    );
  }

  _dart_atg_slogdet _atg_slogdet;

  void atg_slow_conv3d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Void> bias,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
  ) {
    _atg_slow_conv3d ??=
        _dylib.lookupFunction<_c_atg_slow_conv3d, _dart_atg_slow_conv3d>(
            'atg_slow_conv3d');
    return _atg_slow_conv3d(
      arg0,
      self,
      weight,
      kernel_size_data,
      kernel_size_len,
      bias,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
    );
  }

  _dart_atg_slow_conv3d _atg_slow_conv3d;

  void atg_slow_conv3d_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Void> bias,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
  ) {
    _atg_slow_conv3d_out ??= _dylib.lookupFunction<_c_atg_slow_conv3d_out,
        _dart_atg_slow_conv3d_out>('atg_slow_conv3d_out');
    return _atg_slow_conv3d_out(
      arg0,
      out,
      self,
      weight,
      kernel_size_data,
      kernel_size_len,
      bias,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
    );
  }

  _dart_atg_slow_conv3d_out _atg_slow_conv3d_out;

  void atg_slow_conv_dilated2d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Void> bias,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
  ) {
    _atg_slow_conv_dilated2d ??= _dylib.lookupFunction<
        _c_atg_slow_conv_dilated2d,
        _dart_atg_slow_conv_dilated2d>('atg_slow_conv_dilated2d');
    return _atg_slow_conv_dilated2d(
      arg0,
      self,
      weight,
      kernel_size_data,
      kernel_size_len,
      bias,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      dilation_data,
      dilation_len,
    );
  }

  _dart_atg_slow_conv_dilated2d _atg_slow_conv_dilated2d;

  void atg_slow_conv_dilated3d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Void> bias,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
  ) {
    _atg_slow_conv_dilated3d ??= _dylib.lookupFunction<
        _c_atg_slow_conv_dilated3d,
        _dart_atg_slow_conv_dilated3d>('atg_slow_conv_dilated3d');
    return _atg_slow_conv_dilated3d(
      arg0,
      self,
      weight,
      kernel_size_data,
      kernel_size_len,
      bias,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      dilation_data,
      dilation_len,
    );
  }

  _dart_atg_slow_conv_dilated3d _atg_slow_conv_dilated3d;

  void atg_slow_conv_transpose2d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Void> bias,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> output_padding_data,
    int output_padding_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
  ) {
    _atg_slow_conv_transpose2d ??= _dylib.lookupFunction<
        _c_atg_slow_conv_transpose2d,
        _dart_atg_slow_conv_transpose2d>('atg_slow_conv_transpose2d');
    return _atg_slow_conv_transpose2d(
      arg0,
      self,
      weight,
      kernel_size_data,
      kernel_size_len,
      bias,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      output_padding_data,
      output_padding_len,
      dilation_data,
      dilation_len,
    );
  }

  _dart_atg_slow_conv_transpose2d _atg_slow_conv_transpose2d;

  void atg_slow_conv_transpose2d_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Void> bias,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> output_padding_data,
    int output_padding_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
  ) {
    _atg_slow_conv_transpose2d_out ??= _dylib.lookupFunction<
        _c_atg_slow_conv_transpose2d_out,
        _dart_atg_slow_conv_transpose2d_out>('atg_slow_conv_transpose2d_out');
    return _atg_slow_conv_transpose2d_out(
      arg0,
      out,
      self,
      weight,
      kernel_size_data,
      kernel_size_len,
      bias,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      output_padding_data,
      output_padding_len,
      dilation_data,
      dilation_len,
    );
  }

  _dart_atg_slow_conv_transpose2d_out _atg_slow_conv_transpose2d_out;

  void atg_slow_conv_transpose3d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Void> bias,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> output_padding_data,
    int output_padding_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
  ) {
    _atg_slow_conv_transpose3d ??= _dylib.lookupFunction<
        _c_atg_slow_conv_transpose3d,
        _dart_atg_slow_conv_transpose3d>('atg_slow_conv_transpose3d');
    return _atg_slow_conv_transpose3d(
      arg0,
      self,
      weight,
      kernel_size_data,
      kernel_size_len,
      bias,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      output_padding_data,
      output_padding_len,
      dilation_data,
      dilation_len,
    );
  }

  _dart_atg_slow_conv_transpose3d _atg_slow_conv_transpose3d;

  void atg_slow_conv_transpose3d_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> weight,
    ffi.Pointer<ffi.Int64> kernel_size_data,
    int kernel_size_len,
    ffi.Pointer<ffi.Void> bias,
    ffi.Pointer<ffi.Int64> stride_data,
    int stride_len,
    ffi.Pointer<ffi.Int64> padding_data,
    int padding_len,
    ffi.Pointer<ffi.Int64> output_padding_data,
    int output_padding_len,
    ffi.Pointer<ffi.Int64> dilation_data,
    int dilation_len,
  ) {
    _atg_slow_conv_transpose3d_out ??= _dylib.lookupFunction<
        _c_atg_slow_conv_transpose3d_out,
        _dart_atg_slow_conv_transpose3d_out>('atg_slow_conv_transpose3d_out');
    return _atg_slow_conv_transpose3d_out(
      arg0,
      out,
      self,
      weight,
      kernel_size_data,
      kernel_size_len,
      bias,
      stride_data,
      stride_len,
      padding_data,
      padding_len,
      output_padding_data,
      output_padding_len,
      dilation_data,
      dilation_len,
    );
  }

  _dart_atg_slow_conv_transpose3d_out _atg_slow_conv_transpose3d_out;

  void atg_smm(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> mat2,
  ) {
    _atg_smm ??= _dylib.lookupFunction<_c_atg_smm, _dart_atg_smm>('atg_smm');
    return _atg_smm(
      arg0,
      self,
      mat2,
    );
  }

  _dart_atg_smm _atg_smm;

  void atg_smooth_l1_loss(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    int reduction,
  ) {
    _atg_smooth_l1_loss ??=
        _dylib.lookupFunction<_c_atg_smooth_l1_loss, _dart_atg_smooth_l1_loss>(
            'atg_smooth_l1_loss');
    return _atg_smooth_l1_loss(
      arg0,
      self,
      target,
      reduction,
    );
  }

  _dart_atg_smooth_l1_loss _atg_smooth_l1_loss;

  void atg_smooth_l1_loss_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    int reduction,
  ) {
    _atg_smooth_l1_loss_backward ??= _dylib.lookupFunction<
        _c_atg_smooth_l1_loss_backward,
        _dart_atg_smooth_l1_loss_backward>('atg_smooth_l1_loss_backward');
    return _atg_smooth_l1_loss_backward(
      arg0,
      grad_output,
      self,
      target,
      reduction,
    );
  }

  _dart_atg_smooth_l1_loss_backward _atg_smooth_l1_loss_backward;

  void atg_smooth_l1_loss_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    int reduction,
  ) {
    _atg_smooth_l1_loss_backward_out ??= _dylib.lookupFunction<
            _c_atg_smooth_l1_loss_backward_out,
            _dart_atg_smooth_l1_loss_backward_out>(
        'atg_smooth_l1_loss_backward_out');
    return _atg_smooth_l1_loss_backward_out(
      arg0,
      grad_input,
      grad_output,
      self,
      target,
      reduction,
    );
  }

  _dart_atg_smooth_l1_loss_backward_out _atg_smooth_l1_loss_backward_out;

  void atg_smooth_l1_loss_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    int reduction,
  ) {
    _atg_smooth_l1_loss_out ??= _dylib.lookupFunction<_c_atg_smooth_l1_loss_out,
        _dart_atg_smooth_l1_loss_out>('atg_smooth_l1_loss_out');
    return _atg_smooth_l1_loss_out(
      arg0,
      out,
      self,
      target,
      reduction,
    );
  }

  _dart_atg_smooth_l1_loss_out _atg_smooth_l1_loss_out;

  void atg_soft_margin_loss(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    int reduction,
  ) {
    _atg_soft_margin_loss ??= _dylib.lookupFunction<_c_atg_soft_margin_loss,
        _dart_atg_soft_margin_loss>('atg_soft_margin_loss');
    return _atg_soft_margin_loss(
      arg0,
      self,
      target,
      reduction,
    );
  }

  _dart_atg_soft_margin_loss _atg_soft_margin_loss;

  void atg_soft_margin_loss_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    int reduction,
  ) {
    _atg_soft_margin_loss_backward ??= _dylib.lookupFunction<
        _c_atg_soft_margin_loss_backward,
        _dart_atg_soft_margin_loss_backward>('atg_soft_margin_loss_backward');
    return _atg_soft_margin_loss_backward(
      arg0,
      grad_output,
      self,
      target,
      reduction,
    );
  }

  _dart_atg_soft_margin_loss_backward _atg_soft_margin_loss_backward;

  void atg_soft_margin_loss_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    int reduction,
  ) {
    _atg_soft_margin_loss_backward_out ??= _dylib.lookupFunction<
            _c_atg_soft_margin_loss_backward_out,
            _dart_atg_soft_margin_loss_backward_out>(
        'atg_soft_margin_loss_backward_out');
    return _atg_soft_margin_loss_backward_out(
      arg0,
      grad_input,
      grad_output,
      self,
      target,
      reduction,
    );
  }

  _dart_atg_soft_margin_loss_backward_out _atg_soft_margin_loss_backward_out;

  void atg_soft_margin_loss_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> target,
    int reduction,
  ) {
    _atg_soft_margin_loss_out ??= _dylib.lookupFunction<
        _c_atg_soft_margin_loss_out,
        _dart_atg_soft_margin_loss_out>('atg_soft_margin_loss_out');
    return _atg_soft_margin_loss_out(
      arg0,
      out,
      self,
      target,
      reduction,
    );
  }

  _dart_atg_soft_margin_loss_out _atg_soft_margin_loss_out;

  void atg_softmax(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int dtype,
  ) {
    _atg_softmax ??=
        _dylib.lookupFunction<_c_atg_softmax, _dart_atg_softmax>('atg_softmax');
    return _atg_softmax(
      arg0,
      self,
      dim,
      dtype,
    );
  }

  _dart_atg_softmax _atg_softmax;

  void atg_softplus(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_softplus ??= _dylib
        .lookupFunction<_c_atg_softplus, _dart_atg_softplus>('atg_softplus');
    return _atg_softplus(
      arg0,
      self,
    );
  }

  _dart_atg_softplus _atg_softplus;

  void atg_softplus_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> beta,
    ffi.Pointer<ffi.Void> threshold,
    ffi.Pointer<ffi.Void> output,
  ) {
    _atg_softplus_backward ??= _dylib.lookupFunction<_c_atg_softplus_backward,
        _dart_atg_softplus_backward>('atg_softplus_backward');
    return _atg_softplus_backward(
      arg0,
      grad_output,
      self,
      beta,
      threshold,
      output,
    );
  }

  _dart_atg_softplus_backward _atg_softplus_backward;

  void atg_softplus_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> beta,
    ffi.Pointer<ffi.Void> threshold,
    ffi.Pointer<ffi.Void> output,
  ) {
    _atg_softplus_backward_out ??= _dylib.lookupFunction<
        _c_atg_softplus_backward_out,
        _dart_atg_softplus_backward_out>('atg_softplus_backward_out');
    return _atg_softplus_backward_out(
      arg0,
      grad_input,
      grad_output,
      self,
      beta,
      threshold,
      output,
    );
  }

  _dart_atg_softplus_backward_out _atg_softplus_backward_out;

  void atg_softplus_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_softplus_out ??=
        _dylib.lookupFunction<_c_atg_softplus_out, _dart_atg_softplus_out>(
            'atg_softplus_out');
    return _atg_softplus_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_softplus_out _atg_softplus_out;

  void atg_softshrink(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_softshrink ??=
        _dylib.lookupFunction<_c_atg_softshrink, _dart_atg_softshrink>(
            'atg_softshrink');
    return _atg_softshrink(
      arg0,
      self,
    );
  }

  _dart_atg_softshrink _atg_softshrink;

  void atg_softshrink_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> lambd,
  ) {
    _atg_softshrink_backward ??= _dylib.lookupFunction<
        _c_atg_softshrink_backward,
        _dart_atg_softshrink_backward>('atg_softshrink_backward');
    return _atg_softshrink_backward(
      arg0,
      grad_output,
      self,
      lambd,
    );
  }

  _dart_atg_softshrink_backward _atg_softshrink_backward;

  void atg_softshrink_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> lambd,
  ) {
    _atg_softshrink_backward_out ??= _dylib.lookupFunction<
        _c_atg_softshrink_backward_out,
        _dart_atg_softshrink_backward_out>('atg_softshrink_backward_out');
    return _atg_softshrink_backward_out(
      arg0,
      grad_input,
      grad_output,
      self,
      lambd,
    );
  }

  _dart_atg_softshrink_backward_out _atg_softshrink_backward_out;

  void atg_softshrink_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_softshrink_out ??=
        _dylib.lookupFunction<_c_atg_softshrink_out, _dart_atg_softshrink_out>(
            'atg_softshrink_out');
    return _atg_softshrink_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_softshrink_out _atg_softshrink_out;

  void atg_solve(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> A,
  ) {
    _atg_solve ??=
        _dylib.lookupFunction<_c_atg_solve, _dart_atg_solve>('atg_solve');
    return _atg_solve(
      arg0,
      self,
      A,
    );
  }

  _dart_atg_solve _atg_solve;

  void atg_solve_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> solution,
    ffi.Pointer<ffi.Void> lu,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> A,
  ) {
    _atg_solve_out ??= _dylib
        .lookupFunction<_c_atg_solve_out, _dart_atg_solve_out>('atg_solve_out');
    return _atg_solve_out(
      arg0,
      solution,
      lu,
      self,
      A,
    );
  }

  _dart_atg_solve_out _atg_solve_out;

  void atg_sort(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int descending,
  ) {
    _atg_sort ??=
        _dylib.lookupFunction<_c_atg_sort, _dart_atg_sort>('atg_sort');
    return _atg_sort(
      arg0,
      self,
      dim,
      descending,
    );
  }

  _dart_atg_sort _atg_sort;

  void atg_sort_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> values,
    ffi.Pointer<ffi.Void> indices,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int descending,
  ) {
    _atg_sort_out ??= _dylib
        .lookupFunction<_c_atg_sort_out, _dart_atg_sort_out>('atg_sort_out');
    return _atg_sort_out(
      arg0,
      values,
      indices,
      self,
      dim,
      descending,
    );
  }

  _dart_atg_sort_out _atg_sort_out;

  void atg_sparse_coo_tensor(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
    int options_kind,
    int options_device,
  ) {
    _atg_sparse_coo_tensor ??= _dylib.lookupFunction<_c_atg_sparse_coo_tensor,
        _dart_atg_sparse_coo_tensor>('atg_sparse_coo_tensor');
    return _atg_sparse_coo_tensor(
      arg0,
      size_data,
      size_len,
      options_kind,
      options_device,
    );
  }

  _dart_atg_sparse_coo_tensor _atg_sparse_coo_tensor;

  void atg_sparse_coo_tensor1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> indices,
    ffi.Pointer<ffi.Void> values,
    int options_kind,
    int options_device,
  ) {
    _atg_sparse_coo_tensor1 ??= _dylib.lookupFunction<_c_atg_sparse_coo_tensor1,
        _dart_atg_sparse_coo_tensor1>('atg_sparse_coo_tensor1');
    return _atg_sparse_coo_tensor1(
      arg0,
      indices,
      values,
      options_kind,
      options_device,
    );
  }

  _dart_atg_sparse_coo_tensor1 _atg_sparse_coo_tensor1;

  void atg_sparse_coo_tensor2(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> indices,
    ffi.Pointer<ffi.Void> values,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
    int options_kind,
    int options_device,
  ) {
    _atg_sparse_coo_tensor2 ??= _dylib.lookupFunction<_c_atg_sparse_coo_tensor2,
        _dart_atg_sparse_coo_tensor2>('atg_sparse_coo_tensor2');
    return _atg_sparse_coo_tensor2(
      arg0,
      indices,
      values,
      size_data,
      size_len,
      options_kind,
      options_device,
    );
  }

  _dart_atg_sparse_coo_tensor2 _atg_sparse_coo_tensor2;

  void atg_sparse_mask(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> mask,
  ) {
    _atg_sparse_mask ??=
        _dylib.lookupFunction<_c_atg_sparse_mask, _dart_atg_sparse_mask>(
            'atg_sparse_mask');
    return _atg_sparse_mask(
      arg0,
      self,
      mask,
    );
  }

  _dart_atg_sparse_mask _atg_sparse_mask;

  void atg_sparse_resize_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
    int sparse_dim,
    int dense_dim,
  ) {
    _atg_sparse_resize_ ??=
        _dylib.lookupFunction<_c_atg_sparse_resize_, _dart_atg_sparse_resize_>(
            'atg_sparse_resize_');
    return _atg_sparse_resize_(
      arg0,
      self,
      size_data,
      size_len,
      sparse_dim,
      dense_dim,
    );
  }

  _dart_atg_sparse_resize_ _atg_sparse_resize_;

  void atg_sparse_resize_and_clear_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
    int sparse_dim,
    int dense_dim,
  ) {
    _atg_sparse_resize_and_clear_ ??= _dylib.lookupFunction<
        _c_atg_sparse_resize_and_clear_,
        _dart_atg_sparse_resize_and_clear_>('atg_sparse_resize_and_clear_');
    return _atg_sparse_resize_and_clear_(
      arg0,
      self,
      size_data,
      size_len,
      sparse_dim,
      dense_dim,
    );
  }

  _dart_atg_sparse_resize_and_clear_ _atg_sparse_resize_and_clear_;

  ffi.Pointer<ffi.Pointer<ffi.Void>> atg_split(
    ffi.Pointer<ffi.Void> self,
    int split_size,
    int dim,
  ) {
    _atg_split ??=
        _dylib.lookupFunction<_c_atg_split, _dart_atg_split>('atg_split');
    return _atg_split(
      self,
      split_size,
      dim,
    );
  }

  _dart_atg_split _atg_split;

  ffi.Pointer<ffi.Pointer<ffi.Void>> atg_split_with_sizes(
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> split_sizes_data,
    int split_sizes_len,
    int dim,
  ) {
    _atg_split_with_sizes ??= _dylib.lookupFunction<_c_atg_split_with_sizes,
        _dart_atg_split_with_sizes>('atg_split_with_sizes');
    return _atg_split_with_sizes(
      self,
      split_sizes_data,
      split_sizes_len,
      dim,
    );
  }

  _dart_atg_split_with_sizes _atg_split_with_sizes;

  void atg_sqrt(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_sqrt ??=
        _dylib.lookupFunction<_c_atg_sqrt, _dart_atg_sqrt>('atg_sqrt');
    return _atg_sqrt(
      arg0,
      self,
    );
  }

  _dart_atg_sqrt _atg_sqrt;

  void atg_sqrt_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_sqrt_ ??=
        _dylib.lookupFunction<_c_atg_sqrt_, _dart_atg_sqrt_>('atg_sqrt_');
    return _atg_sqrt_(
      arg0,
      self,
    );
  }

  _dart_atg_sqrt_ _atg_sqrt_;

  void atg_sqrt_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_sqrt_out ??= _dylib
        .lookupFunction<_c_atg_sqrt_out, _dart_atg_sqrt_out>('atg_sqrt_out');
    return _atg_sqrt_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_sqrt_out _atg_sqrt_out;

  void atg_square(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_square ??=
        _dylib.lookupFunction<_c_atg_square, _dart_atg_square>('atg_square');
    return _atg_square(
      arg0,
      self,
    );
  }

  _dart_atg_square _atg_square;

  void atg_square_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_square_ ??=
        _dylib.lookupFunction<_c_atg_square_, _dart_atg_square_>('atg_square_');
    return _atg_square_(
      arg0,
      self,
    );
  }

  _dart_atg_square_ _atg_square_;

  void atg_squeeze(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_squeeze ??=
        _dylib.lookupFunction<_c_atg_squeeze, _dart_atg_squeeze>('atg_squeeze');
    return _atg_squeeze(
      arg0,
      self,
    );
  }

  _dart_atg_squeeze _atg_squeeze;

  void atg_squeeze1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
  ) {
    _atg_squeeze1 ??= _dylib
        .lookupFunction<_c_atg_squeeze1, _dart_atg_squeeze1>('atg_squeeze1');
    return _atg_squeeze1(
      arg0,
      self,
      dim,
    );
  }

  _dart_atg_squeeze1 _atg_squeeze1;

  void atg_squeeze_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_squeeze_ ??= _dylib
        .lookupFunction<_c_atg_squeeze_, _dart_atg_squeeze_>('atg_squeeze_');
    return _atg_squeeze_(
      arg0,
      self,
    );
  }

  _dart_atg_squeeze_ _atg_squeeze_;

  void atg_squeeze_1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
  ) {
    _atg_squeeze_1 ??= _dylib
        .lookupFunction<_c_atg_squeeze_1, _dart_atg_squeeze_1>('atg_squeeze_1');
    return _atg_squeeze_1(
      arg0,
      self,
      dim,
    );
  }

  _dart_atg_squeeze_1 _atg_squeeze_1;

  void atg_sspaddmm(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> mat1,
    ffi.Pointer<ffi.Void> mat2,
  ) {
    _atg_sspaddmm ??= _dylib
        .lookupFunction<_c_atg_sspaddmm, _dart_atg_sspaddmm>('atg_sspaddmm');
    return _atg_sspaddmm(
      arg0,
      self,
      mat1,
      mat2,
    );
  }

  _dart_atg_sspaddmm _atg_sspaddmm;

  void atg_sspaddmm_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> mat1,
    ffi.Pointer<ffi.Void> mat2,
  ) {
    _atg_sspaddmm_out ??=
        _dylib.lookupFunction<_c_atg_sspaddmm_out, _dart_atg_sspaddmm_out>(
            'atg_sspaddmm_out');
    return _atg_sspaddmm_out(
      arg0,
      out,
      self,
      mat1,
      mat2,
    );
  }

  _dart_atg_sspaddmm_out _atg_sspaddmm_out;

  void atg_stack(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
    int tensors_len,
    int dim,
  ) {
    _atg_stack ??=
        _dylib.lookupFunction<_c_atg_stack, _dart_atg_stack>('atg_stack');
    return _atg_stack(
      arg0,
      tensors_data,
      tensors_len,
      dim,
    );
  }

  _dart_atg_stack _atg_stack;

  void atg_stack_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
    int tensors_len,
    int dim,
  ) {
    _atg_stack_out ??= _dylib
        .lookupFunction<_c_atg_stack_out, _dart_atg_stack_out>('atg_stack_out');
    return _atg_stack_out(
      arg0,
      out,
      tensors_data,
      tensors_len,
      dim,
    );
  }

  _dart_atg_stack_out _atg_stack_out;

  void atg_std(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int unbiased,
  ) {
    _atg_std ??= _dylib.lookupFunction<_c_atg_std, _dart_atg_std>('atg_std');
    return _atg_std(
      arg0,
      self,
      unbiased,
    );
  }

  _dart_atg_std _atg_std;

  void atg_std1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> dim_data,
    int dim_len,
    int unbiased,
    int keepdim,
  ) {
    _atg_std1 ??=
        _dylib.lookupFunction<_c_atg_std1, _dart_atg_std1>('atg_std1');
    return _atg_std1(
      arg0,
      self,
      dim_data,
      dim_len,
      unbiased,
      keepdim,
    );
  }

  _dart_atg_std1 _atg_std1;

  void atg_std_mean(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int unbiased,
  ) {
    _atg_std_mean ??= _dylib
        .lookupFunction<_c_atg_std_mean, _dart_atg_std_mean>('atg_std_mean');
    return _atg_std_mean(
      arg0,
      self,
      unbiased,
    );
  }

  _dart_atg_std_mean _atg_std_mean;

  void atg_std_mean1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> dim_data,
    int dim_len,
    int unbiased,
    int keepdim,
  ) {
    _atg_std_mean1 ??= _dylib
        .lookupFunction<_c_atg_std_mean1, _dart_atg_std_mean1>('atg_std_mean1');
    return _atg_std_mean1(
      arg0,
      self,
      dim_data,
      dim_len,
      unbiased,
      keepdim,
    );
  }

  _dart_atg_std_mean1 _atg_std_mean1;

  void atg_std_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> dim_data,
    int dim_len,
    int unbiased,
    int keepdim,
  ) {
    _atg_std_out ??=
        _dylib.lookupFunction<_c_atg_std_out, _dart_atg_std_out>('atg_std_out');
    return _atg_std_out(
      arg0,
      out,
      self,
      dim_data,
      dim_len,
      unbiased,
      keepdim,
    );
  }

  _dart_atg_std_out _atg_std_out;

  void atg_stft(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int n_fft,
    int hop_length_v,
    int hop_length_null,
    int win_length_v,
    int win_length_null,
    ffi.Pointer<ffi.Void> window,
    int normalized,
    int onesided,
  ) {
    _atg_stft ??=
        _dylib.lookupFunction<_c_atg_stft, _dart_atg_stft>('atg_stft');
    return _atg_stft(
      arg0,
      self,
      n_fft,
      hop_length_v,
      hop_length_null,
      win_length_v,
      win_length_null,
      window,
      normalized,
      onesided,
    );
  }

  _dart_atg_stft _atg_stft;

  void atg_sub(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_sub ??= _dylib.lookupFunction<_c_atg_sub, _dart_atg_sub>('atg_sub');
    return _atg_sub(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_sub _atg_sub;

  void atg_sub1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_sub1 ??=
        _dylib.lookupFunction<_c_atg_sub1, _dart_atg_sub1>('atg_sub1');
    return _atg_sub1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_sub1 _atg_sub1;

  void atg_sub_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_sub_ ??=
        _dylib.lookupFunction<_c_atg_sub_, _dart_atg_sub_>('atg_sub_');
    return _atg_sub_(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_sub_ _atg_sub_;

  void atg_sub_1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_sub_1 ??=
        _dylib.lookupFunction<_c_atg_sub_1, _dart_atg_sub_1>('atg_sub_1');
    return _atg_sub_1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_sub_1 _atg_sub_1;

  void atg_sub_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_sub_out ??=
        _dylib.lookupFunction<_c_atg_sub_out, _dart_atg_sub_out>('atg_sub_out');
    return _atg_sub_out(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_sub_out _atg_sub_out;

  void atg_sum(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dtype,
  ) {
    _atg_sum ??= _dylib.lookupFunction<_c_atg_sum, _dart_atg_sum>('atg_sum');
    return _atg_sum(
      arg0,
      self,
      dtype,
    );
  }

  _dart_atg_sum _atg_sum;

  void atg_sum1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> dim_data,
    int dim_len,
    int keepdim,
    int dtype,
  ) {
    _atg_sum1 ??=
        _dylib.lookupFunction<_c_atg_sum1, _dart_atg_sum1>('atg_sum1');
    return _atg_sum1(
      arg0,
      self,
      dim_data,
      dim_len,
      keepdim,
      dtype,
    );
  }

  _dart_atg_sum1 _atg_sum1;

  void atg_sum_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> dim_data,
    int dim_len,
    int keepdim,
    int dtype,
  ) {
    _atg_sum_out ??=
        _dylib.lookupFunction<_c_atg_sum_out, _dart_atg_sum_out>('atg_sum_out');
    return _atg_sum_out(
      arg0,
      out,
      self,
      dim_data,
      dim_len,
      keepdim,
      dtype,
    );
  }

  _dart_atg_sum_out _atg_sum_out;

  void atg_sum_to_size(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
  ) {
    _atg_sum_to_size ??=
        _dylib.lookupFunction<_c_atg_sum_to_size, _dart_atg_sum_to_size>(
            'atg_sum_to_size');
    return _atg_sum_to_size(
      arg0,
      self,
      size_data,
      size_len,
    );
  }

  _dart_atg_sum_to_size _atg_sum_to_size;

  void atg_svd(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int some,
    int compute_uv,
  ) {
    _atg_svd ??= _dylib.lookupFunction<_c_atg_svd, _dart_atg_svd>('atg_svd');
    return _atg_svd(
      arg0,
      self,
      some,
      compute_uv,
    );
  }

  _dart_atg_svd _atg_svd;

  void atg_svd_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> U,
    ffi.Pointer<ffi.Void> S,
    ffi.Pointer<ffi.Void> V,
    ffi.Pointer<ffi.Void> self,
    int some,
    int compute_uv,
  ) {
    _atg_svd_out ??=
        _dylib.lookupFunction<_c_atg_svd_out, _dart_atg_svd_out>('atg_svd_out');
    return _atg_svd_out(
      arg0,
      U,
      S,
      V,
      self,
      some,
      compute_uv,
    );
  }

  _dart_atg_svd_out _atg_svd_out;

  void atg_symeig(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int eigenvectors,
    int upper,
  ) {
    _atg_symeig ??=
        _dylib.lookupFunction<_c_atg_symeig, _dart_atg_symeig>('atg_symeig');
    return _atg_symeig(
      arg0,
      self,
      eigenvectors,
      upper,
    );
  }

  _dart_atg_symeig _atg_symeig;

  void atg_symeig_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> e,
    ffi.Pointer<ffi.Void> V,
    ffi.Pointer<ffi.Void> self,
    int eigenvectors,
    int upper,
  ) {
    _atg_symeig_out ??=
        _dylib.lookupFunction<_c_atg_symeig_out, _dart_atg_symeig_out>(
            'atg_symeig_out');
    return _atg_symeig_out(
      arg0,
      e,
      V,
      self,
      eigenvectors,
      upper,
    );
  }

  _dart_atg_symeig_out _atg_symeig_out;

  void atg_t(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_t ??= _dylib.lookupFunction<_c_atg_t, _dart_atg_t>('atg_t');
    return _atg_t(
      arg0,
      self,
    );
  }

  _dart_atg_t _atg_t;

  void atg_t_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_t_ ??= _dylib.lookupFunction<_c_atg_t_, _dart_atg_t_>('atg_t_');
    return _atg_t_(
      arg0,
      self,
    );
  }

  _dart_atg_t_ _atg_t_;

  void atg_take(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> index,
  ) {
    _atg_take ??=
        _dylib.lookupFunction<_c_atg_take, _dart_atg_take>('atg_take');
    return _atg_take(
      arg0,
      self,
      index,
    );
  }

  _dart_atg_take _atg_take;

  void atg_take_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> index,
  ) {
    _atg_take_out ??= _dylib
        .lookupFunction<_c_atg_take_out, _dart_atg_take_out>('atg_take_out');
    return _atg_take_out(
      arg0,
      out,
      self,
      index,
    );
  }

  _dart_atg_take_out _atg_take_out;

  void atg_tan(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_tan ??= _dylib.lookupFunction<_c_atg_tan, _dart_atg_tan>('atg_tan');
    return _atg_tan(
      arg0,
      self,
    );
  }

  _dart_atg_tan _atg_tan;

  void atg_tan_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_tan_ ??=
        _dylib.lookupFunction<_c_atg_tan_, _dart_atg_tan_>('atg_tan_');
    return _atg_tan_(
      arg0,
      self,
    );
  }

  _dart_atg_tan_ _atg_tan_;

  void atg_tan_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_tan_out ??=
        _dylib.lookupFunction<_c_atg_tan_out, _dart_atg_tan_out>('atg_tan_out');
    return _atg_tan_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_tan_out _atg_tan_out;

  void atg_tanh(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_tanh ??=
        _dylib.lookupFunction<_c_atg_tanh, _dart_atg_tanh>('atg_tanh');
    return _atg_tanh(
      arg0,
      self,
    );
  }

  _dart_atg_tanh _atg_tanh;

  void atg_tanh_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_tanh_ ??=
        _dylib.lookupFunction<_c_atg_tanh_, _dart_atg_tanh_>('atg_tanh_');
    return _atg_tanh_(
      arg0,
      self,
    );
  }

  _dart_atg_tanh_ _atg_tanh_;

  void atg_tanh_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> output,
  ) {
    _atg_tanh_backward ??=
        _dylib.lookupFunction<_c_atg_tanh_backward, _dart_atg_tanh_backward>(
            'atg_tanh_backward');
    return _atg_tanh_backward(
      arg0,
      grad_output,
      output,
    );
  }

  _dart_atg_tanh_backward _atg_tanh_backward;

  void atg_tanh_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> output,
  ) {
    _atg_tanh_backward_out ??= _dylib.lookupFunction<_c_atg_tanh_backward_out,
        _dart_atg_tanh_backward_out>('atg_tanh_backward_out');
    return _atg_tanh_backward_out(
      arg0,
      grad_input,
      grad_output,
      output,
    );
  }

  _dart_atg_tanh_backward_out _atg_tanh_backward_out;

  void atg_tanh_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_tanh_out ??= _dylib
        .lookupFunction<_c_atg_tanh_out, _dart_atg_tanh_out>('atg_tanh_out');
    return _atg_tanh_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_tanh_out _atg_tanh_out;

  void atg_tensordot(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
    ffi.Pointer<ffi.Int64> dims_self_data,
    int dims_self_len,
    ffi.Pointer<ffi.Int64> dims_other_data,
    int dims_other_len,
  ) {
    _atg_tensordot ??= _dylib
        .lookupFunction<_c_atg_tensordot, _dart_atg_tensordot>('atg_tensordot');
    return _atg_tensordot(
      arg0,
      self,
      other,
      dims_self_data,
      dims_self_len,
      dims_other_data,
      dims_other_len,
    );
  }

  _dart_atg_tensordot _atg_tensordot;

  void atg_threshold(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> threshold,
    ffi.Pointer<ffi.Void> value,
  ) {
    _atg_threshold ??= _dylib
        .lookupFunction<_c_atg_threshold, _dart_atg_threshold>('atg_threshold');
    return _atg_threshold(
      arg0,
      self,
      threshold,
      value,
    );
  }

  _dart_atg_threshold _atg_threshold;

  void atg_threshold_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> threshold,
    ffi.Pointer<ffi.Void> value,
  ) {
    _atg_threshold_ ??=
        _dylib.lookupFunction<_c_atg_threshold_, _dart_atg_threshold_>(
            'atg_threshold_');
    return _atg_threshold_(
      arg0,
      self,
      threshold,
      value,
    );
  }

  _dart_atg_threshold_ _atg_threshold_;

  void atg_threshold_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> threshold,
  ) {
    _atg_threshold_backward ??= _dylib.lookupFunction<_c_atg_threshold_backward,
        _dart_atg_threshold_backward>('atg_threshold_backward');
    return _atg_threshold_backward(
      arg0,
      grad_output,
      self,
      threshold,
    );
  }

  _dart_atg_threshold_backward _atg_threshold_backward;

  void atg_threshold_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> threshold,
    ffi.Pointer<ffi.Void> value,
  ) {
    _atg_threshold_out ??=
        _dylib.lookupFunction<_c_atg_threshold_out, _dart_atg_threshold_out>(
            'atg_threshold_out');
    return _atg_threshold_out(
      arg0,
      out,
      self,
      threshold,
      value,
    );
  }

  _dart_atg_threshold_out _atg_threshold_out;

  void atg_to(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int device,
  ) {
    _atg_to ??= _dylib.lookupFunction<_c_atg_to, _dart_atg_to>('atg_to');
    return _atg_to(
      arg0,
      self,
      device,
    );
  }

  _dart_atg_to _atg_to;

  void atg_to1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int options_kind,
    int options_device,
    int non_blocking,
    int copy,
  ) {
    _atg_to1 ??= _dylib.lookupFunction<_c_atg_to1, _dart_atg_to1>('atg_to1');
    return _atg_to1(
      arg0,
      self,
      options_kind,
      options_device,
      non_blocking,
      copy,
    );
  }

  _dart_atg_to1 _atg_to1;

  void atg_to2(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dtype,
    int non_blocking,
    int copy,
  ) {
    _atg_to2 ??= _dylib.lookupFunction<_c_atg_to2, _dart_atg_to2>('atg_to2');
    return _atg_to2(
      arg0,
      self,
      dtype,
      non_blocking,
      copy,
    );
  }

  _dart_atg_to2 _atg_to2;

  void atg_to3(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
    int non_blocking,
    int copy,
  ) {
    _atg_to3 ??= _dylib.lookupFunction<_c_atg_to3, _dart_atg_to3>('atg_to3');
    return _atg_to3(
      arg0,
      self,
      other,
      non_blocking,
      copy,
    );
  }

  _dart_atg_to3 _atg_to3;

  void atg_to4(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int device,
    int dtype,
    int non_blocking,
    int copy,
  ) {
    _atg_to4 ??= _dylib.lookupFunction<_c_atg_to4, _dart_atg_to4>('atg_to4');
    return _atg_to4(
      arg0,
      self,
      device,
      dtype,
      non_blocking,
      copy,
    );
  }

  _dart_atg_to4 _atg_to4;

  void atg_to_dense(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_to_dense ??= _dylib
        .lookupFunction<_c_atg_to_dense, _dart_atg_to_dense>('atg_to_dense');
    return _atg_to_dense(
      arg0,
      self,
    );
  }

  _dart_atg_to_dense _atg_to_dense;

  void atg_to_dense_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad,
    ffi.Pointer<ffi.Void> input,
  ) {
    _atg_to_dense_backward ??= _dylib.lookupFunction<_c_atg_to_dense_backward,
        _dart_atg_to_dense_backward>('atg_to_dense_backward');
    return _atg_to_dense_backward(
      arg0,
      grad,
      input,
    );
  }

  _dart_atg_to_dense_backward _atg_to_dense_backward;

  void atg_to_mkldnn(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_to_mkldnn ??= _dylib
        .lookupFunction<_c_atg_to_mkldnn, _dart_atg_to_mkldnn>('atg_to_mkldnn');
    return _atg_to_mkldnn(
      arg0,
      self,
    );
  }

  _dart_atg_to_mkldnn _atg_to_mkldnn;

  void atg_to_mkldnn_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad,
    ffi.Pointer<ffi.Void> input,
  ) {
    _atg_to_mkldnn_backward ??= _dylib.lookupFunction<_c_atg_to_mkldnn_backward,
        _dart_atg_to_mkldnn_backward>('atg_to_mkldnn_backward');
    return _atg_to_mkldnn_backward(
      arg0,
      grad,
      input,
    );
  }

  _dart_atg_to_mkldnn_backward _atg_to_mkldnn_backward;

  void atg_to_sparse(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_to_sparse ??= _dylib
        .lookupFunction<_c_atg_to_sparse, _dart_atg_to_sparse>('atg_to_sparse');
    return _atg_to_sparse(
      arg0,
      self,
    );
  }

  _dart_atg_to_sparse _atg_to_sparse;

  void atg_to_sparse1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int sparse_dim,
  ) {
    _atg_to_sparse1 ??=
        _dylib.lookupFunction<_c_atg_to_sparse1, _dart_atg_to_sparse1>(
            'atg_to_sparse1');
    return _atg_to_sparse1(
      arg0,
      self,
      sparse_dim,
    );
  }

  _dart_atg_to_sparse1 _atg_to_sparse1;

  void atg_topk(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int k,
    int dim,
    int largest,
    int sorted,
  ) {
    _atg_topk ??=
        _dylib.lookupFunction<_c_atg_topk, _dart_atg_topk>('atg_topk');
    return _atg_topk(
      arg0,
      self,
      k,
      dim,
      largest,
      sorted,
    );
  }

  _dart_atg_topk _atg_topk;

  void atg_topk_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> values,
    ffi.Pointer<ffi.Void> indices,
    ffi.Pointer<ffi.Void> self,
    int k,
    int dim,
    int largest,
    int sorted,
  ) {
    _atg_topk_out ??= _dylib
        .lookupFunction<_c_atg_topk_out, _dart_atg_topk_out>('atg_topk_out');
    return _atg_topk_out(
      arg0,
      values,
      indices,
      self,
      k,
      dim,
      largest,
      sorted,
    );
  }

  _dart_atg_topk_out _atg_topk_out;

  void atg_totype(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int scalar_type,
  ) {
    _atg_totype ??=
        _dylib.lookupFunction<_c_atg_totype, _dart_atg_totype>('atg_totype');
    return _atg_totype(
      arg0,
      self,
      scalar_type,
    );
  }

  _dart_atg_totype _atg_totype;

  void atg_trace(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_trace ??=
        _dylib.lookupFunction<_c_atg_trace, _dart_atg_trace>('atg_trace');
    return _atg_trace(
      arg0,
      self,
    );
  }

  _dart_atg_trace _atg_trace;

  void atg_transpose(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim0,
    int dim1,
  ) {
    _atg_transpose ??= _dylib
        .lookupFunction<_c_atg_transpose, _dart_atg_transpose>('atg_transpose');
    return _atg_transpose(
      arg0,
      self,
      dim0,
      dim1,
    );
  }

  _dart_atg_transpose _atg_transpose;

  void atg_transpose_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim0,
    int dim1,
  ) {
    _atg_transpose_ ??=
        _dylib.lookupFunction<_c_atg_transpose_, _dart_atg_transpose_>(
            'atg_transpose_');
    return _atg_transpose_(
      arg0,
      self,
      dim0,
      dim1,
    );
  }

  _dart_atg_transpose_ _atg_transpose_;

  void atg_trapz(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> y,
    ffi.Pointer<ffi.Void> x,
    int dim,
  ) {
    _atg_trapz ??=
        _dylib.lookupFunction<_c_atg_trapz, _dart_atg_trapz>('atg_trapz');
    return _atg_trapz(
      arg0,
      y,
      x,
      dim,
    );
  }

  _dart_atg_trapz _atg_trapz;

  void atg_trapz1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> y,
    double dx,
    int dim,
  ) {
    _atg_trapz1 ??=
        _dylib.lookupFunction<_c_atg_trapz1, _dart_atg_trapz1>('atg_trapz1');
    return _atg_trapz1(
      arg0,
      y,
      dx,
      dim,
    );
  }

  _dart_atg_trapz1 _atg_trapz1;

  void atg_triangular_solve(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> A,
    int upper,
    int transpose,
    int unitriangular,
  ) {
    _atg_triangular_solve ??= _dylib.lookupFunction<_c_atg_triangular_solve,
        _dart_atg_triangular_solve>('atg_triangular_solve');
    return _atg_triangular_solve(
      arg0,
      self,
      A,
      upper,
      transpose,
      unitriangular,
    );
  }

  _dart_atg_triangular_solve _atg_triangular_solve;

  void atg_triangular_solve_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> X,
    ffi.Pointer<ffi.Void> M,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> A,
    int upper,
    int transpose,
    int unitriangular,
  ) {
    _atg_triangular_solve_out ??= _dylib.lookupFunction<
        _c_atg_triangular_solve_out,
        _dart_atg_triangular_solve_out>('atg_triangular_solve_out');
    return _atg_triangular_solve_out(
      arg0,
      X,
      M,
      self,
      A,
      upper,
      transpose,
      unitriangular,
    );
  }

  _dart_atg_triangular_solve_out _atg_triangular_solve_out;

  void atg_tril(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int diagonal,
  ) {
    _atg_tril ??=
        _dylib.lookupFunction<_c_atg_tril, _dart_atg_tril>('atg_tril');
    return _atg_tril(
      arg0,
      self,
      diagonal,
    );
  }

  _dart_atg_tril _atg_tril;

  void atg_tril_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int diagonal,
  ) {
    _atg_tril_ ??=
        _dylib.lookupFunction<_c_atg_tril_, _dart_atg_tril_>('atg_tril_');
    return _atg_tril_(
      arg0,
      self,
      diagonal,
    );
  }

  _dart_atg_tril_ _atg_tril_;

  void atg_tril_indices(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    int row,
    int col,
    int offset,
    int options_kind,
    int options_device,
  ) {
    _atg_tril_indices ??=
        _dylib.lookupFunction<_c_atg_tril_indices, _dart_atg_tril_indices>(
            'atg_tril_indices');
    return _atg_tril_indices(
      arg0,
      row,
      col,
      offset,
      options_kind,
      options_device,
    );
  }

  _dart_atg_tril_indices _atg_tril_indices;

  void atg_tril_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    int diagonal,
  ) {
    _atg_tril_out ??= _dylib
        .lookupFunction<_c_atg_tril_out, _dart_atg_tril_out>('atg_tril_out');
    return _atg_tril_out(
      arg0,
      out,
      self,
      diagonal,
    );
  }

  _dart_atg_tril_out _atg_tril_out;

  void atg_triplet_margin_loss(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> anchor,
    ffi.Pointer<ffi.Void> positive,
    ffi.Pointer<ffi.Void> negative,
    double margin,
    double p,
    double eps,
    int swap,
    int reduction,
  ) {
    _atg_triplet_margin_loss ??= _dylib.lookupFunction<
        _c_atg_triplet_margin_loss,
        _dart_atg_triplet_margin_loss>('atg_triplet_margin_loss');
    return _atg_triplet_margin_loss(
      arg0,
      anchor,
      positive,
      negative,
      margin,
      p,
      eps,
      swap,
      reduction,
    );
  }

  _dart_atg_triplet_margin_loss _atg_triplet_margin_loss;

  void atg_triu(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int diagonal,
  ) {
    _atg_triu ??=
        _dylib.lookupFunction<_c_atg_triu, _dart_atg_triu>('atg_triu');
    return _atg_triu(
      arg0,
      self,
      diagonal,
    );
  }

  _dart_atg_triu _atg_triu;

  void atg_triu_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int diagonal,
  ) {
    _atg_triu_ ??=
        _dylib.lookupFunction<_c_atg_triu_, _dart_atg_triu_>('atg_triu_');
    return _atg_triu_(
      arg0,
      self,
      diagonal,
    );
  }

  _dart_atg_triu_ _atg_triu_;

  void atg_triu_indices(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    int row,
    int col,
    int offset,
    int options_kind,
    int options_device,
  ) {
    _atg_triu_indices ??=
        _dylib.lookupFunction<_c_atg_triu_indices, _dart_atg_triu_indices>(
            'atg_triu_indices');
    return _atg_triu_indices(
      arg0,
      row,
      col,
      offset,
      options_kind,
      options_device,
    );
  }

  _dart_atg_triu_indices _atg_triu_indices;

  void atg_triu_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    int diagonal,
  ) {
    _atg_triu_out ??= _dylib
        .lookupFunction<_c_atg_triu_out, _dart_atg_triu_out>('atg_triu_out');
    return _atg_triu_out(
      arg0,
      out,
      self,
      diagonal,
    );
  }

  _dart_atg_triu_out _atg_triu_out;

  void atg_true_divide(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_true_divide ??=
        _dylib.lookupFunction<_c_atg_true_divide, _dart_atg_true_divide>(
            'atg_true_divide');
    return _atg_true_divide(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_true_divide _atg_true_divide;

  void atg_true_divide1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_true_divide1 ??=
        _dylib.lookupFunction<_c_atg_true_divide1, _dart_atg_true_divide1>(
            'atg_true_divide1');
    return _atg_true_divide1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_true_divide1 _atg_true_divide1;

  void atg_true_divide_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_true_divide_ ??=
        _dylib.lookupFunction<_c_atg_true_divide_, _dart_atg_true_divide_>(
            'atg_true_divide_');
    return _atg_true_divide_(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_true_divide_ _atg_true_divide_;

  void atg_true_divide_1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_true_divide_1 ??=
        _dylib.lookupFunction<_c_atg_true_divide_1, _dart_atg_true_divide_1>(
            'atg_true_divide_1');
    return _atg_true_divide_1(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_true_divide_1 _atg_true_divide_1;

  void atg_true_divide_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_true_divide_out ??= _dylib.lookupFunction<_c_atg_true_divide_out,
        _dart_atg_true_divide_out>('atg_true_divide_out');
    return _atg_true_divide_out(
      arg0,
      out,
      self,
      other,
    );
  }

  _dart_atg_true_divide_out _atg_true_divide_out;

  void atg_trunc(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_trunc ??=
        _dylib.lookupFunction<_c_atg_trunc, _dart_atg_trunc>('atg_trunc');
    return _atg_trunc(
      arg0,
      self,
    );
  }

  _dart_atg_trunc _atg_trunc;

  void atg_trunc_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_trunc_ ??=
        _dylib.lookupFunction<_c_atg_trunc_, _dart_atg_trunc_>('atg_trunc_');
    return _atg_trunc_(
      arg0,
      self,
    );
  }

  _dart_atg_trunc_ _atg_trunc_;

  void atg_trunc_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_trunc_out ??= _dylib
        .lookupFunction<_c_atg_trunc_out, _dart_atg_trunc_out>('atg_trunc_out');
    return _atg_trunc_out(
      arg0,
      out,
      self,
    );
  }

  _dart_atg_trunc_out _atg_trunc_out;

  void atg_type_as(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_type_as ??=
        _dylib.lookupFunction<_c_atg_type_as, _dart_atg_type_as>('atg_type_as');
    return _atg_type_as(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_type_as _atg_type_as;

  ffi.Pointer<ffi.Pointer<ffi.Void>> atg_unbind(
    ffi.Pointer<ffi.Void> self,
    int dim,
  ) {
    _atg_unbind ??=
        _dylib.lookupFunction<_c_atg_unbind, _dart_atg_unbind>('atg_unbind');
    return _atg_unbind(
      self,
      dim,
    );
  }

  _dart_atg_unbind _atg_unbind;

  void atg_unfold(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dimension,
    int size,
    int step,
  ) {
    _atg_unfold ??=
        _dylib.lookupFunction<_c_atg_unfold, _dart_atg_unfold>('atg_unfold');
    return _atg_unfold(
      arg0,
      self,
      dimension,
      size,
      step,
    );
  }

  _dart_atg_unfold _atg_unfold;

  void atg_unfold_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_in,
    ffi.Pointer<ffi.Int64> input_sizes_data,
    int input_sizes_len,
    int dim,
    int size,
    int step,
  ) {
    _atg_unfold_backward ??= _dylib.lookupFunction<_c_atg_unfold_backward,
        _dart_atg_unfold_backward>('atg_unfold_backward');
    return _atg_unfold_backward(
      arg0,
      grad_in,
      input_sizes_data,
      input_sizes_len,
      dim,
      size,
      step,
    );
  }

  _dart_atg_unfold_backward _atg_unfold_backward;

  void atg_uniform_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    double from,
    double to,
  ) {
    _atg_uniform_ ??= _dylib
        .lookupFunction<_c_atg_uniform_, _dart_atg_uniform_>('atg_uniform_');
    return _atg_uniform_(
      arg0,
      self,
      from,
      to,
    );
  }

  _dart_atg_uniform_ _atg_uniform_;

  void atg_unique_consecutive(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int return_inverse,
    int return_counts,
    int dim_v,
    int dim_null,
  ) {
    _atg_unique_consecutive ??= _dylib.lookupFunction<_c_atg_unique_consecutive,
        _dart_atg_unique_consecutive>('atg_unique_consecutive');
    return _atg_unique_consecutive(
      arg0,
      self,
      return_inverse,
      return_counts,
      dim_v,
      dim_null,
    );
  }

  _dart_atg_unique_consecutive _atg_unique_consecutive;

  void atg_unique_dim(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int sorted,
    int return_inverse,
    int return_counts,
  ) {
    _atg_unique_dim ??=
        _dylib.lookupFunction<_c_atg_unique_dim, _dart_atg_unique_dim>(
            'atg_unique_dim');
    return _atg_unique_dim(
      arg0,
      self,
      dim,
      sorted,
      return_inverse,
      return_counts,
    );
  }

  _dart_atg_unique_dim _atg_unique_dim;

  void atg_unique_dim_consecutive(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
    int return_inverse,
    int return_counts,
  ) {
    _atg_unique_dim_consecutive ??= _dylib.lookupFunction<
        _c_atg_unique_dim_consecutive,
        _dart_atg_unique_dim_consecutive>('atg_unique_dim_consecutive');
    return _atg_unique_dim_consecutive(
      arg0,
      self,
      dim,
      return_inverse,
      return_counts,
    );
  }

  _dart_atg_unique_dim_consecutive _atg_unique_dim_consecutive;

  void atg_unsqueeze(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
  ) {
    _atg_unsqueeze ??= _dylib
        .lookupFunction<_c_atg_unsqueeze, _dart_atg_unsqueeze>('atg_unsqueeze');
    return _atg_unsqueeze(
      arg0,
      self,
      dim,
    );
  }

  _dart_atg_unsqueeze _atg_unsqueeze;

  void atg_unsqueeze_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int dim,
  ) {
    _atg_unsqueeze_ ??=
        _dylib.lookupFunction<_c_atg_unsqueeze_, _dart_atg_unsqueeze_>(
            'atg_unsqueeze_');
    return _atg_unsqueeze_(
      arg0,
      self,
      dim,
    );
  }

  _dart_atg_unsqueeze_ _atg_unsqueeze_;

  void atg_upsample_bicubic2d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    int align_corners,
    double scales_h_v,
    int scales_h_null,
    double scales_w_v,
    int scales_w_null,
  ) {
    _atg_upsample_bicubic2d ??= _dylib.lookupFunction<_c_atg_upsample_bicubic2d,
        _dart_atg_upsample_bicubic2d>('atg_upsample_bicubic2d');
    return _atg_upsample_bicubic2d(
      arg0,
      self,
      output_size_data,
      output_size_len,
      align_corners,
      scales_h_v,
      scales_h_null,
      scales_w_v,
      scales_w_null,
    );
  }

  _dart_atg_upsample_bicubic2d _atg_upsample_bicubic2d;

  void atg_upsample_bicubic2d_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    ffi.Pointer<ffi.Int64> input_size_data,
    int input_size_len,
    int align_corners,
    double scales_h_v,
    int scales_h_null,
    double scales_w_v,
    int scales_w_null,
  ) {
    _atg_upsample_bicubic2d_backward ??= _dylib.lookupFunction<
            _c_atg_upsample_bicubic2d_backward,
            _dart_atg_upsample_bicubic2d_backward>(
        'atg_upsample_bicubic2d_backward');
    return _atg_upsample_bicubic2d_backward(
      arg0,
      grad_output,
      output_size_data,
      output_size_len,
      input_size_data,
      input_size_len,
      align_corners,
      scales_h_v,
      scales_h_null,
      scales_w_v,
      scales_w_null,
    );
  }

  _dart_atg_upsample_bicubic2d_backward _atg_upsample_bicubic2d_backward;

  void atg_upsample_bicubic2d_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    ffi.Pointer<ffi.Int64> input_size_data,
    int input_size_len,
    int align_corners,
    double scales_h_v,
    int scales_h_null,
    double scales_w_v,
    int scales_w_null,
  ) {
    _atg_upsample_bicubic2d_backward_out ??= _dylib.lookupFunction<
            _c_atg_upsample_bicubic2d_backward_out,
            _dart_atg_upsample_bicubic2d_backward_out>(
        'atg_upsample_bicubic2d_backward_out');
    return _atg_upsample_bicubic2d_backward_out(
      arg0,
      grad_input,
      grad_output,
      output_size_data,
      output_size_len,
      input_size_data,
      input_size_len,
      align_corners,
      scales_h_v,
      scales_h_null,
      scales_w_v,
      scales_w_null,
    );
  }

  _dart_atg_upsample_bicubic2d_backward_out
      _atg_upsample_bicubic2d_backward_out;

  void atg_upsample_bicubic2d_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    int align_corners,
    double scales_h_v,
    int scales_h_null,
    double scales_w_v,
    int scales_w_null,
  ) {
    _atg_upsample_bicubic2d_out ??= _dylib.lookupFunction<
        _c_atg_upsample_bicubic2d_out,
        _dart_atg_upsample_bicubic2d_out>('atg_upsample_bicubic2d_out');
    return _atg_upsample_bicubic2d_out(
      arg0,
      out,
      self,
      output_size_data,
      output_size_len,
      align_corners,
      scales_h_v,
      scales_h_null,
      scales_w_v,
      scales_w_null,
    );
  }

  _dart_atg_upsample_bicubic2d_out _atg_upsample_bicubic2d_out;

  void atg_upsample_bilinear2d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    int align_corners,
    double scales_h_v,
    int scales_h_null,
    double scales_w_v,
    int scales_w_null,
  ) {
    _atg_upsample_bilinear2d ??= _dylib.lookupFunction<
        _c_atg_upsample_bilinear2d,
        _dart_atg_upsample_bilinear2d>('atg_upsample_bilinear2d');
    return _atg_upsample_bilinear2d(
      arg0,
      self,
      output_size_data,
      output_size_len,
      align_corners,
      scales_h_v,
      scales_h_null,
      scales_w_v,
      scales_w_null,
    );
  }

  _dart_atg_upsample_bilinear2d _atg_upsample_bilinear2d;

  void atg_upsample_bilinear2d_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    ffi.Pointer<ffi.Int64> input_size_data,
    int input_size_len,
    int align_corners,
    double scales_h_v,
    int scales_h_null,
    double scales_w_v,
    int scales_w_null,
  ) {
    _atg_upsample_bilinear2d_backward ??= _dylib.lookupFunction<
            _c_atg_upsample_bilinear2d_backward,
            _dart_atg_upsample_bilinear2d_backward>(
        'atg_upsample_bilinear2d_backward');
    return _atg_upsample_bilinear2d_backward(
      arg0,
      grad_output,
      output_size_data,
      output_size_len,
      input_size_data,
      input_size_len,
      align_corners,
      scales_h_v,
      scales_h_null,
      scales_w_v,
      scales_w_null,
    );
  }

  _dart_atg_upsample_bilinear2d_backward _atg_upsample_bilinear2d_backward;

  void atg_upsample_bilinear2d_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    ffi.Pointer<ffi.Int64> input_size_data,
    int input_size_len,
    int align_corners,
    double scales_h_v,
    int scales_h_null,
    double scales_w_v,
    int scales_w_null,
  ) {
    _atg_upsample_bilinear2d_backward_out ??= _dylib.lookupFunction<
            _c_atg_upsample_bilinear2d_backward_out,
            _dart_atg_upsample_bilinear2d_backward_out>(
        'atg_upsample_bilinear2d_backward_out');
    return _atg_upsample_bilinear2d_backward_out(
      arg0,
      grad_input,
      grad_output,
      output_size_data,
      output_size_len,
      input_size_data,
      input_size_len,
      align_corners,
      scales_h_v,
      scales_h_null,
      scales_w_v,
      scales_w_null,
    );
  }

  _dart_atg_upsample_bilinear2d_backward_out
      _atg_upsample_bilinear2d_backward_out;

  void atg_upsample_bilinear2d_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    int align_corners,
    double scales_h_v,
    int scales_h_null,
    double scales_w_v,
    int scales_w_null,
  ) {
    _atg_upsample_bilinear2d_out ??= _dylib.lookupFunction<
        _c_atg_upsample_bilinear2d_out,
        _dart_atg_upsample_bilinear2d_out>('atg_upsample_bilinear2d_out');
    return _atg_upsample_bilinear2d_out(
      arg0,
      out,
      self,
      output_size_data,
      output_size_len,
      align_corners,
      scales_h_v,
      scales_h_null,
      scales_w_v,
      scales_w_null,
    );
  }

  _dart_atg_upsample_bilinear2d_out _atg_upsample_bilinear2d_out;

  void atg_upsample_linear1d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    int align_corners,
    double scales_v,
    int scales_null,
  ) {
    _atg_upsample_linear1d ??= _dylib.lookupFunction<_c_atg_upsample_linear1d,
        _dart_atg_upsample_linear1d>('atg_upsample_linear1d');
    return _atg_upsample_linear1d(
      arg0,
      self,
      output_size_data,
      output_size_len,
      align_corners,
      scales_v,
      scales_null,
    );
  }

  _dart_atg_upsample_linear1d _atg_upsample_linear1d;

  void atg_upsample_linear1d_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    ffi.Pointer<ffi.Int64> input_size_data,
    int input_size_len,
    int align_corners,
    double scales_v,
    int scales_null,
  ) {
    _atg_upsample_linear1d_backward ??= _dylib.lookupFunction<
        _c_atg_upsample_linear1d_backward,
        _dart_atg_upsample_linear1d_backward>('atg_upsample_linear1d_backward');
    return _atg_upsample_linear1d_backward(
      arg0,
      grad_output,
      output_size_data,
      output_size_len,
      input_size_data,
      input_size_len,
      align_corners,
      scales_v,
      scales_null,
    );
  }

  _dart_atg_upsample_linear1d_backward _atg_upsample_linear1d_backward;

  void atg_upsample_linear1d_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    ffi.Pointer<ffi.Int64> input_size_data,
    int input_size_len,
    int align_corners,
    double scales_v,
    int scales_null,
  ) {
    _atg_upsample_linear1d_backward_out ??= _dylib.lookupFunction<
            _c_atg_upsample_linear1d_backward_out,
            _dart_atg_upsample_linear1d_backward_out>(
        'atg_upsample_linear1d_backward_out');
    return _atg_upsample_linear1d_backward_out(
      arg0,
      grad_input,
      grad_output,
      output_size_data,
      output_size_len,
      input_size_data,
      input_size_len,
      align_corners,
      scales_v,
      scales_null,
    );
  }

  _dart_atg_upsample_linear1d_backward_out _atg_upsample_linear1d_backward_out;

  void atg_upsample_linear1d_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    int align_corners,
    double scales_v,
    int scales_null,
  ) {
    _atg_upsample_linear1d_out ??= _dylib.lookupFunction<
        _c_atg_upsample_linear1d_out,
        _dart_atg_upsample_linear1d_out>('atg_upsample_linear1d_out');
    return _atg_upsample_linear1d_out(
      arg0,
      out,
      self,
      output_size_data,
      output_size_len,
      align_corners,
      scales_v,
      scales_null,
    );
  }

  _dart_atg_upsample_linear1d_out _atg_upsample_linear1d_out;

  void atg_upsample_nearest1d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    double scales_v,
    int scales_null,
  ) {
    _atg_upsample_nearest1d ??= _dylib.lookupFunction<_c_atg_upsample_nearest1d,
        _dart_atg_upsample_nearest1d>('atg_upsample_nearest1d');
    return _atg_upsample_nearest1d(
      arg0,
      self,
      output_size_data,
      output_size_len,
      scales_v,
      scales_null,
    );
  }

  _dart_atg_upsample_nearest1d _atg_upsample_nearest1d;

  void atg_upsample_nearest1d_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    ffi.Pointer<ffi.Int64> input_size_data,
    int input_size_len,
    double scales_v,
    int scales_null,
  ) {
    _atg_upsample_nearest1d_backward ??= _dylib.lookupFunction<
            _c_atg_upsample_nearest1d_backward,
            _dart_atg_upsample_nearest1d_backward>(
        'atg_upsample_nearest1d_backward');
    return _atg_upsample_nearest1d_backward(
      arg0,
      grad_output,
      output_size_data,
      output_size_len,
      input_size_data,
      input_size_len,
      scales_v,
      scales_null,
    );
  }

  _dart_atg_upsample_nearest1d_backward _atg_upsample_nearest1d_backward;

  void atg_upsample_nearest1d_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    ffi.Pointer<ffi.Int64> input_size_data,
    int input_size_len,
    double scales_v,
    int scales_null,
  ) {
    _atg_upsample_nearest1d_backward_out ??= _dylib.lookupFunction<
            _c_atg_upsample_nearest1d_backward_out,
            _dart_atg_upsample_nearest1d_backward_out>(
        'atg_upsample_nearest1d_backward_out');
    return _atg_upsample_nearest1d_backward_out(
      arg0,
      grad_input,
      grad_output,
      output_size_data,
      output_size_len,
      input_size_data,
      input_size_len,
      scales_v,
      scales_null,
    );
  }

  _dart_atg_upsample_nearest1d_backward_out
      _atg_upsample_nearest1d_backward_out;

  void atg_upsample_nearest1d_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    double scales_v,
    int scales_null,
  ) {
    _atg_upsample_nearest1d_out ??= _dylib.lookupFunction<
        _c_atg_upsample_nearest1d_out,
        _dart_atg_upsample_nearest1d_out>('atg_upsample_nearest1d_out');
    return _atg_upsample_nearest1d_out(
      arg0,
      out,
      self,
      output_size_data,
      output_size_len,
      scales_v,
      scales_null,
    );
  }

  _dart_atg_upsample_nearest1d_out _atg_upsample_nearest1d_out;

  void atg_upsample_nearest2d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    double scales_h_v,
    int scales_h_null,
    double scales_w_v,
    int scales_w_null,
  ) {
    _atg_upsample_nearest2d ??= _dylib.lookupFunction<_c_atg_upsample_nearest2d,
        _dart_atg_upsample_nearest2d>('atg_upsample_nearest2d');
    return _atg_upsample_nearest2d(
      arg0,
      self,
      output_size_data,
      output_size_len,
      scales_h_v,
      scales_h_null,
      scales_w_v,
      scales_w_null,
    );
  }

  _dart_atg_upsample_nearest2d _atg_upsample_nearest2d;

  void atg_upsample_nearest2d_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    ffi.Pointer<ffi.Int64> input_size_data,
    int input_size_len,
    double scales_h_v,
    int scales_h_null,
    double scales_w_v,
    int scales_w_null,
  ) {
    _atg_upsample_nearest2d_backward ??= _dylib.lookupFunction<
            _c_atg_upsample_nearest2d_backward,
            _dart_atg_upsample_nearest2d_backward>(
        'atg_upsample_nearest2d_backward');
    return _atg_upsample_nearest2d_backward(
      arg0,
      grad_output,
      output_size_data,
      output_size_len,
      input_size_data,
      input_size_len,
      scales_h_v,
      scales_h_null,
      scales_w_v,
      scales_w_null,
    );
  }

  _dart_atg_upsample_nearest2d_backward _atg_upsample_nearest2d_backward;

  void atg_upsample_nearest2d_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    ffi.Pointer<ffi.Int64> input_size_data,
    int input_size_len,
    double scales_h_v,
    int scales_h_null,
    double scales_w_v,
    int scales_w_null,
  ) {
    _atg_upsample_nearest2d_backward_out ??= _dylib.lookupFunction<
            _c_atg_upsample_nearest2d_backward_out,
            _dart_atg_upsample_nearest2d_backward_out>(
        'atg_upsample_nearest2d_backward_out');
    return _atg_upsample_nearest2d_backward_out(
      arg0,
      grad_input,
      grad_output,
      output_size_data,
      output_size_len,
      input_size_data,
      input_size_len,
      scales_h_v,
      scales_h_null,
      scales_w_v,
      scales_w_null,
    );
  }

  _dart_atg_upsample_nearest2d_backward_out
      _atg_upsample_nearest2d_backward_out;

  void atg_upsample_nearest2d_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    double scales_h_v,
    int scales_h_null,
    double scales_w_v,
    int scales_w_null,
  ) {
    _atg_upsample_nearest2d_out ??= _dylib.lookupFunction<
        _c_atg_upsample_nearest2d_out,
        _dart_atg_upsample_nearest2d_out>('atg_upsample_nearest2d_out');
    return _atg_upsample_nearest2d_out(
      arg0,
      out,
      self,
      output_size_data,
      output_size_len,
      scales_h_v,
      scales_h_null,
      scales_w_v,
      scales_w_null,
    );
  }

  _dart_atg_upsample_nearest2d_out _atg_upsample_nearest2d_out;

  void atg_upsample_nearest3d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    double scales_d_v,
    int scales_d_null,
    double scales_h_v,
    int scales_h_null,
    double scales_w_v,
    int scales_w_null,
  ) {
    _atg_upsample_nearest3d ??= _dylib.lookupFunction<_c_atg_upsample_nearest3d,
        _dart_atg_upsample_nearest3d>('atg_upsample_nearest3d');
    return _atg_upsample_nearest3d(
      arg0,
      self,
      output_size_data,
      output_size_len,
      scales_d_v,
      scales_d_null,
      scales_h_v,
      scales_h_null,
      scales_w_v,
      scales_w_null,
    );
  }

  _dart_atg_upsample_nearest3d _atg_upsample_nearest3d;

  void atg_upsample_nearest3d_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    ffi.Pointer<ffi.Int64> input_size_data,
    int input_size_len,
    double scales_d_v,
    int scales_d_null,
    double scales_h_v,
    int scales_h_null,
    double scales_w_v,
    int scales_w_null,
  ) {
    _atg_upsample_nearest3d_backward ??= _dylib.lookupFunction<
            _c_atg_upsample_nearest3d_backward,
            _dart_atg_upsample_nearest3d_backward>(
        'atg_upsample_nearest3d_backward');
    return _atg_upsample_nearest3d_backward(
      arg0,
      grad_output,
      output_size_data,
      output_size_len,
      input_size_data,
      input_size_len,
      scales_d_v,
      scales_d_null,
      scales_h_v,
      scales_h_null,
      scales_w_v,
      scales_w_null,
    );
  }

  _dart_atg_upsample_nearest3d_backward _atg_upsample_nearest3d_backward;

  void atg_upsample_nearest3d_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    ffi.Pointer<ffi.Int64> input_size_data,
    int input_size_len,
    double scales_d_v,
    int scales_d_null,
    double scales_h_v,
    int scales_h_null,
    double scales_w_v,
    int scales_w_null,
  ) {
    _atg_upsample_nearest3d_backward_out ??= _dylib.lookupFunction<
            _c_atg_upsample_nearest3d_backward_out,
            _dart_atg_upsample_nearest3d_backward_out>(
        'atg_upsample_nearest3d_backward_out');
    return _atg_upsample_nearest3d_backward_out(
      arg0,
      grad_input,
      grad_output,
      output_size_data,
      output_size_len,
      input_size_data,
      input_size_len,
      scales_d_v,
      scales_d_null,
      scales_h_v,
      scales_h_null,
      scales_w_v,
      scales_w_null,
    );
  }

  _dart_atg_upsample_nearest3d_backward_out
      _atg_upsample_nearest3d_backward_out;

  void atg_upsample_nearest3d_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    double scales_d_v,
    int scales_d_null,
    double scales_h_v,
    int scales_h_null,
    double scales_w_v,
    int scales_w_null,
  ) {
    _atg_upsample_nearest3d_out ??= _dylib.lookupFunction<
        _c_atg_upsample_nearest3d_out,
        _dart_atg_upsample_nearest3d_out>('atg_upsample_nearest3d_out');
    return _atg_upsample_nearest3d_out(
      arg0,
      out,
      self,
      output_size_data,
      output_size_len,
      scales_d_v,
      scales_d_null,
      scales_h_v,
      scales_h_null,
      scales_w_v,
      scales_w_null,
    );
  }

  _dart_atg_upsample_nearest3d_out _atg_upsample_nearest3d_out;

  void atg_upsample_trilinear3d(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    int align_corners,
    double scales_d_v,
    int scales_d_null,
    double scales_h_v,
    int scales_h_null,
    double scales_w_v,
    int scales_w_null,
  ) {
    _atg_upsample_trilinear3d ??= _dylib.lookupFunction<
        _c_atg_upsample_trilinear3d,
        _dart_atg_upsample_trilinear3d>('atg_upsample_trilinear3d');
    return _atg_upsample_trilinear3d(
      arg0,
      self,
      output_size_data,
      output_size_len,
      align_corners,
      scales_d_v,
      scales_d_null,
      scales_h_v,
      scales_h_null,
      scales_w_v,
      scales_w_null,
    );
  }

  _dart_atg_upsample_trilinear3d _atg_upsample_trilinear3d;

  void atg_upsample_trilinear3d_backward(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    ffi.Pointer<ffi.Int64> input_size_data,
    int input_size_len,
    int align_corners,
    double scales_d_v,
    int scales_d_null,
    double scales_h_v,
    int scales_h_null,
    double scales_w_v,
    int scales_w_null,
  ) {
    _atg_upsample_trilinear3d_backward ??= _dylib.lookupFunction<
            _c_atg_upsample_trilinear3d_backward,
            _dart_atg_upsample_trilinear3d_backward>(
        'atg_upsample_trilinear3d_backward');
    return _atg_upsample_trilinear3d_backward(
      arg0,
      grad_output,
      output_size_data,
      output_size_len,
      input_size_data,
      input_size_len,
      align_corners,
      scales_d_v,
      scales_d_null,
      scales_h_v,
      scales_h_null,
      scales_w_v,
      scales_w_null,
    );
  }

  _dart_atg_upsample_trilinear3d_backward _atg_upsample_trilinear3d_backward;

  void atg_upsample_trilinear3d_backward_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> grad_input,
    ffi.Pointer<ffi.Void> grad_output,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    ffi.Pointer<ffi.Int64> input_size_data,
    int input_size_len,
    int align_corners,
    double scales_d_v,
    int scales_d_null,
    double scales_h_v,
    int scales_h_null,
    double scales_w_v,
    int scales_w_null,
  ) {
    _atg_upsample_trilinear3d_backward_out ??= _dylib.lookupFunction<
            _c_atg_upsample_trilinear3d_backward_out,
            _dart_atg_upsample_trilinear3d_backward_out>(
        'atg_upsample_trilinear3d_backward_out');
    return _atg_upsample_trilinear3d_backward_out(
      arg0,
      grad_input,
      grad_output,
      output_size_data,
      output_size_len,
      input_size_data,
      input_size_len,
      align_corners,
      scales_d_v,
      scales_d_null,
      scales_h_v,
      scales_h_null,
      scales_w_v,
      scales_w_null,
    );
  }

  _dart_atg_upsample_trilinear3d_backward_out
      _atg_upsample_trilinear3d_backward_out;

  void atg_upsample_trilinear3d_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> output_size_data,
    int output_size_len,
    int align_corners,
    double scales_d_v,
    int scales_d_null,
    double scales_h_v,
    int scales_h_null,
    double scales_w_v,
    int scales_w_null,
  ) {
    _atg_upsample_trilinear3d_out ??= _dylib.lookupFunction<
        _c_atg_upsample_trilinear3d_out,
        _dart_atg_upsample_trilinear3d_out>('atg_upsample_trilinear3d_out');
    return _atg_upsample_trilinear3d_out(
      arg0,
      out,
      self,
      output_size_data,
      output_size_len,
      align_corners,
      scales_d_v,
      scales_d_null,
      scales_h_v,
      scales_h_null,
      scales_w_v,
      scales_w_null,
    );
  }

  _dart_atg_upsample_trilinear3d_out _atg_upsample_trilinear3d_out;

  void atg_values(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_values ??=
        _dylib.lookupFunction<_c_atg_values, _dart_atg_values>('atg_values');
    return _atg_values(
      arg0,
      self,
    );
  }

  _dart_atg_values _atg_values;

  void atg_vander(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> x,
    int n_v,
    int n_null,
    int increasing,
  ) {
    _atg_vander ??=
        _dylib.lookupFunction<_c_atg_vander, _dart_atg_vander>('atg_vander');
    return _atg_vander(
      arg0,
      x,
      n_v,
      n_null,
      increasing,
    );
  }

  _dart_atg_vander _atg_vander;

  void atg_var(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int unbiased,
  ) {
    _atg_var ??= _dylib.lookupFunction<_c_atg_var, _dart_atg_var>('atg_var');
    return _atg_var(
      arg0,
      self,
      unbiased,
    );
  }

  _dart_atg_var _atg_var;

  void atg_var1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> dim_data,
    int dim_len,
    int unbiased,
    int keepdim,
  ) {
    _atg_var1 ??=
        _dylib.lookupFunction<_c_atg_var1, _dart_atg_var1>('atg_var1');
    return _atg_var1(
      arg0,
      self,
      dim_data,
      dim_len,
      unbiased,
      keepdim,
    );
  }

  _dart_atg_var1 _atg_var1;

  void atg_var_mean(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    int unbiased,
  ) {
    _atg_var_mean ??= _dylib
        .lookupFunction<_c_atg_var_mean, _dart_atg_var_mean>('atg_var_mean');
    return _atg_var_mean(
      arg0,
      self,
      unbiased,
    );
  }

  _dart_atg_var_mean _atg_var_mean;

  void atg_var_mean1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> dim_data,
    int dim_len,
    int unbiased,
    int keepdim,
  ) {
    _atg_var_mean1 ??= _dylib
        .lookupFunction<_c_atg_var_mean1, _dart_atg_var_mean1>('atg_var_mean1');
    return _atg_var_mean1(
      arg0,
      self,
      dim_data,
      dim_len,
      unbiased,
      keepdim,
    );
  }

  _dart_atg_var_mean1 _atg_var_mean1;

  void atg_var_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> dim_data,
    int dim_len,
    int unbiased,
    int keepdim,
  ) {
    _atg_var_out ??=
        _dylib.lookupFunction<_c_atg_var_out, _dart_atg_var_out>('atg_var_out');
    return _atg_var_out(
      arg0,
      out,
      self,
      dim_data,
      dim_len,
      unbiased,
      keepdim,
    );
  }

  _dart_atg_var_out _atg_var_out;

  void atg_view(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
  ) {
    _atg_view ??=
        _dylib.lookupFunction<_c_atg_view, _dart_atg_view>('atg_view');
    return _atg_view(
      arg0,
      self,
      size_data,
      size_len,
    );
  }

  _dart_atg_view _atg_view;

  void atg_view_as(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_view_as ??=
        _dylib.lookupFunction<_c_atg_view_as, _dart_atg_view_as>('atg_view_as');
    return _atg_view_as(
      arg0,
      self,
      other,
    );
  }

  _dart_atg_view_as _atg_view_as;

  void atg_view_as_complex(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_view_as_complex ??= _dylib.lookupFunction<_c_atg_view_as_complex,
        _dart_atg_view_as_complex>('atg_view_as_complex');
    return _atg_view_as_complex(
      arg0,
      self,
    );
  }

  _dart_atg_view_as_complex _atg_view_as_complex;

  void atg_view_as_real(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_view_as_real ??=
        _dylib.lookupFunction<_c_atg_view_as_real, _dart_atg_view_as_real>(
            'atg_view_as_real');
    return _atg_view_as_real(
      arg0,
      self,
    );
  }

  _dart_atg_view_as_real _atg_view_as_real;

  ffi.Pointer<ffi.Pointer<ffi.Void>> atg_where(
    ffi.Pointer<ffi.Void> condition,
  ) {
    _atg_where ??=
        _dylib.lookupFunction<_c_atg_where, _dart_atg_where>('atg_where');
    return _atg_where(
      condition,
    );
  }

  _dart_atg_where _atg_where;

  void atg_where1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> condition,
    ffi.Pointer<ffi.Void> self,
    ffi.Pointer<ffi.Void> other,
  ) {
    _atg_where1 ??=
        _dylib.lookupFunction<_c_atg_where1, _dart_atg_where1>('atg_where1');
    return _atg_where1(
      arg0,
      condition,
      self,
      other,
    );
  }

  _dart_atg_where1 _atg_where1;

  void atg_zero_(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_zero_ ??=
        _dylib.lookupFunction<_c_atg_zero_, _dart_atg_zero_>('atg_zero_');
    return _atg_zero_(
      arg0,
      self,
    );
  }

  _dart_atg_zero_ _atg_zero_;

  void atg_zeros(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
    int options_kind,
    int options_device,
  ) {
    _atg_zeros ??=
        _dylib.lookupFunction<_c_atg_zeros, _dart_atg_zeros>('atg_zeros');
    return _atg_zeros(
      arg0,
      size_data,
      size_len,
      options_kind,
      options_device,
    );
  }

  _dart_atg_zeros _atg_zeros;

  void atg_zeros_like(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> self,
  ) {
    _atg_zeros_like ??=
        _dylib.lookupFunction<_c_atg_zeros_like, _dart_atg_zeros_like>(
            'atg_zeros_like');
    return _atg_zeros_like(
      arg0,
      self,
    );
  }

  _dart_atg_zeros_like _atg_zeros_like;

  void atg_zeros_out(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<ffi.Int64> size_data,
    int size_len,
  ) {
    _atg_zeros_out ??= _dylib
        .lookupFunction<_c_atg_zeros_out, _dart_atg_zeros_out>('atg_zeros_out');
    return _atg_zeros_out(
      arg0,
      out,
      size_data,
      size_len,
    );
  }

  _dart_atg_zeros_out _atg_zeros_out;
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<_typedefC_1>> __routine;

  ffi.Pointer<ffi.Void> __arg;

  ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Struct {}

class _opaque_pthread_cond_t extends ffi.Struct {}

class _opaque_pthread_condattr_t extends ffi.Struct {}

class _opaque_pthread_mutex_t extends ffi.Struct {}

class _opaque_pthread_mutexattr_t extends ffi.Struct {}

class _opaque_pthread_once_t extends ffi.Struct {}

class _opaque_pthread_rwlock_t extends ffi.Struct {}

class _opaque_pthread_rwlockattr_t extends ffi.Struct {}

class _opaque_pthread_t extends ffi.Struct {}

const int __WORDSIZE = 64;

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_64_BIT_INO_T = '\$INODE64';

const String __DARWIN_SUF_1050 = '\$1050';

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int USER_ADDR_NULL = 0;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

typedef _c_get_and_reset_last_err = ffi.Pointer<ffi.Int8> Function();

typedef _dart_get_and_reset_last_err = ffi.Pointer<ffi.Int8> Function();

typedef _c_at_manual_seed = ffi.Void Function(
  ffi.Int64 arg0,
);

typedef _dart_at_manual_seed = void Function(
  int arg0,
);

typedef _c_at_new_tensor = ffi.Pointer<ffi.Void> Function();

typedef _dart_at_new_tensor = ffi.Pointer<ffi.Void> Function();

typedef _c_at_tensor_of_data = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> vs,
  ffi.Pointer<ffi.Int64> dims,
  ffi.Int32 ndims,
  ffi.Int32 element_size_in_bytes,
  ffi.Int32 type,
);

typedef _dart_at_tensor_of_data = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> vs,
  ffi.Pointer<ffi.Int64> dims,
  int ndims,
  int element_size_in_bytes,
  int type,
);

typedef _c_at_copy_data = ffi.Void Function(
  ffi.Pointer<ffi.Void> tensor,
  ffi.Pointer<ffi.Void> vs,
  ffi.Int32 numel,
  ffi.Int32 element_size_in_bytes,
);

typedef _dart_at_copy_data = void Function(
  ffi.Pointer<ffi.Void> tensor,
  ffi.Pointer<ffi.Void> vs,
  int numel,
  int element_size_in_bytes,
);

typedef _c_at_shallow_clone = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_at_shallow_clone = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_at_data_ptr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_at_data_ptr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_at_defined = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_at_defined = int Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_at_is_sparse = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_at_is_sparse = int Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_at_device = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_at_device = int Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_at_dim = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_at_dim = int Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_at_shape = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _dart_at_shape = void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _c_at_stride = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _dart_at_stride = void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _c_at_scalar_type = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_at_scalar_type = int Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_at_autocast_clear_cache = ffi.Void Function();

typedef _dart_at_autocast_clear_cache = void Function();

typedef _c_at_autocast_decrement_nesting = ffi.Int32 Function();

typedef _dart_at_autocast_decrement_nesting = int Function();

typedef _c_at_autocast_increment_nesting = ffi.Int32 Function();

typedef _dart_at_autocast_increment_nesting = int Function();

typedef _c_at_autocast_is_enabled = ffi.Int32 Function();

typedef _dart_at_autocast_is_enabled = int Function();

typedef _c_at_autocast_set_enabled = ffi.Int32 Function(
  ffi.Int32 b,
);

typedef _dart_at_autocast_set_enabled = int Function(
  int b,
);

typedef _c_at_backward = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
);

typedef _dart_at_backward = void Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
  int arg2,
);

typedef _c_at_requires_grad = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_at_requires_grad = int Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_at_grad_set_enabled = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_at_grad_set_enabled = int Function(
  int arg0,
);

typedef _c_at_get = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Int32 index,
);

typedef _dart_at_get = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
  int index,
);

typedef _c_at_fill_double = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Double arg1,
);

typedef _dart_at_fill_double = void Function(
  ffi.Pointer<ffi.Void> arg0,
  double arg1,
);

typedef _c_at_fill_int64 = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Int64 arg1,
);

typedef _dart_at_fill_int64 = void Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
);

typedef _c_at_double_value_at_indexes = ffi.Double Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Int64> indexes,
  ffi.Int32 indexes_len,
);

typedef _dart_at_double_value_at_indexes = double Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Int64> indexes,
  int indexes_len,
);

typedef _c_at_int64_value_at_indexes = ffi.Int64 Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Int64> indexes,
  ffi.Int32 indexes_len,
);

typedef _dart_at_int64_value_at_indexes = int Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Int64> indexes,
  int indexes_len,
);

typedef _c_at_set_double_value_at_indexes = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Int32> indexes,
  ffi.Int32 indexes_len,
  ffi.Double v,
);

typedef _dart_at_set_double_value_at_indexes = void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Int32> indexes,
  int indexes_len,
  double v,
);

typedef _c_at_set_int64_value_at_indexes = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Int32> indexes,
  ffi.Int32 indexes_len,
  ffi.Int64 v,
);

typedef _dart_at_set_int64_value_at_indexes = void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Int32> indexes,
  int indexes_len,
  int v,
);

typedef _c_at_copy_ = ffi.Void Function(
  ffi.Pointer<ffi.Void> dst,
  ffi.Pointer<ffi.Void> src,
);

typedef _dart_at_copy_ = void Function(
  ffi.Pointer<ffi.Void> dst,
  ffi.Pointer<ffi.Void> src,
);

typedef _c_at_print = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_at_print = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_at_to_string = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Int32 line_size,
);

typedef _dart_at_to_string = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void> arg0,
  int line_size,
);

typedef _c_at_save = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Int8> filename,
);

typedef _dart_at_save = void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Int8> filename,
);

typedef _c_at_load = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> filename,
);

typedef _dart_at_load = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> filename,
);

typedef _c_at_load_image = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> filename,
);

typedef _dart_at_load_image = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> filename,
);

typedef _c_at_save_image = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Int8> filename,
);

typedef _dart_at_save_image = int Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Int8> filename,
);

typedef _c_at_resize_image = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Int32 w,
  ffi.Int32 h,
);

typedef _dart_at_resize_image = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
  int w,
  int h,
);

typedef _c_at_save_multi = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> tensor_names,
  ffi.Int32 ntensors,
  ffi.Pointer<ffi.Int8> filename,
);

typedef _dart_at_save_multi = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> tensor_names,
  int ntensors,
  ffi.Pointer<ffi.Int8> filename,
);

typedef _c_at_load_multi = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> tensor_names,
  ffi.Int32 ntensors,
  ffi.Pointer<ffi.Int8> filename,
);

typedef _dart_at_load_multi = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> tensor_names,
  int ntensors,
  ffi.Pointer<ffi.Int8> filename,
);

typedef _c_at_load_multi_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> tensor_names,
  ffi.Int32 ntensors,
  ffi.Pointer<ffi.Int8> filename,
);

typedef _dart_at_load_multi_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> tensor_names,
  int ntensors,
  ffi.Pointer<ffi.Int8> filename,
);

typedef _typedefC_2 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_at_load_callback = ffi.Void Function(
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.NativeFunction<_typedefC_2>> f,
);

typedef _dart_at_load_callback = void Function(
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.NativeFunction<_typedefC_2>> f,
);

typedef _typedefC_3 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_at_load_callback_with_device = ffi.Void Function(
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.NativeFunction<_typedefC_3>> f,
  ffi.Int32 device_id,
);

typedef _dart_at_load_callback_with_device = void Function(
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.NativeFunction<_typedefC_3>> f,
  int device_id,
);

typedef _c_at_get_num_interop_threads = ffi.Int32 Function();

typedef _dart_at_get_num_interop_threads = int Function();

typedef _c_at_get_num_threads = ffi.Int32 Function();

typedef _dart_at_get_num_threads = int Function();

typedef _c_at_set_num_interop_threads = ffi.Void Function(
  ffi.Int32 n_threads,
);

typedef _dart_at_set_num_interop_threads = void Function(
  int n_threads,
);

typedef _c_at_set_num_threads = ffi.Void Function(
  ffi.Int32 n_threads,
);

typedef _dart_at_set_num_threads = void Function(
  int n_threads,
);

typedef _c_at_free = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_at_free = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_at_run_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors,
  ffi.Int32 ntensors,
  ffi.Pointer<ffi.Pointer<ffi.Void>> inputs,
  ffi.Int32 ninputs,
  ffi.Pointer<ffi.Pointer<ffi.Void>> outputs,
  ffi.Int32 keep_graph,
  ffi.Int32 create_graph,
);

typedef _dart_at_run_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors,
  int ntensors,
  ffi.Pointer<ffi.Pointer<ffi.Void>> inputs,
  int ninputs,
  ffi.Pointer<ffi.Pointer<ffi.Void>> outputs,
  int keep_graph,
  int create_graph,
);

typedef _c_ato_adam = ffi.Pointer<ffi.Void> Function(
  ffi.Double learning_rate,
  ffi.Double beta1,
  ffi.Double beta2,
  ffi.Double weight_decay,
);

typedef _dart_ato_adam = ffi.Pointer<ffi.Void> Function(
  double learning_rate,
  double beta1,
  double beta2,
  double weight_decay,
);

typedef _c_ato_rms_prop = ffi.Pointer<ffi.Void> Function(
  ffi.Double learning_rate,
  ffi.Double alpha,
  ffi.Double eps,
  ffi.Double weight_decay,
  ffi.Double momentum,
  ffi.Int32 centered,
);

typedef _dart_ato_rms_prop = ffi.Pointer<ffi.Void> Function(
  double learning_rate,
  double alpha,
  double eps,
  double weight_decay,
  double momentum,
  int centered,
);

typedef _c_ato_sgd = ffi.Pointer<ffi.Void> Function(
  ffi.Double learning_rate,
  ffi.Double momentum,
  ffi.Double dampening,
  ffi.Double weight_decay,
  ffi.Int32 nesterov,
);

typedef _dart_ato_sgd = ffi.Pointer<ffi.Void> Function(
  double learning_rate,
  double momentum,
  double dampening,
  double weight_decay,
  int nesterov,
);

typedef _c_ato_add_parameters = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
  ffi.Int32 ntensors,
);

typedef _dart_ato_add_parameters = void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
  int ntensors,
);

typedef _c_ato_set_learning_rate = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Double learning_rate,
);

typedef _dart_ato_set_learning_rate = void Function(
  ffi.Pointer<ffi.Void> arg0,
  double learning_rate,
);

typedef _c_ato_set_momentum = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Double momentum,
);

typedef _dart_ato_set_momentum = void Function(
  ffi.Pointer<ffi.Void> arg0,
  double momentum,
);

typedef _c_ato_zero_grad = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_ato_zero_grad = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_ato_step = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_ato_step = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_ato_free = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_ato_free = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_ats_int = ffi.Pointer<ffi.Void> Function(
  ffi.Int64 arg0,
);

typedef _dart_ats_int = ffi.Pointer<ffi.Void> Function(
  int arg0,
);

typedef _c_ats_float = ffi.Pointer<ffi.Void> Function(
  ffi.Double arg0,
);

typedef _dart_ats_float = ffi.Pointer<ffi.Void> Function(
  double arg0,
);

typedef _c_ats_to_int = ffi.Int64 Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_ats_to_int = int Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_ats_to_float = ffi.Double Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_ats_to_float = double Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_ats_to_string = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_ats_to_string = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_ats_free = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_ats_free = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_atc_cuda_device_count = ffi.Int32 Function();

typedef _dart_atc_cuda_device_count = int Function();

typedef _c_atc_cuda_is_available = ffi.Int32 Function();

typedef _dart_atc_cuda_is_available = int Function();

typedef _c_atc_cudnn_is_available = ffi.Int32 Function();

typedef _dart_atc_cudnn_is_available = int Function();

typedef _c_atc_set_benchmark_cudnn = ffi.Void Function(
  ffi.Int32 b,
);

typedef _dart_atc_set_benchmark_cudnn = void Function(
  int b,
);

typedef _c_atm_load = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_atm_load = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_atm_load_on_device = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 device,
);

typedef _dart_atm_load_on_device = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> arg0,
  int device,
);

typedef _c_atm_load_str = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 sz,
);

typedef _dart_atm_load_str = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> arg0,
  int sz,
);

typedef _c_atm_load_str_on_device = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 sz,
  ffi.Int32 device,
);

typedef _dart_atm_load_str_on_device = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> arg0,
  int sz,
  int device,
);

typedef _c_atm_forward = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors,
  ffi.Int32 ntensors,
);

typedef _dart_atm_forward = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors,
  int ntensors,
);

typedef _c_atm_forward_ = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ivalues,
  ffi.Int32 nivalues,
);

typedef _dart_atm_forward_ = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ivalues,
  int nivalues,
);

typedef _c_atm_free = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_atm_free = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_atm_to = ffi.Void Function(
  ffi.Pointer<ffi.Void> m,
  ffi.Int32 device,
  ffi.Int32 dtype,
  ffi.Int32 non_blocking,
);

typedef _dart_atm_to = void Function(
  ffi.Pointer<ffi.Void> m,
  int device,
  int dtype,
  int non_blocking,
);

typedef _c_atm_get_profiling_mode = ffi.Int32 Function();

typedef _dart_atm_get_profiling_mode = int Function();

typedef _c_atm_set_profiling_mode = ffi.Void Function(
  ffi.Int32 arg0,
);

typedef _dart_atm_set_profiling_mode = void Function(
  int arg0,
);

typedef _c_ati_none = ffi.Pointer<ffi.Void> Function();

typedef _dart_ati_none = ffi.Pointer<ffi.Void> Function();

typedef _c_ati_tensor = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_ati_tensor = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_ati_int = ffi.Pointer<ffi.Void> Function(
  ffi.Int64 arg0,
);

typedef _dart_ati_int = ffi.Pointer<ffi.Void> Function(
  int arg0,
);

typedef _c_ati_double = ffi.Pointer<ffi.Void> Function(
  ffi.Double arg0,
);

typedef _dart_ati_double = ffi.Pointer<ffi.Void> Function(
  double arg0,
);

typedef _c_ati_bool = ffi.Pointer<ffi.Void> Function(
  ffi.Int32 arg0,
);

typedef _dart_ati_bool = ffi.Pointer<ffi.Void> Function(
  int arg0,
);

typedef _c_ati_string = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_ati_string = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_ati_tuple = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Int32 arg1,
);

typedef _dart_ati_tuple = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  int arg1,
);

typedef _c_ati_generic_list = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Int32 arg1,
);

typedef _dart_ati_generic_list = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  int arg1,
);

typedef _c_ati_generic_dict = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Int32 arg1,
);

typedef _dart_ati_generic_dict = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  int arg1,
);

typedef _c_ati_int_list = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Int32 arg1,
);

typedef _dart_ati_int_list = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int64> arg0,
  int arg1,
);

typedef _c_ati_double_list = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Double> arg0,
  ffi.Int32 arg1,
);

typedef _dart_ati_double_list = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Double> arg0,
  int arg1,
);

typedef _c_ati_bool_list = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_ati_bool_list = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_ati_tensor_list = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Int32 arg1,
);

typedef _dart_ati_tensor_list = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  int arg1,
);

typedef _c_ati_to_tensor = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_ati_to_tensor = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_ati_to_int = ffi.Int64 Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_ati_to_int = int Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_ati_to_double = ffi.Double Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_ati_to_double = double Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_ati_to_string = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_ati_to_string = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_ati_to_bool = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_ati_to_bool = int Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_ati_length = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_ati_length = int Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_ati_tuple_length = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_ati_tuple_length = int Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_ati_to_tuple = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
  ffi.Int32 arg2,
);

typedef _dart_ati_to_tuple = void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
  int arg2,
);

typedef _c_ati_to_generic_list = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
  ffi.Int32 arg2,
);

typedef _dart_ati_to_generic_list = void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
  int arg2,
);

typedef _c_ati_to_generic_dict = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
  ffi.Int32 arg2,
);

typedef _dart_ati_to_generic_dict = void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
  int arg2,
);

typedef _c_ati_to_int_list = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Int64> arg1,
  ffi.Int32 arg2,
);

typedef _dart_ati_to_int_list = void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Int64> arg1,
  int arg2,
);

typedef _c_ati_to_double_list = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Double> arg1,
  ffi.Int32 arg2,
);

typedef _dart_ati_to_double_list = void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Double> arg1,
  int arg2,
);

typedef _c_ati_to_bool_list = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
);

typedef _dart_ati_to_bool_list = void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_ati_to_tensor_list = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
  ffi.Int32 arg2,
);

typedef _dart_ati_to_tensor_list = void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
  int arg2,
);

typedef _c_ati_tag = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_ati_tag = int Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_ati_free = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_ati_free = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_atg___and__ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg___and__ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg___and__1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg___and__1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg___iand__ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg___iand__ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg___iand__1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg___iand__1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg___ilshift__ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg___ilshift__ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg___ilshift__1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg___ilshift__1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg___ior__ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg___ior__ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg___ior__1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg___ior__1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg___irshift__ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg___irshift__ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg___irshift__1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg___irshift__1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg___ixor__ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg___ixor__ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg___ixor__1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg___ixor__1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg___lshift__ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg___lshift__ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg___lshift__1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg___lshift__1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg___or__ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg___or__ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg___or__1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg___or__1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg___rshift__ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg___rshift__ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg___rshift__1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg___rshift__1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg___xor__ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg___xor__ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg___xor__1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg___xor__1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg__adaptive_avg_pool2d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
);

typedef _dart_atg__adaptive_avg_pool2d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
);

typedef _c_atg__adaptive_avg_pool2d_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg__adaptive_avg_pool2d_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg__addmv_impl_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> self2,
  ffi.Pointer<ffi.Void> mat,
  ffi.Pointer<ffi.Void> vec,
);

typedef _dart_atg__addmv_impl_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> self2,
  ffi.Pointer<ffi.Void> mat,
  ffi.Pointer<ffi.Void> vec,
);

typedef _c_atg__addr = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> vec1,
  ffi.Pointer<ffi.Void> vec2,
);

typedef _dart_atg__addr = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> vec1,
  ffi.Pointer<ffi.Void> vec2,
);

typedef _c_atg__addr_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> vec1,
  ffi.Pointer<ffi.Void> vec2,
);

typedef _dart_atg__addr_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> vec1,
  ffi.Pointer<ffi.Void> vec2,
);

typedef _c_atg__addr_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> vec1,
  ffi.Pointer<ffi.Void> vec2,
);

typedef _dart_atg__addr_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> vec1,
  ffi.Pointer<ffi.Void> vec2,
);

typedef _c_atg__amp_update_scale = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> growth_tracker,
  ffi.Pointer<ffi.Void> current_scale,
  ffi.Pointer<ffi.Void> found_inf,
  ffi.Double scale_growth_factor,
  ffi.Double scale_backoff_factor,
  ffi.Int64 growth_interval,
);

typedef _dart_atg__amp_update_scale = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> growth_tracker,
  ffi.Pointer<ffi.Void> current_scale,
  ffi.Pointer<ffi.Void> found_inf,
  double scale_growth_factor,
  double scale_backoff_factor,
  int growth_interval,
);

typedef _c_atg__baddbmm_mkl_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> batch1,
  ffi.Pointer<ffi.Void> batch2,
);

typedef _dart_atg__baddbmm_mkl_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> batch1,
  ffi.Pointer<ffi.Void> batch2,
);

typedef _c_atg__bmm = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mat2,
  ffi.Int32 deterministic,
);

typedef _dart_atg__bmm = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mat2,
  int deterministic,
);

typedef _c_atg__bmm_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mat2,
  ffi.Int32 deterministic,
);

typedef _dart_atg__bmm_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mat2,
  int deterministic,
);

typedef _c_atg__cast_byte = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 non_blocking,
);

typedef _dart_atg__cast_byte = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int non_blocking,
);

typedef _c_atg__cast_char = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 non_blocking,
);

typedef _dart_atg__cast_char = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int non_blocking,
);

typedef _c_atg__cast_double = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 non_blocking,
);

typedef _dart_atg__cast_double = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int non_blocking,
);

typedef _c_atg__cast_float = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 non_blocking,
);

typedef _dart_atg__cast_float = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int non_blocking,
);

typedef _c_atg__cast_half = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 non_blocking,
);

typedef _dart_atg__cast_half = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int non_blocking,
);

typedef _c_atg__cast_int = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 non_blocking,
);

typedef _dart_atg__cast_int = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int non_blocking,
);

typedef _c_atg__cast_long = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 non_blocking,
);

typedef _dart_atg__cast_long = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int non_blocking,
);

typedef _c_atg__cast_short = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 non_blocking,
);

typedef _dart_atg__cast_short = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int non_blocking,
);

typedef _c_atg__cat = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
  ffi.Int32 tensors_len,
  ffi.Int64 dim,
);

typedef _dart_atg__cat = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
  int tensors_len,
  int dim,
);

typedef _c_atg__cat_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
  ffi.Int32 tensors_len,
  ffi.Int64 dim,
);

typedef _dart_atg__cat_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
  int tensors_len,
  int dim,
);

typedef _c_atg__cdist_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  ffi.Pointer<ffi.Void> x1,
  ffi.Pointer<ffi.Void> x2,
  ffi.Double p,
  ffi.Pointer<ffi.Void> cdist,
);

typedef _dart_atg__cdist_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  ffi.Pointer<ffi.Void> x1,
  ffi.Pointer<ffi.Void> x2,
  double p,
  ffi.Pointer<ffi.Void> cdist,
);

typedef _c_atg__cholesky_helper = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 upper,
);

typedef _dart_atg__cholesky_helper = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int upper,
);

typedef _c_atg__cholesky_solve_helper = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> A,
  ffi.Int32 upper,
);

typedef _dart_atg__cholesky_solve_helper = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> A,
  int upper,
);

typedef _c_atg__coalesced_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 coalesced,
);

typedef _dart_atg__coalesced_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int coalesced,
);

typedef _c_atg__convolution = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int32 transposed,
  ffi.Pointer<ffi.Int64> output_padding_data,
  ffi.Int32 output_padding_len,
  ffi.Int64 groups,
  ffi.Int32 benchmark,
  ffi.Int32 deterministic,
  ffi.Int32 cudnn_enabled,
);

typedef _dart_atg__convolution = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int transposed,
  ffi.Pointer<ffi.Int64> output_padding_data,
  int output_padding_len,
  int groups,
  int benchmark,
  int deterministic,
  int cudnn_enabled,
);

typedef _c_atg__convolution_nogroup = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int32 transposed,
  ffi.Pointer<ffi.Int64> output_padding_data,
  ffi.Int32 output_padding_len,
);

typedef _dart_atg__convolution_nogroup = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int transposed,
  ffi.Pointer<ffi.Int64> output_padding_data,
  int output_padding_len,
);

typedef _c_atg__copy_from = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> dst,
  ffi.Int32 non_blocking,
);

typedef _dart_atg__copy_from = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> dst,
  int non_blocking,
);

typedef _c_atg__ctc_loss = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> log_probs,
  ffi.Pointer<ffi.Void> targets,
  ffi.Pointer<ffi.Int64> input_lengths_data,
  ffi.Int32 input_lengths_len,
  ffi.Pointer<ffi.Int64> target_lengths_data,
  ffi.Int32 target_lengths_len,
  ffi.Int64 blank,
  ffi.Int32 zero_infinity,
);

typedef _dart_atg__ctc_loss = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> log_probs,
  ffi.Pointer<ffi.Void> targets,
  ffi.Pointer<ffi.Int64> input_lengths_data,
  int input_lengths_len,
  ffi.Pointer<ffi.Int64> target_lengths_data,
  int target_lengths_len,
  int blank,
  int zero_infinity,
);

typedef _c_atg__ctc_loss_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  ffi.Pointer<ffi.Void> log_probs,
  ffi.Pointer<ffi.Void> targets,
  ffi.Pointer<ffi.Int64> input_lengths_data,
  ffi.Int32 input_lengths_len,
  ffi.Pointer<ffi.Int64> target_lengths_data,
  ffi.Int32 target_lengths_len,
  ffi.Pointer<ffi.Void> neg_log_likelihood,
  ffi.Pointer<ffi.Void> log_alpha,
  ffi.Int64 blank,
  ffi.Int32 zero_infinity,
);

typedef _dart_atg__ctc_loss_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  ffi.Pointer<ffi.Void> log_probs,
  ffi.Pointer<ffi.Void> targets,
  ffi.Pointer<ffi.Int64> input_lengths_data,
  int input_lengths_len,
  ffi.Pointer<ffi.Int64> target_lengths_data,
  int target_lengths_len,
  ffi.Pointer<ffi.Void> neg_log_likelihood,
  ffi.Pointer<ffi.Void> log_alpha,
  int blank,
  int zero_infinity,
);

typedef _c_atg__cudnn_ctc_loss = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> log_probs,
  ffi.Pointer<ffi.Void> targets,
  ffi.Pointer<ffi.Int64> input_lengths_data,
  ffi.Int32 input_lengths_len,
  ffi.Pointer<ffi.Int64> target_lengths_data,
  ffi.Int32 target_lengths_len,
  ffi.Int64 blank,
  ffi.Int32 deterministic,
  ffi.Int32 zero_infinity,
);

typedef _dart_atg__cudnn_ctc_loss = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> log_probs,
  ffi.Pointer<ffi.Void> targets,
  ffi.Pointer<ffi.Int64> input_lengths_data,
  int input_lengths_len,
  ffi.Pointer<ffi.Int64> target_lengths_data,
  int target_lengths_len,
  int blank,
  int deterministic,
  int zero_infinity,
);

typedef _c_atg__cudnn_init_dropout_state = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Double dropout,
  ffi.Int32 train,
  ffi.Int64 dropout_seed,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg__cudnn_init_dropout_state = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  double dropout,
  int train,
  int dropout_seed,
  int options_kind,
  int options_device,
);

typedef _c_atg__cudnn_rnn = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Pointer<ffi.Void>> weight_data,
  ffi.Int32 weight_len,
  ffi.Int64 weight_stride0,
  ffi.Pointer<ffi.Void> weight_buf,
  ffi.Pointer<ffi.Void> hx,
  ffi.Pointer<ffi.Void> cx,
  ffi.Int64 mode,
  ffi.Int64 hidden_size,
  ffi.Int64 num_layers,
  ffi.Int32 batch_first,
  ffi.Double dropout,
  ffi.Int32 train,
  ffi.Int32 bidirectional,
  ffi.Pointer<ffi.Int64> batch_sizes_data,
  ffi.Int32 batch_sizes_len,
  ffi.Pointer<ffi.Void> dropout_state,
);

typedef _dart_atg__cudnn_rnn = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Pointer<ffi.Void>> weight_data,
  int weight_len,
  int weight_stride0,
  ffi.Pointer<ffi.Void> weight_buf,
  ffi.Pointer<ffi.Void> hx,
  ffi.Pointer<ffi.Void> cx,
  int mode,
  int hidden_size,
  int num_layers,
  int batch_first,
  double dropout,
  int train,
  int bidirectional,
  ffi.Pointer<ffi.Int64> batch_sizes_data,
  int batch_sizes_len,
  ffi.Pointer<ffi.Void> dropout_state,
);

typedef _c_atg__cudnn_rnn_flatten_weight = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> weight_arr_data,
  ffi.Int32 weight_arr_len,
  ffi.Int64 weight_stride0,
  ffi.Int64 input_size,
  ffi.Int64 mode,
  ffi.Int64 hidden_size,
  ffi.Int64 num_layers,
  ffi.Int32 batch_first,
  ffi.Int32 bidirectional,
);

typedef _dart_atg__cudnn_rnn_flatten_weight = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> weight_arr_data,
  int weight_arr_len,
  int weight_stride0,
  int input_size,
  int mode,
  int hidden_size,
  int num_layers,
  int batch_first,
  int bidirectional,
);

typedef _c_atg__cumprod = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
);

typedef _dart_atg__cumprod = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
);

typedef _c_atg__cumprod_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
);

typedef _dart_atg__cumprod_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  int dim,
);

typedef _c_atg__cumsum = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
);

typedef _dart_atg__cumsum = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
);

typedef _c_atg__cumsum_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
);

typedef _dart_atg__cumsum_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  int dim,
);

typedef _c_atg__dim_arange = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> like,
  ffi.Int64 dim,
);

typedef _dart_atg__dim_arange = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> like,
  int dim,
);

typedef _c_atg__dirichlet_grad = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> x,
  ffi.Pointer<ffi.Void> alpha,
  ffi.Pointer<ffi.Void> total,
);

typedef _dart_atg__dirichlet_grad = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> x,
  ffi.Pointer<ffi.Void> alpha,
  ffi.Pointer<ffi.Void> total,
);

typedef _c_atg__embedding_bag = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> offsets,
  ffi.Int32 scale_grad_by_freq,
  ffi.Int64 mode,
  ffi.Int32 sparse,
  ffi.Pointer<ffi.Void> per_sample_weights,
  ffi.Int32 include_last_offset,
);

typedef _dart_atg__embedding_bag = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> offsets,
  int scale_grad_by_freq,
  int mode,
  int sparse,
  ffi.Pointer<ffi.Void> per_sample_weights,
  int include_last_offset,
);

typedef _c_atg__embedding_bag_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> offsets,
  ffi.Pointer<ffi.Void> offset2bag,
  ffi.Pointer<ffi.Void> bag_size,
  ffi.Pointer<ffi.Void> maximum_indices,
  ffi.Int64 num_weights,
  ffi.Int32 scale_grad_by_freq,
  ffi.Int64 mode,
  ffi.Int32 sparse,
  ffi.Pointer<ffi.Void> per_sample_weights,
);

typedef _dart_atg__embedding_bag_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> offsets,
  ffi.Pointer<ffi.Void> offset2bag,
  ffi.Pointer<ffi.Void> bag_size,
  ffi.Pointer<ffi.Void> maximum_indices,
  int num_weights,
  int scale_grad_by_freq,
  int mode,
  int sparse,
  ffi.Pointer<ffi.Void> per_sample_weights,
);

typedef _c_atg__embedding_bag_dense_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> offsets,
  ffi.Pointer<ffi.Void> offset2bag,
  ffi.Pointer<ffi.Void> bag_size,
  ffi.Pointer<ffi.Void> maximum_indices,
  ffi.Int64 num_weights,
  ffi.Int32 scale_grad_by_freq,
  ffi.Int64 mode,
  ffi.Pointer<ffi.Void> per_sample_weights,
);

typedef _dart_atg__embedding_bag_dense_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> offsets,
  ffi.Pointer<ffi.Void> offset2bag,
  ffi.Pointer<ffi.Void> bag_size,
  ffi.Pointer<ffi.Void> maximum_indices,
  int num_weights,
  int scale_grad_by_freq,
  int mode,
  ffi.Pointer<ffi.Void> per_sample_weights,
);

typedef _c_atg__embedding_bag_per_sample_weights_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> offsets,
  ffi.Pointer<ffi.Void> offset2bag,
  ffi.Int64 mode,
);

typedef _dart_atg__embedding_bag_per_sample_weights_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> offsets,
  ffi.Pointer<ffi.Void> offset2bag,
  int mode,
);

typedef _c_atg__embedding_bag_sparse_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> offsets,
  ffi.Pointer<ffi.Void> offset2bag,
  ffi.Pointer<ffi.Void> bag_size,
  ffi.Int64 num_weights,
  ffi.Int32 scale_grad_by_freq,
  ffi.Int64 mode,
  ffi.Pointer<ffi.Void> per_sample_weights,
);

typedef _dart_atg__embedding_bag_sparse_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> offsets,
  ffi.Pointer<ffi.Void> offset2bag,
  ffi.Pointer<ffi.Void> bag_size,
  int num_weights,
  int scale_grad_by_freq,
  int mode,
  ffi.Pointer<ffi.Void> per_sample_weights,
);

typedef _c_atg__empty_affine_quantized = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
  ffi.Double scale,
  ffi.Int64 zero_point,
);

typedef _dart_atg__empty_affine_quantized = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
  int options_kind,
  int options_device,
  double scale,
  int zero_point,
);

typedef _c_atg__empty_per_channel_affine_quantized = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
  ffi.Pointer<ffi.Void> scales,
  ffi.Pointer<ffi.Void> zero_points,
  ffi.Int64 axis,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg__empty_per_channel_affine_quantized = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
  ffi.Pointer<ffi.Void> scales,
  ffi.Pointer<ffi.Void> zero_points,
  int axis,
  int options_kind,
  int options_device,
);

typedef _c_atg__euclidean_dist = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> x1,
  ffi.Pointer<ffi.Void> x2,
);

typedef _dart_atg__euclidean_dist = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> x1,
  ffi.Pointer<ffi.Void> x2,
);

typedef _c_atg__fft_with_size = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 signal_ndim,
  ffi.Int32 complex_input,
  ffi.Int32 complex_output,
  ffi.Int32 inverse,
  ffi.Pointer<ffi.Int64> checked_signal_sizes_data,
  ffi.Int32 checked_signal_sizes_len,
  ffi.Int32 normalized,
  ffi.Int32 onesided,
  ffi.Pointer<ffi.Int64> output_sizes_data,
  ffi.Int32 output_sizes_len,
);

typedef _dart_atg__fft_with_size = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int signal_ndim,
  int complex_input,
  int complex_output,
  int inverse,
  ffi.Pointer<ffi.Int64> checked_signal_sizes_data,
  int checked_signal_sizes_len,
  int normalized,
  int onesided,
  ffi.Pointer<ffi.Int64> output_sizes_data,
  int output_sizes_len,
);

typedef _c_atg__fused_dropout = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Double p,
);

typedef _dart_atg__fused_dropout = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  double p,
);

typedef _c_atg__gather_sparse_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Pointer<ffi.Void> index,
  ffi.Pointer<ffi.Void> grad,
);

typedef _dart_atg__gather_sparse_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  ffi.Pointer<ffi.Void> index,
  ffi.Pointer<ffi.Void> grad,
);

typedef _c_atg__index_copy_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Pointer<ffi.Void> index,
  ffi.Pointer<ffi.Void> source,
);

typedef _dart_atg__index_copy_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  ffi.Pointer<ffi.Void> index,
  ffi.Pointer<ffi.Void> source,
);

typedef _c_atg__index_put_impl_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Pointer<ffi.Void>> indices_data,
  ffi.Int32 indices_len,
  ffi.Pointer<ffi.Void> values,
  ffi.Int32 accumulate,
  ffi.Int32 unsafe,
);

typedef _dart_atg__index_put_impl_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Pointer<ffi.Void>> indices_data,
  int indices_len,
  ffi.Pointer<ffi.Void> values,
  int accumulate,
  int unsafe,
);

typedef _c_atg__indices = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg__indices = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg__inverse_helper = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg__inverse_helper = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg__log_softmax = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int32 half_to_float,
);

typedef _dart_atg__log_softmax = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int half_to_float,
);

typedef _c_atg__log_softmax_backward_data = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> output,
  ffi.Int64 dim,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg__log_softmax_backward_data = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> output,
  int dim,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg__logcumsumexp = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
);

typedef _dart_atg__logcumsumexp = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
);

typedef _c_atg__logcumsumexp_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
);

typedef _dart_atg__logcumsumexp_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  int dim,
);

typedef _c_atg__lu_solve_helper = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> LU_data,
  ffi.Pointer<ffi.Void> LU_pivots,
);

typedef _dart_atg__lu_solve_helper = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> LU_data,
  ffi.Pointer<ffi.Void> LU_pivots,
);

typedef _c_atg__lu_with_info = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 pivot,
  ffi.Int32 check_errors,
);

typedef _dart_atg__lu_with_info = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int pivot,
  int check_errors,
);

typedef _c_atg__make_per_channel_quantized_tensor = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> scale,
  ffi.Pointer<ffi.Void> zero_point,
  ffi.Int64 axis,
);

typedef _dart_atg__make_per_channel_quantized_tensor = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> scale,
  ffi.Pointer<ffi.Void> zero_point,
  int axis,
);

typedef _c_atg__make_per_tensor_quantized_tensor = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Double scale,
  ffi.Int64 zero_point,
);

typedef _dart_atg__make_per_tensor_quantized_tensor = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  double scale,
  int zero_point,
);

typedef _c_atg__masked_scale = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mask,
  ffi.Double scale,
);

typedef _dart_atg__masked_scale = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mask,
  double scale,
);

typedef _c_atg__mkldnn_reshape = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> shape_data,
  ffi.Int32 shape_len,
);

typedef _dart_atg__mkldnn_reshape = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> shape_data,
  int shape_len,
);

typedef _c_atg__mkldnn_transpose = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim0,
  ffi.Int64 dim1,
);

typedef _dart_atg__mkldnn_transpose = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim0,
  int dim1,
);

typedef _c_atg__mkldnn_transpose_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim0,
  ffi.Int64 dim1,
);

typedef _dart_atg__mkldnn_transpose_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim0,
  int dim1,
);

typedef _c_atg__mode = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int32 keepdim,
);

typedef _dart_atg__mode = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int keepdim,
);

typedef _c_atg__mode_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> values,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int32 keepdim,
);

typedef _dart_atg__mode_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> values,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int keepdim,
);

typedef _c_atg__multinomial_alias_draw = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> J,
  ffi.Pointer<ffi.Void> q,
  ffi.Int64 num_samples,
);

typedef _dart_atg__multinomial_alias_draw = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> J,
  ffi.Pointer<ffi.Void> q,
  int num_samples,
);

typedef _c_atg__multinomial_alias_setup = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> probs,
);

typedef _dart_atg__multinomial_alias_setup = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> probs,
);

typedef _c_atg__nnpack_spatial_convolution = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
);

typedef _dart_atg__nnpack_spatial_convolution = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
);

typedef _c_atg__nnpack_spatial_convolution_backward_input = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
);

typedef _dart_atg__nnpack_spatial_convolution_backward_input = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
);

typedef _c_atg__nnpack_spatial_convolution_backward_weight = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Int64> weightsize_data,
  ffi.Int32 weightsize_len,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
);

typedef _dart_atg__nnpack_spatial_convolution_backward_weight = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Int64> weightsize_data,
  int weightsize_len,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
);

typedef _c_atg__pack_padded_sequence = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> lengths,
  ffi.Int32 batch_first,
);

typedef _dart_atg__pack_padded_sequence = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> lengths,
  int batch_first,
);

typedef _c_atg__pack_padded_sequence_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  ffi.Pointer<ffi.Int64> input_size_data,
  ffi.Int32 input_size_len,
  ffi.Pointer<ffi.Void> batch_sizes,
  ffi.Int32 batch_first,
);

typedef _dart_atg__pack_padded_sequence_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  ffi.Pointer<ffi.Int64> input_size_data,
  int input_size_len,
  ffi.Pointer<ffi.Void> batch_sizes,
  int batch_first,
);

typedef _c_atg__pad_packed_sequence = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.Void> batch_sizes,
  ffi.Int32 batch_first,
  ffi.Pointer<ffi.Void> padding_value,
  ffi.Int64 total_length,
);

typedef _dart_atg__pad_packed_sequence = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.Void> batch_sizes,
  int batch_first,
  ffi.Pointer<ffi.Void> padding_value,
  int total_length,
);

typedef _c_atg__pdist_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  ffi.Pointer<ffi.Void> self,
  ffi.Double p,
  ffi.Pointer<ffi.Void> pdist,
);

typedef _dart_atg__pdist_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  ffi.Pointer<ffi.Void> self,
  double p,
  ffi.Pointer<ffi.Void> pdist,
);

typedef _c_atg__qr_helper = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 some,
);

typedef _dart_atg__qr_helper = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int some,
);

typedef _c_atg__reshape_from_tensor = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> shape,
);

typedef _dart_atg__reshape_from_tensor = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> shape,
);

typedef _c_atg__s_where = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> condition,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg__s_where = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> condition,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg__sample_dirichlet = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg__sample_dirichlet = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg__shape_as_tensor = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg__shape_as_tensor = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg__sobol_engine_draw = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> quasi,
  ffi.Int64 n,
  ffi.Pointer<ffi.Void> sobolstate,
  ffi.Int64 dimension,
  ffi.Int64 num_generated,
  ffi.Int32 dtype,
);

typedef _dart_atg__sobol_engine_draw = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> quasi,
  int n,
  ffi.Pointer<ffi.Void> sobolstate,
  int dimension,
  int num_generated,
  int dtype,
);

typedef _c_atg__sobol_engine_ff_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 n,
  ffi.Pointer<ffi.Void> sobolstate,
  ffi.Int64 dimension,
  ffi.Int64 num_generated,
);

typedef _dart_atg__sobol_engine_ff_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int n,
  ffi.Pointer<ffi.Void> sobolstate,
  int dimension,
  int num_generated,
);

typedef _c_atg__sobol_engine_initialize_state_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dimension,
);

typedef _dart_atg__sobol_engine_initialize_state_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dimension,
);

typedef _c_atg__sobol_engine_scramble_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> ltm,
  ffi.Int64 dimension,
);

typedef _dart_atg__sobol_engine_scramble_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> ltm,
  int dimension,
);

typedef _c_atg__softmax = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int32 half_to_float,
);

typedef _dart_atg__softmax = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int half_to_float,
);

typedef _c_atg__softmax_backward_data = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> output,
  ffi.Int64 dim,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg__softmax_backward_data = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> output,
  int dim,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg__solve_helper = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> A,
);

typedef _dart_atg__solve_helper = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> A,
);

typedef _c_atg__sparse_addmm = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> sparse,
  ffi.Pointer<ffi.Void> dense,
);

typedef _dart_atg__sparse_addmm = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> sparse,
  ffi.Pointer<ffi.Void> dense,
);

typedef _c_atg__sparse_coo_tensor_unsafe = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> values,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg__sparse_coo_tensor_unsafe = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> values,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
  int options_kind,
  int options_device,
);

typedef _c_atg__sparse_coo_tensor_with_dims = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Int64 sparse_dim,
  ffi.Int64 dense_dim,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg__sparse_coo_tensor_with_dims = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  int sparse_dim,
  int dense_dim,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
  int options_kind,
  int options_device,
);

typedef _c_atg__sparse_coo_tensor_with_dims_and_tensors = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Int64 sparse_dim,
  ffi.Int64 dense_dim,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> values,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg__sparse_coo_tensor_with_dims_and_tensors = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  int sparse_dim,
  int dense_dim,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> values,
  int options_kind,
  int options_device,
);

typedef _c_atg__sparse_log_softmax = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int32 dtype,
);

typedef _dart_atg__sparse_log_softmax = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int dtype,
);

typedef _c_atg__sparse_log_softmax1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int32 half_to_float,
);

typedef _dart_atg__sparse_log_softmax1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int half_to_float,
);

typedef _c_atg__sparse_log_softmax_backward_data = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> output,
  ffi.Int64 dim,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg__sparse_log_softmax_backward_data = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> output,
  int dim,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg__sparse_mm = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> sparse,
  ffi.Pointer<ffi.Void> dense,
);

typedef _dart_atg__sparse_mm = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> sparse,
  ffi.Pointer<ffi.Void> dense,
);

typedef _c_atg__sparse_softmax = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int32 dtype,
);

typedef _dart_atg__sparse_softmax = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int dtype,
);

typedef _c_atg__sparse_softmax1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int32 half_to_float,
);

typedef _dart_atg__sparse_softmax1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int half_to_float,
);

typedef _c_atg__sparse_softmax_backward_data = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> output,
  ffi.Int64 dim,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg__sparse_softmax_backward_data = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> output,
  int dim,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg__sparse_sum = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg__sparse_sum = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg__sparse_sum1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 dtype,
);

typedef _dart_atg__sparse_sum1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dtype,
);

typedef _c_atg__sparse_sum2 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  ffi.Int32 dim_len,
);

typedef _dart_atg__sparse_sum2 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  int dim_len,
);

typedef _c_atg__sparse_sum3 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  ffi.Int32 dim_len,
  ffi.Int32 dtype,
);

typedef _dart_atg__sparse_sum3 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  int dim_len,
  int dtype,
);

typedef _c_atg__sparse_sum_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  ffi.Int32 dim_len,
);

typedef _dart_atg__sparse_sum_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  int dim_len,
);

typedef _c_atg__standard_gamma = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg__standard_gamma = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg__standard_gamma_grad = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> output,
);

typedef _dart_atg__standard_gamma_grad = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> output,
);

typedef _c_atg__svd_helper = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 some,
  ffi.Int32 compute_uv,
);

typedef _dart_atg__svd_helper = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int some,
  int compute_uv,
);

typedef _c_atg__symeig_helper = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 eigenvectors,
  ffi.Int32 upper,
);

typedef _dart_atg__symeig_helper = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int eigenvectors,
  int upper,
);

typedef _c_atg__test_serialization_subcmul = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg__test_serialization_subcmul = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg__triangular_solve_helper = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> A,
  ffi.Int32 upper,
  ffi.Int32 transpose,
  ffi.Int32 unitriangular,
);

typedef _dart_atg__triangular_solve_helper = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> A,
  int upper,
  int transpose,
  int unitriangular,
);

typedef _c_atg__trilinear = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> i1,
  ffi.Pointer<ffi.Void> i2,
  ffi.Pointer<ffi.Void> i3,
  ffi.Pointer<ffi.Int64> expand1_data,
  ffi.Int32 expand1_len,
  ffi.Pointer<ffi.Int64> expand2_data,
  ffi.Int32 expand2_len,
  ffi.Pointer<ffi.Int64> expand3_data,
  ffi.Int32 expand3_len,
  ffi.Pointer<ffi.Int64> sumdim_data,
  ffi.Int32 sumdim_len,
  ffi.Int64 unroll_dim,
);

typedef _dart_atg__trilinear = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> i1,
  ffi.Pointer<ffi.Void> i2,
  ffi.Pointer<ffi.Void> i3,
  ffi.Pointer<ffi.Int64> expand1_data,
  int expand1_len,
  ffi.Pointer<ffi.Int64> expand2_data,
  int expand2_len,
  ffi.Pointer<ffi.Int64> expand3_data,
  int expand3_len,
  ffi.Pointer<ffi.Int64> sumdim_data,
  int sumdim_len,
  int unroll_dim,
);

typedef _c_atg__unique = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 sorted,
  ffi.Int32 return_inverse,
);

typedef _dart_atg__unique = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int sorted,
  int return_inverse,
);

typedef _c_atg__unique2 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 sorted,
  ffi.Int32 return_inverse,
  ffi.Int32 return_counts,
);

typedef _dart_atg__unique2 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int sorted,
  int return_inverse,
  int return_counts,
);

typedef _c_atg__unsafe_view = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
);

typedef _dart_atg__unsafe_view = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
);

typedef _c_atg__values = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg__values = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg__weight_norm = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> v,
  ffi.Pointer<ffi.Void> g,
  ffi.Int64 dim,
);

typedef _dart_atg__weight_norm = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> v,
  ffi.Pointer<ffi.Void> g,
  int dim,
);

typedef _c_atg__weight_norm_cuda_interface = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> v,
  ffi.Pointer<ffi.Void> g,
  ffi.Int64 dim,
);

typedef _dart_atg__weight_norm_cuda_interface = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> v,
  ffi.Pointer<ffi.Void> g,
  int dim,
);

typedef _c_atg__weight_norm_cuda_interface_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_w,
  ffi.Pointer<ffi.Void> saved_v,
  ffi.Pointer<ffi.Void> saved_g,
  ffi.Pointer<ffi.Void> saved_norms,
  ffi.Int64 dim,
);

typedef _dart_atg__weight_norm_cuda_interface_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_w,
  ffi.Pointer<ffi.Void> saved_v,
  ffi.Pointer<ffi.Void> saved_g,
  ffi.Pointer<ffi.Void> saved_norms,
  int dim,
);

typedef _c_atg__weight_norm_differentiable_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_w,
  ffi.Pointer<ffi.Void> saved_v,
  ffi.Pointer<ffi.Void> saved_g,
  ffi.Pointer<ffi.Void> saved_norms,
  ffi.Int64 dim,
);

typedef _dart_atg__weight_norm_differentiable_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_w,
  ffi.Pointer<ffi.Void> saved_v,
  ffi.Pointer<ffi.Void> saved_g,
  ffi.Pointer<ffi.Void> saved_norms,
  int dim,
);

typedef _c_atg_abs = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_abs = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_abs_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_abs_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_abs_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_abs_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_absolute = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_absolute = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_absolute_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_absolute_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_absolute_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_absolute_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_acos = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_acos = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_acos_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_acos_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_acos_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_acos_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_acosh = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_acosh = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_acosh_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_acosh_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_acosh_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_acosh_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_adaptive_avg_pool1d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
);

typedef _dart_atg_adaptive_avg_pool1d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
);

typedef _c_atg_adaptive_avg_pool2d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
);

typedef _dart_atg_adaptive_avg_pool2d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
);

typedef _c_atg_adaptive_avg_pool2d_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
);

typedef _dart_atg_adaptive_avg_pool2d_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
);

typedef _c_atg_adaptive_avg_pool3d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
);

typedef _dart_atg_adaptive_avg_pool3d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
);

typedef _c_atg_adaptive_avg_pool3d_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_adaptive_avg_pool3d_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_adaptive_avg_pool3d_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_adaptive_avg_pool3d_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_adaptive_avg_pool3d_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
);

typedef _dart_atg_adaptive_avg_pool3d_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
);

typedef _c_atg_adaptive_max_pool1d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
);

typedef _dart_atg_adaptive_max_pool1d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
);

typedef _c_atg_adaptive_max_pool2d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
);

typedef _dart_atg_adaptive_max_pool2d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
);

typedef _c_atg_adaptive_max_pool2d_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> indices,
);

typedef _dart_atg_adaptive_max_pool2d_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> indices,
);

typedef _c_atg_adaptive_max_pool2d_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> indices,
);

typedef _dart_atg_adaptive_max_pool2d_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> indices,
);

typedef _c_atg_adaptive_max_pool2d_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
);

typedef _dart_atg_adaptive_max_pool2d_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
);

typedef _c_atg_adaptive_max_pool3d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
);

typedef _dart_atg_adaptive_max_pool3d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
);

typedef _c_atg_adaptive_max_pool3d_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> indices,
);

typedef _dart_atg_adaptive_max_pool3d_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> indices,
);

typedef _c_atg_adaptive_max_pool3d_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> indices,
);

typedef _dart_atg_adaptive_max_pool3d_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> indices,
);

typedef _c_atg_adaptive_max_pool3d_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
);

typedef _dart_atg_adaptive_max_pool3d_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
);

typedef _c_atg_add = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_add = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_add1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_add1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_add_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_add_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_add_1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_add_1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_add_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_add_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_addbmm = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> batch1,
  ffi.Pointer<ffi.Void> batch2,
);

typedef _dart_atg_addbmm = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> batch1,
  ffi.Pointer<ffi.Void> batch2,
);

typedef _c_atg_addbmm_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> batch1,
  ffi.Pointer<ffi.Void> batch2,
);

typedef _dart_atg_addbmm_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> batch1,
  ffi.Pointer<ffi.Void> batch2,
);

typedef _c_atg_addbmm_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> batch1,
  ffi.Pointer<ffi.Void> batch2,
);

typedef _dart_atg_addbmm_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> batch1,
  ffi.Pointer<ffi.Void> batch2,
);

typedef _c_atg_addcdiv = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> tensor1,
  ffi.Pointer<ffi.Void> tensor2,
);

typedef _dart_atg_addcdiv = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> tensor1,
  ffi.Pointer<ffi.Void> tensor2,
);

typedef _c_atg_addcdiv_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> tensor1,
  ffi.Pointer<ffi.Void> tensor2,
);

typedef _dart_atg_addcdiv_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> tensor1,
  ffi.Pointer<ffi.Void> tensor2,
);

typedef _c_atg_addcdiv_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> tensor1,
  ffi.Pointer<ffi.Void> tensor2,
);

typedef _dart_atg_addcdiv_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> tensor1,
  ffi.Pointer<ffi.Void> tensor2,
);

typedef _c_atg_addcmul = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> tensor1,
  ffi.Pointer<ffi.Void> tensor2,
);

typedef _dart_atg_addcmul = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> tensor1,
  ffi.Pointer<ffi.Void> tensor2,
);

typedef _c_atg_addcmul_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> tensor1,
  ffi.Pointer<ffi.Void> tensor2,
);

typedef _dart_atg_addcmul_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> tensor1,
  ffi.Pointer<ffi.Void> tensor2,
);

typedef _c_atg_addcmul_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> tensor1,
  ffi.Pointer<ffi.Void> tensor2,
);

typedef _dart_atg_addcmul_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> tensor1,
  ffi.Pointer<ffi.Void> tensor2,
);

typedef _c_atg_addmm = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mat1,
  ffi.Pointer<ffi.Void> mat2,
);

typedef _dart_atg_addmm = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mat1,
  ffi.Pointer<ffi.Void> mat2,
);

typedef _c_atg_addmm_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mat1,
  ffi.Pointer<ffi.Void> mat2,
);

typedef _dart_atg_addmm_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mat1,
  ffi.Pointer<ffi.Void> mat2,
);

typedef _c_atg_addmm_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mat1,
  ffi.Pointer<ffi.Void> mat2,
);

typedef _dart_atg_addmm_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mat1,
  ffi.Pointer<ffi.Void> mat2,
);

typedef _c_atg_addmv = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mat,
  ffi.Pointer<ffi.Void> vec,
);

typedef _dart_atg_addmv = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mat,
  ffi.Pointer<ffi.Void> vec,
);

typedef _c_atg_addmv_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mat,
  ffi.Pointer<ffi.Void> vec,
);

typedef _dart_atg_addmv_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mat,
  ffi.Pointer<ffi.Void> vec,
);

typedef _c_atg_addmv_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mat,
  ffi.Pointer<ffi.Void> vec,
);

typedef _dart_atg_addmv_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mat,
  ffi.Pointer<ffi.Void> vec,
);

typedef _c_atg_addr = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> vec1,
  ffi.Pointer<ffi.Void> vec2,
);

typedef _dart_atg_addr = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> vec1,
  ffi.Pointer<ffi.Void> vec2,
);

typedef _c_atg_addr_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> vec1,
  ffi.Pointer<ffi.Void> vec2,
);

typedef _dart_atg_addr_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> vec1,
  ffi.Pointer<ffi.Void> vec2,
);

typedef _c_atg_addr_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> vec1,
  ffi.Pointer<ffi.Void> vec2,
);

typedef _dart_atg_addr_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> vec1,
  ffi.Pointer<ffi.Void> vec2,
);

typedef _c_atg_affine_grid_generator = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> theta,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
  ffi.Int32 align_corners,
);

typedef _dart_atg_affine_grid_generator = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> theta,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
  int align_corners,
);

typedef _c_atg_affine_grid_generator_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
  ffi.Int32 align_corners,
);

typedef _dart_atg_affine_grid_generator_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
  int align_corners,
);

typedef _c_atg_alias = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_alias = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_align_as = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_align_as = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_align_tensors = ffi.Pointer<ffi.Pointer<ffi.Void>> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
  ffi.Int32 tensors_len,
);

typedef _dart_atg_align_tensors = ffi.Pointer<ffi.Pointer<ffi.Void>> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
  int tensors_len,
);

typedef _c_atg_all = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_all = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_all1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int32 keepdim,
);

typedef _dart_atg_all1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int keepdim,
);

typedef _c_atg_all_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int32 keepdim,
);

typedef _dart_atg_all_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int keepdim,
);

typedef _c_atg_alpha_dropout = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Double p,
  ffi.Int32 train,
);

typedef _dart_atg_alpha_dropout = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  double p,
  int train,
);

typedef _c_atg_alpha_dropout_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Double p,
  ffi.Int32 train,
);

typedef _dart_atg_alpha_dropout_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  double p,
  int train,
);

typedef _c_atg_angle = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_angle = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_angle_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_angle_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_any = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_any = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_any1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int32 keepdim,
);

typedef _dart_atg_any1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int keepdim,
);

typedef _c_atg_any_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int32 keepdim,
);

typedef _dart_atg_any_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int keepdim,
);

typedef _c_atg_arange = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> end,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_arange = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> end,
  int options_kind,
  int options_device,
);

typedef _c_atg_arange1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> start,
  ffi.Pointer<ffi.Void> end,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_arange1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> start,
  ffi.Pointer<ffi.Void> end,
  int options_kind,
  int options_device,
);

typedef _c_atg_arange2 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> start,
  ffi.Pointer<ffi.Void> end,
  ffi.Pointer<ffi.Void> step,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_arange2 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> start,
  ffi.Pointer<ffi.Void> end,
  ffi.Pointer<ffi.Void> step,
  int options_kind,
  int options_device,
);

typedef _c_atg_arange_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> end,
);

typedef _dart_atg_arange_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> end,
);

typedef _c_atg_arange_out1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> start,
  ffi.Pointer<ffi.Void> end,
);

typedef _dart_atg_arange_out1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> start,
  ffi.Pointer<ffi.Void> end,
);

typedef _c_atg_argmax = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim_v,
  ffi.Uint8 dim_null,
  ffi.Int32 keepdim,
);

typedef _dart_atg_argmax = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim_v,
  int dim_null,
  int keepdim,
);

typedef _c_atg_argmin = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim_v,
  ffi.Uint8 dim_null,
  ffi.Int32 keepdim,
);

typedef _dart_atg_argmin = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim_v,
  int dim_null,
  int keepdim,
);

typedef _c_atg_argsort = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int32 descending,
);

typedef _dart_atg_argsort = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int descending,
);

typedef _c_atg_as_strided = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Int64 storage_offset_v,
  ffi.Uint8 storage_offset_null,
);

typedef _dart_atg_as_strided = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  int storage_offset_v,
  int storage_offset_null,
);

typedef _c_atg_as_strided_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Int64 storage_offset_v,
  ffi.Uint8 storage_offset_null,
);

typedef _dart_atg_as_strided_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  int storage_offset_v,
  int storage_offset_null,
);

typedef _c_atg_asin = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_asin = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_asin_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_asin_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_asin_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_asin_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_asinh = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_asinh = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_asinh_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_asinh_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_asinh_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_asinh_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_atan = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_atan = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_atan2 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_atan2 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_atan2_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_atan2_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_atan2_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_atan2_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_atan_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_atan_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_atan_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_atan_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_atanh = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_atanh = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_atanh_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_atanh_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_atanh_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_atanh_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_avg_pool1d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Int32 ceil_mode,
  ffi.Int32 count_include_pad,
);

typedef _dart_atg_avg_pool1d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  int ceil_mode,
  int count_include_pad,
);

typedef _c_atg_avg_pool2d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Int32 ceil_mode,
  ffi.Int32 count_include_pad,
  ffi.Int64 divisor_override_v,
  ffi.Uint8 divisor_override_null,
);

typedef _dart_atg_avg_pool2d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  int ceil_mode,
  int count_include_pad,
  int divisor_override_v,
  int divisor_override_null,
);

typedef _c_atg_avg_pool2d_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Int32 ceil_mode,
  ffi.Int32 count_include_pad,
  ffi.Int64 divisor_override_v,
  ffi.Uint8 divisor_override_null,
);

typedef _dart_atg_avg_pool2d_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  int ceil_mode,
  int count_include_pad,
  int divisor_override_v,
  int divisor_override_null,
);

typedef _c_atg_avg_pool2d_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Int32 ceil_mode,
  ffi.Int32 count_include_pad,
  ffi.Int64 divisor_override_v,
  ffi.Uint8 divisor_override_null,
);

typedef _dart_atg_avg_pool2d_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  int ceil_mode,
  int count_include_pad,
  int divisor_override_v,
  int divisor_override_null,
);

typedef _c_atg_avg_pool2d_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Int32 ceil_mode,
  ffi.Int32 count_include_pad,
  ffi.Int64 divisor_override_v,
  ffi.Uint8 divisor_override_null,
);

typedef _dart_atg_avg_pool2d_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  int ceil_mode,
  int count_include_pad,
  int divisor_override_v,
  int divisor_override_null,
);

typedef _c_atg_avg_pool3d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Int32 ceil_mode,
  ffi.Int32 count_include_pad,
  ffi.Int64 divisor_override_v,
  ffi.Uint8 divisor_override_null,
);

typedef _dart_atg_avg_pool3d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  int ceil_mode,
  int count_include_pad,
  int divisor_override_v,
  int divisor_override_null,
);

typedef _c_atg_avg_pool3d_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Int32 ceil_mode,
  ffi.Int32 count_include_pad,
  ffi.Int64 divisor_override_v,
  ffi.Uint8 divisor_override_null,
);

typedef _dart_atg_avg_pool3d_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  int ceil_mode,
  int count_include_pad,
  int divisor_override_v,
  int divisor_override_null,
);

typedef _c_atg_avg_pool3d_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Int32 ceil_mode,
  ffi.Int32 count_include_pad,
  ffi.Int64 divisor_override_v,
  ffi.Uint8 divisor_override_null,
);

typedef _dart_atg_avg_pool3d_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  int ceil_mode,
  int count_include_pad,
  int divisor_override_v,
  int divisor_override_null,
);

typedef _c_atg_avg_pool3d_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Int32 ceil_mode,
  ffi.Int32 count_include_pad,
  ffi.Int64 divisor_override_v,
  ffi.Uint8 divisor_override_null,
);

typedef _dart_atg_avg_pool3d_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  int ceil_mode,
  int count_include_pad,
  int divisor_override_v,
  int divisor_override_null,
);

typedef _c_atg_baddbmm = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> batch1,
  ffi.Pointer<ffi.Void> batch2,
);

typedef _dart_atg_baddbmm = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> batch1,
  ffi.Pointer<ffi.Void> batch2,
);

typedef _c_atg_baddbmm_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> batch1,
  ffi.Pointer<ffi.Void> batch2,
);

typedef _dart_atg_baddbmm_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> batch1,
  ffi.Pointer<ffi.Void> batch2,
);

typedef _c_atg_baddbmm_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> batch1,
  ffi.Pointer<ffi.Void> batch2,
);

typedef _dart_atg_baddbmm_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> batch1,
  ffi.Pointer<ffi.Void> batch2,
);

typedef _c_atg_bartlett_window = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Int64 window_length,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_bartlett_window = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  int window_length,
  int options_kind,
  int options_device,
);

typedef _c_atg_bartlett_window1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Int64 window_length,
  ffi.Int32 periodic,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_bartlett_window1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  int window_length,
  int periodic,
  int options_kind,
  int options_device,
);

typedef _c_atg_batch_norm = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Void> running_mean,
  ffi.Pointer<ffi.Void> running_var,
  ffi.Int32 training,
  ffi.Double momentum,
  ffi.Double eps,
  ffi.Int32 cudnn_enabled,
);

typedef _dart_atg_batch_norm = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Void> running_mean,
  ffi.Pointer<ffi.Void> running_var,
  int training,
  double momentum,
  double eps,
  int cudnn_enabled,
);

typedef _c_atg_batch_norm_backward_elemt = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_out,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> mean,
  ffi.Pointer<ffi.Void> invstd,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> mean_dy,
  ffi.Pointer<ffi.Void> mean_dy_xmu,
);

typedef _dart_atg_batch_norm_backward_elemt = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_out,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> mean,
  ffi.Pointer<ffi.Void> invstd,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> mean_dy,
  ffi.Pointer<ffi.Void> mean_dy_xmu,
);

typedef _c_atg_batch_norm_backward_reduce = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_out,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> mean,
  ffi.Pointer<ffi.Void> invstd,
  ffi.Pointer<ffi.Void> weight,
  ffi.Int32 input_g,
  ffi.Int32 weight_g,
  ffi.Int32 bias_g,
);

typedef _dart_atg_batch_norm_backward_reduce = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_out,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> mean,
  ffi.Pointer<ffi.Void> invstd,
  ffi.Pointer<ffi.Void> weight,
  int input_g,
  int weight_g,
  int bias_g,
);

typedef _c_atg_batch_norm_elemt = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Void> mean,
  ffi.Pointer<ffi.Void> invstd,
  ffi.Double eps,
);

typedef _dart_atg_batch_norm_elemt = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Void> mean,
  ffi.Pointer<ffi.Void> invstd,
  double eps,
);

typedef _c_atg_batch_norm_elemt_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Void> mean,
  ffi.Pointer<ffi.Void> invstd,
  ffi.Double eps,
);

typedef _dart_atg_batch_norm_elemt_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Void> mean,
  ffi.Pointer<ffi.Void> invstd,
  double eps,
);

typedef _c_atg_batch_norm_gather_stats = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> mean,
  ffi.Pointer<ffi.Void> invstd,
  ffi.Pointer<ffi.Void> running_mean,
  ffi.Pointer<ffi.Void> running_var,
  ffi.Double momentum,
  ffi.Double eps,
  ffi.Int64 count,
);

typedef _dart_atg_batch_norm_gather_stats = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> mean,
  ffi.Pointer<ffi.Void> invstd,
  ffi.Pointer<ffi.Void> running_mean,
  ffi.Pointer<ffi.Void> running_var,
  double momentum,
  double eps,
  int count,
);

typedef _c_atg_batch_norm_gather_stats_with_counts = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> mean,
  ffi.Pointer<ffi.Void> invstd,
  ffi.Pointer<ffi.Void> running_mean,
  ffi.Pointer<ffi.Void> running_var,
  ffi.Double momentum,
  ffi.Double eps,
  ffi.Pointer<ffi.Void> counts,
);

typedef _dart_atg_batch_norm_gather_stats_with_counts = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> mean,
  ffi.Pointer<ffi.Void> invstd,
  ffi.Pointer<ffi.Void> running_mean,
  ffi.Pointer<ffi.Void> running_var,
  double momentum,
  double eps,
  ffi.Pointer<ffi.Void> counts,
);

typedef _c_atg_batch_norm_stats = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Double eps,
);

typedef _dart_atg_batch_norm_stats = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  double eps,
);

typedef _c_atg_batch_norm_update_stats = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> running_mean,
  ffi.Pointer<ffi.Void> running_var,
  ffi.Double momentum,
);

typedef _dart_atg_batch_norm_update_stats = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> running_mean,
  ffi.Pointer<ffi.Void> running_var,
  double momentum,
);

typedef _c_atg_bernoulli = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_bernoulli = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_bernoulli1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Double p,
);

typedef _dart_atg_bernoulli1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  double p,
);

typedef _c_atg_bernoulli_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> p,
);

typedef _dart_atg_bernoulli_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> p,
);

typedef _c_atg_bernoulli_1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Double p,
);

typedef _dart_atg_bernoulli_1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  double p,
);

typedef _c_atg_bernoulli_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_bernoulli_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_bilinear = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input1,
  ffi.Pointer<ffi.Void> input2,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
);

typedef _dart_atg_bilinear = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input1,
  ffi.Pointer<ffi.Void> input2,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
);

typedef _c_atg_binary_cross_entropy = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Pointer<ffi.Void> weight,
  ffi.Int64 reduction,
);

typedef _dart_atg_binary_cross_entropy = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Pointer<ffi.Void> weight,
  int reduction,
);

typedef _c_atg_binary_cross_entropy_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Pointer<ffi.Void> weight,
  ffi.Int64 reduction,
);

typedef _dart_atg_binary_cross_entropy_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Pointer<ffi.Void> weight,
  int reduction,
);

typedef _c_atg_binary_cross_entropy_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Pointer<ffi.Void> weight,
  ffi.Int64 reduction,
);

typedef _dart_atg_binary_cross_entropy_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Pointer<ffi.Void> weight,
  int reduction,
);

typedef _c_atg_binary_cross_entropy_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Pointer<ffi.Void> weight,
  ffi.Int64 reduction,
);

typedef _dart_atg_binary_cross_entropy_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Pointer<ffi.Void> weight,
  int reduction,
);

typedef _c_atg_binary_cross_entropy_with_logits = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> pos_weight,
  ffi.Int64 reduction,
);

typedef _dart_atg_binary_cross_entropy_with_logits = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> pos_weight,
  int reduction,
);

typedef _c_atg_binary_cross_entropy_with_logits_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> pos_weight,
  ffi.Int64 reduction,
);

typedef _dart_atg_binary_cross_entropy_with_logits_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> pos_weight,
  int reduction,
);

typedef _c_atg_bincount = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weights,
  ffi.Int64 minlength,
);

typedef _dart_atg_bincount = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weights,
  int minlength,
);

typedef _c_atg_binomial = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> count,
  ffi.Pointer<ffi.Void> prob,
);

typedef _dart_atg_binomial = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> count,
  ffi.Pointer<ffi.Void> prob,
);

typedef _c_atg_bitwise_and = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_bitwise_and = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_bitwise_and1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_bitwise_and1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_bitwise_and_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_bitwise_and_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_bitwise_and_1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_bitwise_and_1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_bitwise_and_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_bitwise_and_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_bitwise_and_out1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_bitwise_and_out1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_bitwise_not = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_bitwise_not = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_bitwise_not_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_bitwise_not_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_bitwise_not_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_bitwise_not_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_bitwise_or = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_bitwise_or = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_bitwise_or1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_bitwise_or1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_bitwise_or_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_bitwise_or_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_bitwise_or_1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_bitwise_or_1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_bitwise_or_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_bitwise_or_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_bitwise_or_out1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_bitwise_or_out1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_bitwise_xor = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_bitwise_xor = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_bitwise_xor1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_bitwise_xor1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_bitwise_xor_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_bitwise_xor_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_bitwise_xor_1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_bitwise_xor_1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_bitwise_xor_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_bitwise_xor_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_bitwise_xor_out1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_bitwise_xor_out1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_blackman_window = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Int64 window_length,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_blackman_window = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  int window_length,
  int options_kind,
  int options_device,
);

typedef _c_atg_blackman_window1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Int64 window_length,
  ffi.Int32 periodic,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_blackman_window1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  int window_length,
  int periodic,
  int options_kind,
  int options_device,
);

typedef _c_atg_block_diag = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
  ffi.Int32 tensors_len,
);

typedef _dart_atg_block_diag = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
  int tensors_len,
);

typedef _c_atg_bmm = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mat2,
);

typedef _dart_atg_bmm = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mat2,
);

typedef _c_atg_bmm_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mat2,
);

typedef _dart_atg_bmm_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mat2,
);

typedef _c_atg_broadcast_tensors = ffi.Pointer<ffi.Pointer<ffi.Void>> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
  ffi.Int32 tensors_len,
);

typedef _dart_atg_broadcast_tensors = ffi.Pointer<ffi.Pointer<ffi.Void>>
    Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
  int tensors_len,
);

typedef _c_atg_bucketize = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> boundaries,
  ffi.Int32 out_int32,
  ffi.Int32 right,
);

typedef _dart_atg_bucketize = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> boundaries,
  int out_int32,
  int right,
);

typedef _c_atg_bucketize1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self_scalar,
  ffi.Pointer<ffi.Void> boundaries,
  ffi.Int32 out_int32,
  ffi.Int32 right,
);

typedef _dart_atg_bucketize1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self_scalar,
  ffi.Pointer<ffi.Void> boundaries,
  int out_int32,
  int right,
);

typedef _c_atg_bucketize_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> boundaries,
  ffi.Int32 out_int32,
  ffi.Int32 right,
);

typedef _dart_atg_bucketize_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> boundaries,
  int out_int32,
  int right,
);

typedef _c_atg_cartesian_prod = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
  ffi.Int32 tensors_len,
);

typedef _dart_atg_cartesian_prod = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
  int tensors_len,
);

typedef _c_atg_cat = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
  ffi.Int32 tensors_len,
  ffi.Int64 dim,
);

typedef _dart_atg_cat = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
  int tensors_len,
  int dim,
);

typedef _c_atg_cat_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
  ffi.Int32 tensors_len,
  ffi.Int64 dim,
);

typedef _dart_atg_cat_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
  int tensors_len,
  int dim,
);

typedef _c_atg_cauchy_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Double median,
  ffi.Double sigma,
);

typedef _dart_atg_cauchy_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  double median,
  double sigma,
);

typedef _c_atg_cdist = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> x1,
  ffi.Pointer<ffi.Void> x2,
  ffi.Double p,
  ffi.Int64 compute_mode_v,
  ffi.Uint8 compute_mode_null,
);

typedef _dart_atg_cdist = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> x1,
  ffi.Pointer<ffi.Void> x2,
  double p,
  int compute_mode_v,
  int compute_mode_null,
);

typedef _c_atg_ceil = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_ceil = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_ceil_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_ceil_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_ceil_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_ceil_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_celu = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_celu = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_celu_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_celu_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_chain_matmul = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> matrices_data,
  ffi.Int32 matrices_len,
);

typedef _dart_atg_chain_matmul = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> matrices_data,
  int matrices_len,
);

typedef _c_atg_channel_shuffle = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 groups,
);

typedef _dart_atg_channel_shuffle = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int groups,
);

typedef _c_atg_cholesky = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 upper,
);

typedef _dart_atg_cholesky = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int upper,
);

typedef _c_atg_cholesky_inverse = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 upper,
);

typedef _dart_atg_cholesky_inverse = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int upper,
);

typedef _c_atg_cholesky_inverse_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 upper,
);

typedef _dart_atg_cholesky_inverse_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  int upper,
);

typedef _c_atg_cholesky_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 upper,
);

typedef _dart_atg_cholesky_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  int upper,
);

typedef _c_atg_cholesky_solve = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> input2,
  ffi.Int32 upper,
);

typedef _dart_atg_cholesky_solve = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> input2,
  int upper,
);

typedef _c_atg_cholesky_solve_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> input2,
  ffi.Int32 upper,
);

typedef _dart_atg_cholesky_solve_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> input2,
  int upper,
);

typedef _c_atg_chunk = ffi.Pointer<ffi.Pointer<ffi.Void>> Function(
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 chunks,
  ffi.Int64 dim,
);

typedef _dart_atg_chunk = ffi.Pointer<ffi.Pointer<ffi.Void>> Function(
  ffi.Pointer<ffi.Void> self,
  int chunks,
  int dim,
);

typedef _c_atg_clamp = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> min,
  ffi.Pointer<ffi.Void> max,
);

typedef _dart_atg_clamp = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> min,
  ffi.Pointer<ffi.Void> max,
);

typedef _c_atg_clamp_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> min,
  ffi.Pointer<ffi.Void> max,
);

typedef _dart_atg_clamp_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> min,
  ffi.Pointer<ffi.Void> max,
);

typedef _c_atg_clamp_max = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> max,
);

typedef _dart_atg_clamp_max = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> max,
);

typedef _c_atg_clamp_max_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> max,
);

typedef _dart_atg_clamp_max_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> max,
);

typedef _c_atg_clamp_max_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> max,
);

typedef _dart_atg_clamp_max_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> max,
);

typedef _c_atg_clamp_min = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> min,
);

typedef _dart_atg_clamp_min = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> min,
);

typedef _c_atg_clamp_min_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> min,
);

typedef _dart_atg_clamp_min_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> min,
);

typedef _c_atg_clamp_min_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> min,
);

typedef _dart_atg_clamp_min_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> min,
);

typedef _c_atg_clamp_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> min,
  ffi.Pointer<ffi.Void> max,
);

typedef _dart_atg_clamp_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> min,
  ffi.Pointer<ffi.Void> max,
);

typedef _c_atg_coalesce = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_coalesce = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_col2im = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
);

typedef _dart_atg_col2im = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
);

typedef _c_atg_col2im_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
);

typedef _dart_atg_col2im_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
);

typedef _c_atg_col2im_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
);

typedef _dart_atg_col2im_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
);

typedef _c_atg_col2im_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
);

typedef _dart_atg_col2im_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
);

typedef _c_atg_combinations = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 r,
  ffi.Int32 with_replacement,
);

typedef _dart_atg_combinations = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int r,
  int with_replacement,
);

typedef _c_atg_conj = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_conj = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_conj_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_conj_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_constant_pad_nd = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> pad_data,
  ffi.Int32 pad_len,
);

typedef _dart_atg_constant_pad_nd = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> pad_data,
  int pad_len,
);

typedef _c_atg_contiguous = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_contiguous = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_conv1d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int64 groups,
);

typedef _dart_atg_conv1d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int groups,
);

typedef _c_atg_conv2d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int64 groups,
);

typedef _dart_atg_conv2d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int groups,
);

typedef _c_atg_conv3d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int64 groups,
);

typedef _dart_atg_conv3d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int groups,
);

typedef _c_atg_conv_tbc = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Int64 pad,
);

typedef _dart_atg_conv_tbc = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  int pad,
);

typedef _c_atg_conv_tbc_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Int64 pad,
);

typedef _dart_atg_conv_tbc_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  int pad,
);

typedef _c_atg_conv_transpose1d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> output_padding_data,
  ffi.Int32 output_padding_len,
  ffi.Int64 groups,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
);

typedef _dart_atg_conv_transpose1d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> output_padding_data,
  int output_padding_len,
  int groups,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
);

typedef _c_atg_conv_transpose2d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> output_padding_data,
  ffi.Int32 output_padding_len,
  ffi.Int64 groups,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
);

typedef _dart_atg_conv_transpose2d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> output_padding_data,
  int output_padding_len,
  int groups,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
);

typedef _c_atg_conv_transpose3d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> output_padding_data,
  ffi.Int32 output_padding_len,
  ffi.Int64 groups,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
);

typedef _dart_atg_conv_transpose3d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> output_padding_data,
  int output_padding_len,
  int groups,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
);

typedef _c_atg_convolution = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int32 transposed,
  ffi.Pointer<ffi.Int64> output_padding_data,
  ffi.Int32 output_padding_len,
  ffi.Int64 groups,
);

typedef _dart_atg_convolution = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int transposed,
  ffi.Pointer<ffi.Int64> output_padding_data,
  int output_padding_len,
  int groups,
);

typedef _c_atg_convolution_overrideable = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int32 transposed,
  ffi.Pointer<ffi.Int64> output_padding_data,
  ffi.Int32 output_padding_len,
  ffi.Int64 groups,
);

typedef _dart_atg_convolution_overrideable = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int transposed,
  ffi.Pointer<ffi.Int64> output_padding_data,
  int output_padding_len,
  int groups,
);

typedef _c_atg_copy_sparse_to_sparse_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> src,
  ffi.Int32 non_blocking,
);

typedef _dart_atg_copy_sparse_to_sparse_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> src,
  int non_blocking,
);

typedef _c_atg_cos = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_cos = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_cos_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_cos_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_cos_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_cos_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_cosh = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_cosh = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_cosh_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_cosh_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_cosh_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_cosh_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_cosine_embedding_loss = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input1,
  ffi.Pointer<ffi.Void> input2,
  ffi.Pointer<ffi.Void> target,
  ffi.Double margin,
  ffi.Int64 reduction,
);

typedef _dart_atg_cosine_embedding_loss = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input1,
  ffi.Pointer<ffi.Void> input2,
  ffi.Pointer<ffi.Void> target,
  double margin,
  int reduction,
);

typedef _c_atg_cosine_similarity = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> x1,
  ffi.Pointer<ffi.Void> x2,
  ffi.Int64 dim,
  ffi.Double eps,
);

typedef _dart_atg_cosine_similarity = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> x1,
  ffi.Pointer<ffi.Void> x2,
  int dim,
  double eps,
);

typedef _c_atg_cross = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
  ffi.Int64 dim_v,
  ffi.Uint8 dim_null,
);

typedef _dart_atg_cross = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
  int dim_v,
  int dim_null,
);

typedef _c_atg_cross_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
  ffi.Int64 dim_v,
  ffi.Uint8 dim_null,
);

typedef _dart_atg_cross_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
  int dim_v,
  int dim_null,
);

typedef _c_atg_ctc_loss = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> log_probs,
  ffi.Pointer<ffi.Void> targets,
  ffi.Pointer<ffi.Int64> input_lengths_data,
  ffi.Int32 input_lengths_len,
  ffi.Pointer<ffi.Int64> target_lengths_data,
  ffi.Int32 target_lengths_len,
  ffi.Int64 blank,
  ffi.Int64 reduction,
  ffi.Int32 zero_infinity,
);

typedef _dart_atg_ctc_loss = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> log_probs,
  ffi.Pointer<ffi.Void> targets,
  ffi.Pointer<ffi.Int64> input_lengths_data,
  int input_lengths_len,
  ffi.Pointer<ffi.Int64> target_lengths_data,
  int target_lengths_len,
  int blank,
  int reduction,
  int zero_infinity,
);

typedef _c_atg_ctc_loss1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> log_probs,
  ffi.Pointer<ffi.Void> targets,
  ffi.Pointer<ffi.Void> input_lengths,
  ffi.Pointer<ffi.Void> target_lengths,
  ffi.Int64 blank,
  ffi.Int64 reduction,
  ffi.Int32 zero_infinity,
);

typedef _dart_atg_ctc_loss1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> log_probs,
  ffi.Pointer<ffi.Void> targets,
  ffi.Pointer<ffi.Void> input_lengths,
  ffi.Pointer<ffi.Void> target_lengths,
  int blank,
  int reduction,
  int zero_infinity,
);

typedef _c_atg_cudnn_affine_grid_generator = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> theta,
  ffi.Int64 n,
  ffi.Int64 C,
  ffi.Int64 H,
  ffi.Int64 W,
);

typedef _dart_atg_cudnn_affine_grid_generator = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> theta,
  int n,
  int C,
  int H,
  int W,
);

typedef _c_atg_cudnn_affine_grid_generator_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  ffi.Int64 n,
  ffi.Int64 C,
  ffi.Int64 H,
  ffi.Int64 W,
);

typedef _dart_atg_cudnn_affine_grid_generator_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  int n,
  int C,
  int H,
  int W,
);

typedef _c_atg_cudnn_batch_norm = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Void> running_mean,
  ffi.Pointer<ffi.Void> running_var,
  ffi.Int32 training,
  ffi.Double exponential_average_factor,
  ffi.Double epsilon,
);

typedef _dart_atg_cudnn_batch_norm = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Void> running_mean,
  ffi.Pointer<ffi.Void> running_var,
  int training,
  double exponential_average_factor,
  double epsilon,
);

typedef _c_atg_cudnn_batch_norm_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> running_mean,
  ffi.Pointer<ffi.Void> running_var,
  ffi.Pointer<ffi.Void> save_mean,
  ffi.Pointer<ffi.Void> save_var,
  ffi.Double epsilon,
  ffi.Pointer<ffi.Void> reserveSpace,
);

typedef _dart_atg_cudnn_batch_norm_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> running_mean,
  ffi.Pointer<ffi.Void> running_var,
  ffi.Pointer<ffi.Void> save_mean,
  ffi.Pointer<ffi.Void> save_var,
  double epsilon,
  ffi.Pointer<ffi.Void> reserveSpace,
);

typedef _c_atg_cudnn_convolution = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int64 groups,
  ffi.Int32 benchmark,
  ffi.Int32 deterministic,
);

typedef _dart_atg_cudnn_convolution = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int groups,
  int benchmark,
  int deterministic,
);

typedef _c_atg_cudnn_convolution1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int64 groups,
  ffi.Int32 benchmark,
  ffi.Int32 deterministic,
);

typedef _dart_atg_cudnn_convolution1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int groups,
  int benchmark,
  int deterministic,
);

typedef _c_atg_cudnn_convolution_backward_input = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> self_size_data,
  ffi.Int32 self_size_len,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int64 groups,
  ffi.Int32 benchmark,
  ffi.Int32 deterministic,
);

typedef _dart_atg_cudnn_convolution_backward_input = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> self_size_data,
  int self_size_len,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int groups,
  int benchmark,
  int deterministic,
);

typedef _c_atg_cudnn_convolution_backward_weight = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> weight_size_data,
  ffi.Int32 weight_size_len,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int64 groups,
  ffi.Int32 benchmark,
  ffi.Int32 deterministic,
);

typedef _dart_atg_cudnn_convolution_backward_weight = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> weight_size_data,
  int weight_size_len,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int groups,
  int benchmark,
  int deterministic,
);

typedef _c_atg_cudnn_convolution_transpose = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> output_padding_data,
  ffi.Int32 output_padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int64 groups,
  ffi.Int32 benchmark,
  ffi.Int32 deterministic,
);

typedef _dart_atg_cudnn_convolution_transpose = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> output_padding_data,
  int output_padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int groups,
  int benchmark,
  int deterministic,
);

typedef _c_atg_cudnn_convolution_transpose1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> output_padding_data,
  ffi.Int32 output_padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int64 groups,
  ffi.Int32 benchmark,
  ffi.Int32 deterministic,
);

typedef _dart_atg_cudnn_convolution_transpose1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> output_padding_data,
  int output_padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int groups,
  int benchmark,
  int deterministic,
);

typedef _c_atg_cudnn_convolution_transpose_backward_input = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int64 groups,
  ffi.Int32 benchmark,
  ffi.Int32 deterministic,
);

typedef _dart_atg_cudnn_convolution_transpose_backward_input = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int groups,
  int benchmark,
  int deterministic,
);

typedef _c_atg_cudnn_convolution_transpose_backward_weight = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> weight_size_data,
  ffi.Int32 weight_size_len,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int64 groups,
  ffi.Int32 benchmark,
  ffi.Int32 deterministic,
);

typedef _dart_atg_cudnn_convolution_transpose_backward_weight = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> weight_size_data,
  int weight_size_len,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int groups,
  int benchmark,
  int deterministic,
);

typedef _c_atg_cudnn_grid_sampler = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> grid,
);

typedef _dart_atg_cudnn_grid_sampler = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> grid,
);

typedef _c_atg_cudnn_grid_sampler_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> grid,
  ffi.Pointer<ffi.Void> grad_output,
);

typedef _dart_atg_cudnn_grid_sampler_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> grid,
  ffi.Pointer<ffi.Void> grad_output,
);

typedef _c_atg_cummax = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
);

typedef _dart_atg_cummax = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
);

typedef _c_atg_cummax_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> values,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
);

typedef _dart_atg_cummax_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> values,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> self,
  int dim,
);

typedef _c_atg_cummin = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
);

typedef _dart_atg_cummin = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
);

typedef _c_atg_cummin_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> values,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
);

typedef _dart_atg_cummin_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> values,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> self,
  int dim,
);

typedef _c_atg_cumprod = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int32 dtype,
);

typedef _dart_atg_cumprod = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int dtype,
);

typedef _c_atg_cumprod_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int32 dtype,
);

typedef _dart_atg_cumprod_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int dtype,
);

typedef _c_atg_cumsum = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int32 dtype,
);

typedef _dart_atg_cumsum = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int dtype,
);

typedef _c_atg_cumsum_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int32 dtype,
);

typedef _dart_atg_cumsum_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int dtype,
);

typedef _c_atg_data = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_data = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_deg2rad = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_deg2rad = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_deg2rad_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_deg2rad_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_deg2rad_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_deg2rad_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_dequantize = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_dequantize = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_dequantize1 = ffi.Pointer<ffi.Pointer<ffi.Void>> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
  ffi.Int32 tensors_len,
);

typedef _dart_atg_dequantize1 = ffi.Pointer<ffi.Pointer<ffi.Void>> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
  int tensors_len,
);

typedef _c_atg_det = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_det = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_detach = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_detach = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_detach_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_detach_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_diag = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 diagonal,
);

typedef _dart_atg_diag = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int diagonal,
);

typedef _c_atg_diag_embed = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 offset,
  ffi.Int64 dim1,
  ffi.Int64 dim2,
);

typedef _dart_atg_diag_embed = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int offset,
  int dim1,
  int dim2,
);

typedef _c_atg_diag_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 diagonal,
);

typedef _dart_atg_diag_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  int diagonal,
);

typedef _c_atg_diagflat = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 offset,
);

typedef _dart_atg_diagflat = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int offset,
);

typedef _c_atg_diagonal = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 offset,
  ffi.Int64 dim1,
  ffi.Int64 dim2,
);

typedef _dart_atg_diagonal = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int offset,
  int dim1,
  int dim2,
);

typedef _c_atg_digamma = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_digamma = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_digamma_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_digamma_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_digamma_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_digamma_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_dist = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_dist = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_div = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_div = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_div1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_div1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_div_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_div_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_div_1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_div_1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_div_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_div_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_dot = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> tensor,
);

typedef _dart_atg_dot = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> tensor,
);

typedef _c_atg_dot_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> tensor,
);

typedef _dart_atg_dot_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> tensor,
);

typedef _c_atg_dropout = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Double p,
  ffi.Int32 train,
);

typedef _dart_atg_dropout = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  double p,
  int train,
);

typedef _c_atg_dropout_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Double p,
  ffi.Int32 train,
);

typedef _dart_atg_dropout_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  double p,
  int train,
);

typedef _c_atg_eig = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 eigenvectors,
);

typedef _dart_atg_eig = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int eigenvectors,
);

typedef _c_atg_eig_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> e,
  ffi.Pointer<ffi.Void> v,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 eigenvectors,
);

typedef _dart_atg_eig_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> e,
  ffi.Pointer<ffi.Void> v,
  ffi.Pointer<ffi.Void> self,
  int eigenvectors,
);

typedef _c_atg_einsum = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int8> equation_ptr,
  ffi.Int32 equation_len,
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
  ffi.Int32 tensors_len,
);

typedef _dart_atg_einsum = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int8> equation_ptr,
  int equation_len,
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
  int tensors_len,
);

typedef _c_atg_elu = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_elu = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_elu_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_elu_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_elu_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> alpha,
  ffi.Pointer<ffi.Void> scale,
  ffi.Pointer<ffi.Void> input_scale,
  ffi.Pointer<ffi.Void> output,
);

typedef _dart_atg_elu_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> alpha,
  ffi.Pointer<ffi.Void> scale,
  ffi.Pointer<ffi.Void> input_scale,
  ffi.Pointer<ffi.Void> output,
);

typedef _c_atg_elu_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> alpha,
  ffi.Pointer<ffi.Void> scale,
  ffi.Pointer<ffi.Void> input_scale,
  ffi.Pointer<ffi.Void> output,
);

typedef _dart_atg_elu_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> alpha,
  ffi.Pointer<ffi.Void> scale,
  ffi.Pointer<ffi.Void> input_scale,
  ffi.Pointer<ffi.Void> output,
);

typedef _c_atg_elu_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_elu_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_embedding = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> indices,
  ffi.Int64 padding_idx,
  ffi.Int32 scale_grad_by_freq,
  ffi.Int32 sparse,
);

typedef _dart_atg_embedding = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> indices,
  int padding_idx,
  int scale_grad_by_freq,
  int sparse,
);

typedef _c_atg_embedding_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  ffi.Pointer<ffi.Void> indices,
  ffi.Int64 num_weights,
  ffi.Int64 padding_idx,
  ffi.Int32 scale_grad_by_freq,
  ffi.Int32 sparse,
);

typedef _dart_atg_embedding_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  ffi.Pointer<ffi.Void> indices,
  int num_weights,
  int padding_idx,
  int scale_grad_by_freq,
  int sparse,
);

typedef _c_atg_embedding_bag = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> offsets,
  ffi.Int32 scale_grad_by_freq,
  ffi.Int64 mode,
  ffi.Int32 sparse,
  ffi.Pointer<ffi.Void> per_sample_weights,
  ffi.Int32 include_last_offset,
);

typedef _dart_atg_embedding_bag = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> offsets,
  int scale_grad_by_freq,
  int mode,
  int sparse,
  ffi.Pointer<ffi.Void> per_sample_weights,
  int include_last_offset,
);

typedef _c_atg_embedding_dense_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> indices,
  ffi.Int64 num_weights,
  ffi.Int64 padding_idx,
  ffi.Int32 scale_grad_by_freq,
);

typedef _dart_atg_embedding_dense_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> indices,
  int num_weights,
  int padding_idx,
  int scale_grad_by_freq,
);

typedef _c_atg_embedding_renorm_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> indices,
  ffi.Double max_norm,
  ffi.Double norm_type,
);

typedef _dart_atg_embedding_renorm_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> indices,
  double max_norm,
  double norm_type,
);

typedef _c_atg_embedding_sparse_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  ffi.Pointer<ffi.Void> indices,
  ffi.Int64 num_weights,
  ffi.Int64 padding_idx,
  ffi.Int32 scale_grad_by_freq,
);

typedef _dart_atg_embedding_sparse_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  ffi.Pointer<ffi.Void> indices,
  int num_weights,
  int padding_idx,
  int scale_grad_by_freq,
);

typedef _c_atg_empty = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_empty = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
  int options_kind,
  int options_device,
);

typedef _c_atg_empty_like = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_empty_like = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_empty_meta = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_empty_meta = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
  int options_kind,
  int options_device,
);

typedef _c_atg_empty_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
);

typedef _dart_atg_empty_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
);

typedef _c_atg_empty_quantized = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
  ffi.Pointer<ffi.Void> qtensor,
);

typedef _dart_atg_empty_quantized = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
  ffi.Pointer<ffi.Void> qtensor,
);

typedef _c_atg_empty_strided = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_empty_strided = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  int options_kind,
  int options_device,
);

typedef _c_atg_eq = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_eq = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_eq1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_eq1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_eq_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_eq_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_eq_1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_eq_1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_eq_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_eq_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_eq_out1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_eq_out1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_erf = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_erf = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_erf_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_erf_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_erf_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_erf_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_erfc = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_erfc = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_erfc_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_erfc_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_erfc_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_erfc_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_erfinv = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_erfinv = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_erfinv_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_erfinv_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_erfinv_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_erfinv_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_exp = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_exp = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_exp_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_exp_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_exp_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_exp_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_expand = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
  ffi.Int32 implicit,
);

typedef _dart_atg_expand = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
  int implicit,
);

typedef _c_atg_expand_as = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_expand_as = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_expm1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_expm1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_expm1_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_expm1_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_expm1_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_expm1_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_exponential_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Double lambd,
);

typedef _dart_atg_exponential_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  double lambd,
);

typedef _c_atg_eye = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Int64 n,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_eye = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  int n,
  int options_kind,
  int options_device,
);

typedef _c_atg_eye1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Int64 n,
  ffi.Int64 m,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_eye1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  int n,
  int m,
  int options_kind,
  int options_device,
);

typedef _c_atg_eye_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Int64 n,
);

typedef _dart_atg_eye_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  int n,
);

typedef _c_atg_eye_out1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Int64 n,
  ffi.Int64 m,
);

typedef _dart_atg_eye_out1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  int n,
  int m,
);

typedef _c_atg_fake_quantize_per_channel_affine = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> scale,
  ffi.Pointer<ffi.Void> zero_point,
  ffi.Int64 axis,
  ffi.Int64 quant_min,
  ffi.Int64 quant_max,
);

typedef _dart_atg_fake_quantize_per_channel_affine = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> scale,
  ffi.Pointer<ffi.Void> zero_point,
  int axis,
  int quant_min,
  int quant_max,
);

typedef _c_atg_fake_quantize_per_channel_affine_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> scale,
  ffi.Pointer<ffi.Void> zero_point,
  ffi.Int64 axis,
  ffi.Int64 quant_min,
  ffi.Int64 quant_max,
);

typedef _dart_atg_fake_quantize_per_channel_affine_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> scale,
  ffi.Pointer<ffi.Void> zero_point,
  int axis,
  int quant_min,
  int quant_max,
);

typedef _c_atg_fake_quantize_per_tensor_affine = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Double scale,
  ffi.Int64 zero_point,
  ffi.Int64 quant_min,
  ffi.Int64 quant_max,
);

typedef _dart_atg_fake_quantize_per_tensor_affine = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  double scale,
  int zero_point,
  int quant_min,
  int quant_max,
);

typedef _c_atg_fake_quantize_per_tensor_affine_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  ffi.Pointer<ffi.Void> self,
  ffi.Double scale,
  ffi.Int64 zero_point,
  ffi.Int64 quant_min,
  ffi.Int64 quant_max,
);

typedef _dart_atg_fake_quantize_per_tensor_affine_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  ffi.Pointer<ffi.Void> self,
  double scale,
  int zero_point,
  int quant_min,
  int quant_max,
);

typedef _c_atg_fbgemm_linear_fp16_weight = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> packed_weight,
  ffi.Pointer<ffi.Void> bias,
);

typedef _dart_atg_fbgemm_linear_fp16_weight = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> packed_weight,
  ffi.Pointer<ffi.Void> bias,
);

typedef _c_atg_fbgemm_linear_fp16_weight_fp32_activation = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> packed_weight,
  ffi.Pointer<ffi.Void> bias,
);

typedef _dart_atg_fbgemm_linear_fp16_weight_fp32_activation = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> packed_weight,
  ffi.Pointer<ffi.Void> bias,
);

typedef _c_atg_fbgemm_linear_int8_weight = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> packed,
  ffi.Pointer<ffi.Void> col_offsets,
  ffi.Pointer<ffi.Void> weight_scale,
  ffi.Pointer<ffi.Void> weight_zero_point,
  ffi.Pointer<ffi.Void> bias,
);

typedef _dart_atg_fbgemm_linear_int8_weight = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> packed,
  ffi.Pointer<ffi.Void> col_offsets,
  ffi.Pointer<ffi.Void> weight_scale,
  ffi.Pointer<ffi.Void> weight_zero_point,
  ffi.Pointer<ffi.Void> bias,
);

typedef _c_atg_fbgemm_linear_int8_weight_fp32_activation = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> packed,
  ffi.Pointer<ffi.Void> col_offsets,
  ffi.Pointer<ffi.Void> weight_scale,
  ffi.Pointer<ffi.Void> weight_zero_point,
  ffi.Pointer<ffi.Void> bias,
);

typedef _dart_atg_fbgemm_linear_int8_weight_fp32_activation = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> packed,
  ffi.Pointer<ffi.Void> col_offsets,
  ffi.Pointer<ffi.Void> weight_scale,
  ffi.Pointer<ffi.Void> weight_zero_point,
  ffi.Pointer<ffi.Void> bias,
);

typedef _c_atg_fbgemm_pack_gemm_matrix_fp16 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
);

typedef _dart_atg_fbgemm_pack_gemm_matrix_fp16 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
);

typedef _c_atg_fbgemm_pack_quantized_matrix = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
);

typedef _dart_atg_fbgemm_pack_quantized_matrix = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
);

typedef _c_atg_fbgemm_pack_quantized_matrix1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Int64 K,
  ffi.Int64 n,
);

typedef _dart_atg_fbgemm_pack_quantized_matrix1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  int K,
  int n,
);

typedef _c_atg_feature_alpha_dropout = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Double p,
  ffi.Int32 train,
);

typedef _dart_atg_feature_alpha_dropout = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  double p,
  int train,
);

typedef _c_atg_feature_alpha_dropout_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Double p,
  ffi.Int32 train,
);

typedef _dart_atg_feature_alpha_dropout_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  double p,
  int train,
);

typedef _c_atg_feature_dropout = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Double p,
  ffi.Int32 train,
);

typedef _dart_atg_feature_dropout = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  double p,
  int train,
);

typedef _c_atg_feature_dropout_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Double p,
  ffi.Int32 train,
);

typedef _dart_atg_feature_dropout_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  double p,
  int train,
);

typedef _c_atg_fft = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 signal_ndim,
  ffi.Int32 normalized,
);

typedef _dart_atg_fft = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int signal_ndim,
  int normalized,
);

typedef _c_atg_fill_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> value,
);

typedef _dart_atg_fill_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> value,
);

typedef _c_atg_fill_1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> value,
);

typedef _dart_atg_fill_1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> value,
);

typedef _c_atg_fill_diagonal_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> fill_value,
  ffi.Int32 wrap,
);

typedef _dart_atg_fill_diagonal_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> fill_value,
  int wrap,
);

typedef _c_atg_flatten = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 start_dim,
  ffi.Int64 end_dim,
);

typedef _dart_atg_flatten = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int start_dim,
  int end_dim,
);

typedef _c_atg_flip = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dims_data,
  ffi.Int32 dims_len,
);

typedef _dart_atg_flip = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dims_data,
  int dims_len,
);

typedef _c_atg_fliplr = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_fliplr = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_flipud = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_flipud = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_floor = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_floor = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_floor_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_floor_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_floor_divide = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_floor_divide = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_floor_divide1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_floor_divide1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_floor_divide_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_floor_divide_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_floor_divide_1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_floor_divide_1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_floor_divide_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_floor_divide_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_floor_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_floor_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_fmod = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_fmod = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_fmod1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_fmod1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_fmod_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_fmod_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_fmod_1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_fmod_1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_fmod_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_fmod_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_fmod_out1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_fmod_out1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_frac = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_frac = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_frac_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_frac_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_frac_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_frac_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_fractional_max_pool2d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Pointer<ffi.Void> random_samples,
);

typedef _dart_atg_fractional_max_pool2d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  ffi.Pointer<ffi.Void> random_samples,
);

typedef _c_atg_fractional_max_pool2d_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Pointer<ffi.Void> indices,
);

typedef _dart_atg_fractional_max_pool2d_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  ffi.Pointer<ffi.Void> indices,
);

typedef _c_atg_fractional_max_pool2d_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Pointer<ffi.Void> indices,
);

typedef _dart_atg_fractional_max_pool2d_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  ffi.Pointer<ffi.Void> indices,
);

typedef _c_atg_fractional_max_pool2d_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> output,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Pointer<ffi.Void> random_samples,
);

typedef _dart_atg_fractional_max_pool2d_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> output,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  ffi.Pointer<ffi.Void> random_samples,
);

typedef _c_atg_fractional_max_pool3d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Pointer<ffi.Void> random_samples,
);

typedef _dart_atg_fractional_max_pool3d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  ffi.Pointer<ffi.Void> random_samples,
);

typedef _c_atg_fractional_max_pool3d_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Pointer<ffi.Void> indices,
);

typedef _dart_atg_fractional_max_pool3d_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  ffi.Pointer<ffi.Void> indices,
);

typedef _c_atg_fractional_max_pool3d_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Pointer<ffi.Void> indices,
);

typedef _dart_atg_fractional_max_pool3d_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  ffi.Pointer<ffi.Void> indices,
);

typedef _c_atg_fractional_max_pool3d_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> output,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Pointer<ffi.Void> random_samples,
);

typedef _dart_atg_fractional_max_pool3d_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> output,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  ffi.Pointer<ffi.Void> random_samples,
);

typedef _c_atg_frobenius_norm = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_frobenius_norm = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_frobenius_norm1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  ffi.Int32 dim_len,
  ffi.Int32 keepdim,
);

typedef _dart_atg_frobenius_norm1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  int dim_len,
  int keepdim,
);

typedef _c_atg_frobenius_norm_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  ffi.Int32 dim_len,
  ffi.Int32 keepdim,
);

typedef _dart_atg_frobenius_norm_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  int dim_len,
  int keepdim,
);

typedef _c_atg_from_file = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int8> filename_ptr,
  ffi.Int32 filename_len,
  ffi.Int32 shared,
  ffi.Int64 size_v,
  ffi.Uint8 size_null,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_from_file = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int8> filename_ptr,
  int filename_len,
  int shared,
  int size_v,
  int size_null,
  int options_kind,
  int options_device,
);

typedef _c_atg_full = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
  ffi.Pointer<ffi.Void> fill_value,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_full = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
  ffi.Pointer<ffi.Void> fill_value,
  int options_kind,
  int options_device,
);

typedef _c_atg_full_like = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> fill_value,
);

typedef _dart_atg_full_like = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> fill_value,
);

typedef _c_atg_full_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
  ffi.Pointer<ffi.Void> fill_value,
);

typedef _dart_atg_full_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
  ffi.Pointer<ffi.Void> fill_value,
);

typedef _c_atg_gather = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Pointer<ffi.Void> index,
  ffi.Int32 sparse_grad,
);

typedef _dart_atg_gather = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  ffi.Pointer<ffi.Void> index,
  int sparse_grad,
);

typedef _c_atg_gather_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Pointer<ffi.Void> index,
  ffi.Int32 sparse_grad,
);

typedef _dart_atg_gather_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  int dim,
  ffi.Pointer<ffi.Void> index,
  int sparse_grad,
);

typedef _c_atg_ge = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_ge = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_ge1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_ge1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_ge_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_ge_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_ge_1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_ge_1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_ge_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_ge_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_ge_out1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_ge_out1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_gelu = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_gelu = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_gelu_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_gelu_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_geometric_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Double p,
);

typedef _dart_atg_geometric_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  double p,
);

typedef _c_atg_geqrf = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_geqrf = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_geqrf_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> a,
  ffi.Pointer<ffi.Void> tau,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_geqrf_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> a,
  ffi.Pointer<ffi.Void> tau,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_ger = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> vec2,
);

typedef _dart_atg_ger = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> vec2,
);

typedef _c_atg_ger_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> vec2,
);

typedef _dart_atg_ger_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> vec2,
);

typedef _c_atg_glu = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
);

typedef _dart_atg_glu = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
);

typedef _c_atg_glu_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
);

typedef _dart_atg_glu_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  int dim,
);

typedef _c_atg_glu_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
);

typedef _dart_atg_glu_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  int dim,
);

typedef _c_atg_glu_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
);

typedef _dart_atg_glu_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  int dim,
);

typedef _c_atg_grad = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_grad = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_grid_sampler = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> grid,
  ffi.Int64 interpolation_mode,
  ffi.Int64 padding_mode,
  ffi.Int32 align_corners,
);

typedef _dart_atg_grid_sampler = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> grid,
  int interpolation_mode,
  int padding_mode,
  int align_corners,
);

typedef _c_atg_grid_sampler_2d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> grid,
  ffi.Int64 interpolation_mode,
  ffi.Int64 padding_mode,
  ffi.Int32 align_corners,
);

typedef _dart_atg_grid_sampler_2d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> grid,
  int interpolation_mode,
  int padding_mode,
  int align_corners,
);

typedef _c_atg_grid_sampler_2d_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> grid,
  ffi.Int64 interpolation_mode,
  ffi.Int64 padding_mode,
  ffi.Int32 align_corners,
);

typedef _dart_atg_grid_sampler_2d_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> grid,
  int interpolation_mode,
  int padding_mode,
  int align_corners,
);

typedef _c_atg_grid_sampler_3d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> grid,
  ffi.Int64 interpolation_mode,
  ffi.Int64 padding_mode,
  ffi.Int32 align_corners,
);

typedef _dart_atg_grid_sampler_3d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> grid,
  int interpolation_mode,
  int padding_mode,
  int align_corners,
);

typedef _c_atg_grid_sampler_3d_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> grid,
  ffi.Int64 interpolation_mode,
  ffi.Int64 padding_mode,
  ffi.Int32 align_corners,
);

typedef _dart_atg_grid_sampler_3d_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> grid,
  int interpolation_mode,
  int padding_mode,
  int align_corners,
);

typedef _c_atg_group_norm = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Int64 num_groups,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Double eps,
  ffi.Int32 cudnn_enabled,
);

typedef _dart_atg_group_norm = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  int num_groups,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  double eps,
  int cudnn_enabled,
);

typedef _c_atg_gru = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> hx,
  ffi.Pointer<ffi.Pointer<ffi.Void>> params_data,
  ffi.Int32 params_len,
  ffi.Int32 has_biases,
  ffi.Int64 num_layers,
  ffi.Double dropout,
  ffi.Int32 train,
  ffi.Int32 bidirectional,
  ffi.Int32 batch_first,
);

typedef _dart_atg_gru = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> hx,
  ffi.Pointer<ffi.Pointer<ffi.Void>> params_data,
  int params_len,
  int has_biases,
  int num_layers,
  double dropout,
  int train,
  int bidirectional,
  int batch_first,
);

typedef _c_atg_gru1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.Void> batch_sizes,
  ffi.Pointer<ffi.Void> hx,
  ffi.Pointer<ffi.Pointer<ffi.Void>> params_data,
  ffi.Int32 params_len,
  ffi.Int32 has_biases,
  ffi.Int64 num_layers,
  ffi.Double dropout,
  ffi.Int32 train,
  ffi.Int32 bidirectional,
);

typedef _dart_atg_gru1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.Void> batch_sizes,
  ffi.Pointer<ffi.Void> hx,
  ffi.Pointer<ffi.Pointer<ffi.Void>> params_data,
  int params_len,
  int has_biases,
  int num_layers,
  double dropout,
  int train,
  int bidirectional,
);

typedef _c_atg_gru_cell = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> hx,
  ffi.Pointer<ffi.Void> w_ih,
  ffi.Pointer<ffi.Void> w_hh,
  ffi.Pointer<ffi.Void> b_ih,
  ffi.Pointer<ffi.Void> b_hh,
);

typedef _dart_atg_gru_cell = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> hx,
  ffi.Pointer<ffi.Void> w_ih,
  ffi.Pointer<ffi.Void> w_hh,
  ffi.Pointer<ffi.Void> b_ih,
  ffi.Pointer<ffi.Void> b_hh,
);

typedef _c_atg_gt = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_gt = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_gt1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_gt1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_gt_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_gt_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_gt_1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_gt_1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_gt_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_gt_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_gt_out1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_gt_out1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_hamming_window = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Int64 window_length,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_hamming_window = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  int window_length,
  int options_kind,
  int options_device,
);

typedef _c_atg_hamming_window1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Int64 window_length,
  ffi.Int32 periodic,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_hamming_window1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  int window_length,
  int periodic,
  int options_kind,
  int options_device,
);

typedef _c_atg_hamming_window2 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Int64 window_length,
  ffi.Int32 periodic,
  ffi.Double alpha,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_hamming_window2 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  int window_length,
  int periodic,
  double alpha,
  int options_kind,
  int options_device,
);

typedef _c_atg_hamming_window3 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Int64 window_length,
  ffi.Int32 periodic,
  ffi.Double alpha,
  ffi.Double beta,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_hamming_window3 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  int window_length,
  int periodic,
  double alpha,
  double beta,
  int options_kind,
  int options_device,
);

typedef _c_atg_hann_window = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Int64 window_length,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_hann_window = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  int window_length,
  int options_kind,
  int options_device,
);

typedef _c_atg_hann_window1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Int64 window_length,
  ffi.Int32 periodic,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_hann_window1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  int window_length,
  int periodic,
  int options_kind,
  int options_device,
);

typedef _c_atg_hardshrink = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_hardshrink = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_hardshrink_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> lambd,
);

typedef _dart_atg_hardshrink_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> lambd,
);

typedef _c_atg_hardsigmoid = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_hardsigmoid = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_hardsigmoid_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_hardsigmoid_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_hardsigmoid_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_hardsigmoid_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_hardsigmoid_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_hardsigmoid_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_hardswish = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_hardswish = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_hardswish_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_hardswish_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_hardswish_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_hardswish_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_hardswish_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_hardswish_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_hardtanh = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_hardtanh = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_hardtanh_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_hardtanh_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_hardtanh_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> min_val,
  ffi.Pointer<ffi.Void> max_val,
);

typedef _dart_atg_hardtanh_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> min_val,
  ffi.Pointer<ffi.Void> max_val,
);

typedef _c_atg_hardtanh_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> min_val,
  ffi.Pointer<ffi.Void> max_val,
);

typedef _dart_atg_hardtanh_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> min_val,
  ffi.Pointer<ffi.Void> max_val,
);

typedef _c_atg_hardtanh_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_hardtanh_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_hinge_embedding_loss = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Double margin,
  ffi.Int64 reduction,
);

typedef _dart_atg_hinge_embedding_loss = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  double margin,
  int reduction,
);

typedef _c_atg_histc = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 bins,
);

typedef _dart_atg_histc = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int bins,
);

typedef _c_atg_histc_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 bins,
);

typedef _dart_atg_histc_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  int bins,
);

typedef _c_atg_hspmm = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> mat1,
  ffi.Pointer<ffi.Void> mat2,
);

typedef _dart_atg_hspmm = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> mat1,
  ffi.Pointer<ffi.Void> mat2,
);

typedef _c_atg_hspmm_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> mat1,
  ffi.Pointer<ffi.Void> mat2,
);

typedef _dart_atg_hspmm_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> mat1,
  ffi.Pointer<ffi.Void> mat2,
);

typedef _c_atg_ifft = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 signal_ndim,
  ffi.Int32 normalized,
);

typedef _dart_atg_ifft = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int signal_ndim,
  int normalized,
);

typedef _c_atg_im2col = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
);

typedef _dart_atg_im2col = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
);

typedef _c_atg_im2col_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> input_size_data,
  ffi.Int32 input_size_len,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
);

typedef _dart_atg_im2col_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> input_size_data,
  int input_size_len,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
);

typedef _c_atg_im2col_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> input_size_data,
  ffi.Int32 input_size_len,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
);

typedef _dart_atg_im2col_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> input_size_data,
  int input_size_len,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
);

typedef _c_atg_im2col_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
);

typedef _dart_atg_im2col_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
);

typedef _c_atg_imag = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_imag = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_index = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Pointer<ffi.Void>> indices_data,
  ffi.Int32 indices_len,
);

typedef _dart_atg_index = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Pointer<ffi.Void>> indices_data,
  int indices_len,
);

typedef _c_atg_index_add = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Pointer<ffi.Void> index,
  ffi.Pointer<ffi.Void> source,
);

typedef _dart_atg_index_add = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  ffi.Pointer<ffi.Void> index,
  ffi.Pointer<ffi.Void> source,
);

typedef _c_atg_index_add_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Pointer<ffi.Void> index,
  ffi.Pointer<ffi.Void> source,
);

typedef _dart_atg_index_add_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  ffi.Pointer<ffi.Void> index,
  ffi.Pointer<ffi.Void> source,
);

typedef _c_atg_index_copy = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Pointer<ffi.Void> index,
  ffi.Pointer<ffi.Void> source,
);

typedef _dart_atg_index_copy = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  ffi.Pointer<ffi.Void> index,
  ffi.Pointer<ffi.Void> source,
);

typedef _c_atg_index_copy_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Pointer<ffi.Void> index,
  ffi.Pointer<ffi.Void> source,
);

typedef _dart_atg_index_copy_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  ffi.Pointer<ffi.Void> index,
  ffi.Pointer<ffi.Void> source,
);

typedef _c_atg_index_fill = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Pointer<ffi.Void> index,
  ffi.Pointer<ffi.Void> value,
);

typedef _dart_atg_index_fill = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  ffi.Pointer<ffi.Void> index,
  ffi.Pointer<ffi.Void> value,
);

typedef _c_atg_index_fill1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Pointer<ffi.Void> index,
  ffi.Pointer<ffi.Void> value,
);

typedef _dart_atg_index_fill1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  ffi.Pointer<ffi.Void> index,
  ffi.Pointer<ffi.Void> value,
);

typedef _c_atg_index_fill_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Pointer<ffi.Void> index,
  ffi.Pointer<ffi.Void> value,
);

typedef _dart_atg_index_fill_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  ffi.Pointer<ffi.Void> index,
  ffi.Pointer<ffi.Void> value,
);

typedef _c_atg_index_fill_1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Pointer<ffi.Void> index,
  ffi.Pointer<ffi.Void> value,
);

typedef _dart_atg_index_fill_1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  ffi.Pointer<ffi.Void> index,
  ffi.Pointer<ffi.Void> value,
);

typedef _c_atg_index_put = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Pointer<ffi.Void>> indices_data,
  ffi.Int32 indices_len,
  ffi.Pointer<ffi.Void> values,
  ffi.Int32 accumulate,
);

typedef _dart_atg_index_put = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Pointer<ffi.Void>> indices_data,
  int indices_len,
  ffi.Pointer<ffi.Void> values,
  int accumulate,
);

typedef _c_atg_index_put_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Pointer<ffi.Void>> indices_data,
  ffi.Int32 indices_len,
  ffi.Pointer<ffi.Void> values,
  ffi.Int32 accumulate,
);

typedef _dart_atg_index_put_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Pointer<ffi.Void>> indices_data,
  int indices_len,
  ffi.Pointer<ffi.Void> values,
  int accumulate,
);

typedef _c_atg_index_select = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Pointer<ffi.Void> index,
);

typedef _dart_atg_index_select = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  ffi.Pointer<ffi.Void> index,
);

typedef _c_atg_index_select_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Pointer<ffi.Void> index,
);

typedef _dart_atg_index_select_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  int dim,
  ffi.Pointer<ffi.Void> index,
);

typedef _c_atg_indices = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_indices = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_instance_norm = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Void> running_mean,
  ffi.Pointer<ffi.Void> running_var,
  ffi.Int32 use_input_stats,
  ffi.Double momentum,
  ffi.Double eps,
  ffi.Int32 cudnn_enabled,
);

typedef _dart_atg_instance_norm = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Void> running_mean,
  ffi.Pointer<ffi.Void> running_var,
  int use_input_stats,
  double momentum,
  double eps,
  int cudnn_enabled,
);

typedef _c_atg_int_repr = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_int_repr = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_inverse = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_inverse = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_inverse_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_inverse_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_irfft = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 signal_ndim,
  ffi.Int32 normalized,
  ffi.Int32 onesided,
  ffi.Pointer<ffi.Int64> signal_sizes_data,
  ffi.Int32 signal_sizes_len,
);

typedef _dart_atg_irfft = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int signal_ndim,
  int normalized,
  int onesided,
  ffi.Pointer<ffi.Int64> signal_sizes_data,
  int signal_sizes_len,
);

typedef _c_atg_isclose = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
  ffi.Double rtol,
  ffi.Double atol,
  ffi.Int32 equal_nan,
);

typedef _dart_atg_isclose = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
  double rtol,
  double atol,
  int equal_nan,
);

typedef _c_atg_isfinite = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_isfinite = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_isinf = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_isinf = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_isnan = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_isnan = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_istft = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 n_fft,
  ffi.Int64 hop_length_v,
  ffi.Uint8 hop_length_null,
  ffi.Int64 win_length_v,
  ffi.Uint8 win_length_null,
  ffi.Pointer<ffi.Void> window,
  ffi.Int32 center,
  ffi.Int32 normalized,
  ffi.Int32 onesided,
  ffi.Int64 length_v,
  ffi.Uint8 length_null,
);

typedef _dart_atg_istft = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int n_fft,
  int hop_length_v,
  int hop_length_null,
  int win_length_v,
  int win_length_null,
  ffi.Pointer<ffi.Void> window,
  int center,
  int normalized,
  int onesided,
  int length_v,
  int length_null,
);

typedef _c_atg_kl_div = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Int64 reduction,
  ffi.Int32 log_target,
);

typedef _dart_atg_kl_div = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  int reduction,
  int log_target,
);

typedef _c_atg_kl_div_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Int64 reduction,
  ffi.Int32 log_target,
);

typedef _dart_atg_kl_div_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  int reduction,
  int log_target,
);

typedef _c_atg_kthvalue = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 k,
  ffi.Int64 dim,
  ffi.Int32 keepdim,
);

typedef _dart_atg_kthvalue = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int k,
  int dim,
  int keepdim,
);

typedef _c_atg_kthvalue_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> values,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 k,
  ffi.Int64 dim,
  ffi.Int32 keepdim,
);

typedef _dart_atg_kthvalue_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> values,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> self,
  int k,
  int dim,
  int keepdim,
);

typedef _c_atg_l1_loss = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Int64 reduction,
);

typedef _dart_atg_l1_loss = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  int reduction,
);

typedef _c_atg_l1_loss_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Int64 reduction,
);

typedef _dart_atg_l1_loss_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  int reduction,
);

typedef _c_atg_l1_loss_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Int64 reduction,
);

typedef _dart_atg_l1_loss_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  int reduction,
);

typedef _c_atg_l1_loss_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Int64 reduction,
);

typedef _dart_atg_l1_loss_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  int reduction,
);

typedef _c_atg_layer_norm = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Int64> normalized_shape_data,
  ffi.Int32 normalized_shape_len,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Double eps,
  ffi.Int32 cudnn_enable,
);

typedef _dart_atg_layer_norm = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Int64> normalized_shape_data,
  int normalized_shape_len,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  double eps,
  int cudnn_enable,
);

typedef _c_atg_le = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_le = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_le1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_le1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_le_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_le_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_le_1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_le_1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_le_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_le_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_le_out1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_le_out1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_leaky_relu = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_leaky_relu = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_leaky_relu_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_leaky_relu_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_leaky_relu_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> negative_slope,
  ffi.Int32 self_is_result,
);

typedef _dart_atg_leaky_relu_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> negative_slope,
  int self_is_result,
);

typedef _c_atg_leaky_relu_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_leaky_relu_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_lerp = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> end,
  ffi.Pointer<ffi.Void> weight,
);

typedef _dart_atg_lerp = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> end,
  ffi.Pointer<ffi.Void> weight,
);

typedef _c_atg_lerp1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> end,
  ffi.Pointer<ffi.Void> weight,
);

typedef _dart_atg_lerp1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> end,
  ffi.Pointer<ffi.Void> weight,
);

typedef _c_atg_lerp_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> end,
  ffi.Pointer<ffi.Void> weight,
);

typedef _dart_atg_lerp_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> end,
  ffi.Pointer<ffi.Void> weight,
);

typedef _c_atg_lerp_1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> end,
  ffi.Pointer<ffi.Void> weight,
);

typedef _dart_atg_lerp_1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> end,
  ffi.Pointer<ffi.Void> weight,
);

typedef _c_atg_lerp_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> end,
  ffi.Pointer<ffi.Void> weight,
);

typedef _dart_atg_lerp_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> end,
  ffi.Pointer<ffi.Void> weight,
);

typedef _c_atg_lerp_out1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> end,
  ffi.Pointer<ffi.Void> weight,
);

typedef _dart_atg_lerp_out1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> end,
  ffi.Pointer<ffi.Void> weight,
);

typedef _c_atg_lgamma = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_lgamma = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_lgamma_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_lgamma_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_lgamma_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_lgamma_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_linear = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
);

typedef _dart_atg_linear = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
);

typedef _c_atg_linspace = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> start,
  ffi.Pointer<ffi.Void> end,
  ffi.Int64 steps,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_linspace = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> start,
  ffi.Pointer<ffi.Void> end,
  int steps,
  int options_kind,
  int options_device,
);

typedef _c_atg_linspace_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> start,
  ffi.Pointer<ffi.Void> end,
  ffi.Int64 steps,
);

typedef _dart_atg_linspace_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> start,
  ffi.Pointer<ffi.Void> end,
  int steps,
);

typedef _c_atg_log = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_log = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_log10 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_log10 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_log10_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_log10_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_log10_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_log10_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_log1p = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_log1p = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_log1p_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_log1p_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_log1p_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_log1p_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_log2 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_log2 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_log2_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_log2_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_log2_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_log2_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_log_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_log_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_log_normal_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Double mean,
  ffi.Double std,
);

typedef _dart_atg_log_normal_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  double mean,
  double std,
);

typedef _c_atg_log_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_log_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_log_sigmoid = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_log_sigmoid = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_log_sigmoid_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> buffer,
);

typedef _dart_atg_log_sigmoid_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> buffer,
);

typedef _c_atg_log_sigmoid_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> buffer,
);

typedef _dart_atg_log_sigmoid_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> buffer,
);

typedef _c_atg_log_sigmoid_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_log_sigmoid_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_log_softmax = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int32 dtype,
);

typedef _dart_atg_log_softmax = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int dtype,
);

typedef _c_atg_logaddexp = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_logaddexp = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_logaddexp2 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_logaddexp2 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_logaddexp2_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_logaddexp2_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_logaddexp_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_logaddexp_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_logcumsumexp = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
);

typedef _dart_atg_logcumsumexp = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
);

typedef _c_atg_logcumsumexp_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
);

typedef _dart_atg_logcumsumexp_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  int dim,
);

typedef _c_atg_logdet = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_logdet = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_logical_and = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_logical_and = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_logical_and_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_logical_and_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_logical_and_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_logical_and_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_logical_not = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_logical_not = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_logical_not_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_logical_not_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_logical_not_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_logical_not_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_logical_or = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_logical_or = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_logical_or_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_logical_or_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_logical_or_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_logical_or_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_logical_xor = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_logical_xor = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_logical_xor_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_logical_xor_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_logical_xor_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_logical_xor_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_logspace = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> start,
  ffi.Pointer<ffi.Void> end,
  ffi.Int64 steps,
  ffi.Double base,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_logspace = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> start,
  ffi.Pointer<ffi.Void> end,
  int steps,
  double base,
  int options_kind,
  int options_device,
);

typedef _c_atg_logspace_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> start,
  ffi.Pointer<ffi.Void> end,
  ffi.Int64 steps,
  ffi.Double base,
);

typedef _dart_atg_logspace_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> start,
  ffi.Pointer<ffi.Void> end,
  int steps,
  double base,
);

typedef _c_atg_logsumexp = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  ffi.Int32 dim_len,
  ffi.Int32 keepdim,
);

typedef _dart_atg_logsumexp = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  int dim_len,
  int keepdim,
);

typedef _c_atg_logsumexp_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  ffi.Int32 dim_len,
  ffi.Int32 keepdim,
);

typedef _dart_atg_logsumexp_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  int dim_len,
  int keepdim,
);

typedef _c_atg_lstm = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Pointer<ffi.Void>> hx_data,
  ffi.Int32 hx_len,
  ffi.Pointer<ffi.Pointer<ffi.Void>> params_data,
  ffi.Int32 params_len,
  ffi.Int32 has_biases,
  ffi.Int64 num_layers,
  ffi.Double dropout,
  ffi.Int32 train,
  ffi.Int32 bidirectional,
  ffi.Int32 batch_first,
);

typedef _dart_atg_lstm = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Pointer<ffi.Void>> hx_data,
  int hx_len,
  ffi.Pointer<ffi.Pointer<ffi.Void>> params_data,
  int params_len,
  int has_biases,
  int num_layers,
  double dropout,
  int train,
  int bidirectional,
  int batch_first,
);

typedef _c_atg_lstm1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.Void> batch_sizes,
  ffi.Pointer<ffi.Pointer<ffi.Void>> hx_data,
  ffi.Int32 hx_len,
  ffi.Pointer<ffi.Pointer<ffi.Void>> params_data,
  ffi.Int32 params_len,
  ffi.Int32 has_biases,
  ffi.Int64 num_layers,
  ffi.Double dropout,
  ffi.Int32 train,
  ffi.Int32 bidirectional,
);

typedef _dart_atg_lstm1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.Void> batch_sizes,
  ffi.Pointer<ffi.Pointer<ffi.Void>> hx_data,
  int hx_len,
  ffi.Pointer<ffi.Pointer<ffi.Void>> params_data,
  int params_len,
  int has_biases,
  int num_layers,
  double dropout,
  int train,
  int bidirectional,
);

typedef _c_atg_lstm_cell = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Pointer<ffi.Void>> hx_data,
  ffi.Int32 hx_len,
  ffi.Pointer<ffi.Void> w_ih,
  ffi.Pointer<ffi.Void> w_hh,
  ffi.Pointer<ffi.Void> b_ih,
  ffi.Pointer<ffi.Void> b_hh,
);

typedef _dart_atg_lstm_cell = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Pointer<ffi.Void>> hx_data,
  int hx_len,
  ffi.Pointer<ffi.Void> w_ih,
  ffi.Pointer<ffi.Void> w_hh,
  ffi.Pointer<ffi.Void> b_ih,
  ffi.Pointer<ffi.Void> b_hh,
);

typedef _c_atg_lstsq = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> A,
);

typedef _dart_atg_lstsq = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> A,
);

typedef _c_atg_lstsq_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> X,
  ffi.Pointer<ffi.Void> qr,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> A,
);

typedef _dart_atg_lstsq_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> X,
  ffi.Pointer<ffi.Void> qr,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> A,
);

typedef _c_atg_lt = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_lt = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_lt1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_lt1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_lt_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_lt_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_lt_1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_lt_1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_lt_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_lt_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_lt_out1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_lt_out1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_lu_solve = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> LU_data,
  ffi.Pointer<ffi.Void> LU_pivots,
);

typedef _dart_atg_lu_solve = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> LU_data,
  ffi.Pointer<ffi.Void> LU_pivots,
);

typedef _c_atg_lu_solve_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> LU_data,
  ffi.Pointer<ffi.Void> LU_pivots,
);

typedef _dart_atg_lu_solve_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> LU_data,
  ffi.Pointer<ffi.Void> LU_pivots,
);

typedef _c_atg_margin_ranking_loss = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input1,
  ffi.Pointer<ffi.Void> input2,
  ffi.Pointer<ffi.Void> target,
  ffi.Double margin,
  ffi.Int64 reduction,
);

typedef _dart_atg_margin_ranking_loss = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input1,
  ffi.Pointer<ffi.Void> input2,
  ffi.Pointer<ffi.Void> target,
  double margin,
  int reduction,
);

typedef _c_atg_masked_fill = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mask,
  ffi.Pointer<ffi.Void> value,
);

typedef _dart_atg_masked_fill = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mask,
  ffi.Pointer<ffi.Void> value,
);

typedef _c_atg_masked_fill1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mask,
  ffi.Pointer<ffi.Void> value,
);

typedef _dart_atg_masked_fill1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mask,
  ffi.Pointer<ffi.Void> value,
);

typedef _c_atg_masked_fill_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mask,
  ffi.Pointer<ffi.Void> value,
);

typedef _dart_atg_masked_fill_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mask,
  ffi.Pointer<ffi.Void> value,
);

typedef _c_atg_masked_fill_1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mask,
  ffi.Pointer<ffi.Void> value,
);

typedef _dart_atg_masked_fill_1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mask,
  ffi.Pointer<ffi.Void> value,
);

typedef _c_atg_masked_scatter = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mask,
  ffi.Pointer<ffi.Void> source,
);

typedef _dart_atg_masked_scatter = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mask,
  ffi.Pointer<ffi.Void> source,
);

typedef _c_atg_masked_scatter_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mask,
  ffi.Pointer<ffi.Void> source,
);

typedef _dart_atg_masked_scatter_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mask,
  ffi.Pointer<ffi.Void> source,
);

typedef _c_atg_masked_select = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mask,
);

typedef _dart_atg_masked_select = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mask,
);

typedef _c_atg_masked_select_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mask,
);

typedef _dart_atg_masked_select_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mask,
);

typedef _c_atg_matmul = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_matmul = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_matmul_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_matmul_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_matrix_power = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 n,
);

typedef _dart_atg_matrix_power = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int n,
);

typedef _c_atg_matrix_rank = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 symmetric,
);

typedef _dart_atg_matrix_rank = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int symmetric,
);

typedef _c_atg_matrix_rank1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Double tol,
  ffi.Int32 symmetric,
);

typedef _dart_atg_matrix_rank1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  double tol,
  int symmetric,
);

typedef _c_atg_max = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_max = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_max1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_max1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_max2 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int32 keepdim,
);

typedef _dart_atg_max2 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int keepdim,
);

typedef _c_atg_max_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_max_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_max_out1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> max,
  ffi.Pointer<ffi.Void> max_values,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int32 keepdim,
);

typedef _dart_atg_max_out1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> max,
  ffi.Pointer<ffi.Void> max_values,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int keepdim,
);

typedef _c_atg_max_pool1d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int32 ceil_mode,
);

typedef _dart_atg_max_pool1d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int ceil_mode,
);

typedef _c_atg_max_pool1d_with_indices = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int32 ceil_mode,
);

typedef _dart_atg_max_pool1d_with_indices = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int ceil_mode,
);

typedef _c_atg_max_pool2d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int32 ceil_mode,
);

typedef _dart_atg_max_pool2d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int ceil_mode,
);

typedef _c_atg_max_pool2d_with_indices = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int32 ceil_mode,
);

typedef _dart_atg_max_pool2d_with_indices = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int ceil_mode,
);

typedef _c_atg_max_pool2d_with_indices_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int32 ceil_mode,
  ffi.Pointer<ffi.Void> indices,
);

typedef _dart_atg_max_pool2d_with_indices_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int ceil_mode,
  ffi.Pointer<ffi.Void> indices,
);

typedef _c_atg_max_pool2d_with_indices_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int32 ceil_mode,
  ffi.Pointer<ffi.Void> indices,
);

typedef _dart_atg_max_pool2d_with_indices_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int ceil_mode,
  ffi.Pointer<ffi.Void> indices,
);

typedef _c_atg_max_pool2d_with_indices_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int32 ceil_mode,
);

typedef _dart_atg_max_pool2d_with_indices_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int ceil_mode,
);

typedef _c_atg_max_pool3d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int32 ceil_mode,
);

typedef _dart_atg_max_pool3d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int ceil_mode,
);

typedef _c_atg_max_pool3d_with_indices = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int32 ceil_mode,
);

typedef _dart_atg_max_pool3d_with_indices = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int ceil_mode,
);

typedef _c_atg_max_pool3d_with_indices_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int32 ceil_mode,
  ffi.Pointer<ffi.Void> indices,
);

typedef _dart_atg_max_pool3d_with_indices_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int ceil_mode,
  ffi.Pointer<ffi.Void> indices,
);

typedef _c_atg_max_pool3d_with_indices_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int32 ceil_mode,
  ffi.Pointer<ffi.Void> indices,
);

typedef _dart_atg_max_pool3d_with_indices_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int ceil_mode,
  ffi.Pointer<ffi.Void> indices,
);

typedef _c_atg_max_pool3d_with_indices_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int32 ceil_mode,
);

typedef _dart_atg_max_pool3d_with_indices_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int ceil_mode,
);

typedef _c_atg_max_unpool2d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
);

typedef _dart_atg_max_unpool2d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
);

typedef _c_atg_max_unpool2d_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
);

typedef _dart_atg_max_unpool2d_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
);

typedef _c_atg_max_unpool2d_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
);

typedef _dart_atg_max_unpool2d_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
);

typedef _c_atg_max_unpool2d_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
);

typedef _dart_atg_max_unpool2d_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
);

typedef _c_atg_max_unpool3d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
);

typedef _dart_atg_max_unpool3d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
);

typedef _c_atg_max_unpool3d_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
);

typedef _dart_atg_max_unpool3d_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
);

typedef _c_atg_max_unpool3d_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
);

typedef _dart_atg_max_unpool3d_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
);

typedef _c_atg_max_unpool3d_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
);

typedef _dart_atg_max_unpool3d_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
);

typedef _c_atg_max_values = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  ffi.Int32 dim_len,
  ffi.Int32 keepdim,
);

typedef _dart_atg_max_values = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  int dim_len,
  int keepdim,
);

typedef _c_atg_mean = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 dtype,
);

typedef _dart_atg_mean = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dtype,
);

typedef _c_atg_mean1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  ffi.Int32 dim_len,
  ffi.Int32 keepdim,
  ffi.Int32 dtype,
);

typedef _dart_atg_mean1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  int dim_len,
  int keepdim,
  int dtype,
);

typedef _c_atg_mean_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  ffi.Int32 dim_len,
  ffi.Int32 keepdim,
  ffi.Int32 dtype,
);

typedef _dart_atg_mean_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  int dim_len,
  int keepdim,
  int dtype,
);

typedef _c_atg_median = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_median = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_median1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int32 keepdim,
);

typedef _dart_atg_median1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int keepdim,
);

typedef _c_atg_median_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> values,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int32 keepdim,
);

typedef _dart_atg_median_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> values,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int keepdim,
);

typedef _c_atg_meshgrid = ffi.Pointer<ffi.Pointer<ffi.Void>> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
  ffi.Int32 tensors_len,
);

typedef _dart_atg_meshgrid = ffi.Pointer<ffi.Pointer<ffi.Void>> Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
  int tensors_len,
);

typedef _c_atg_min = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_min = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_min1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_min1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_min2 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int32 keepdim,
);

typedef _dart_atg_min2 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int keepdim,
);

typedef _c_atg_min_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_min_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_min_out1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> min,
  ffi.Pointer<ffi.Void> min_indices,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int32 keepdim,
);

typedef _dart_atg_min_out1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> min,
  ffi.Pointer<ffi.Void> min_indices,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int keepdim,
);

typedef _c_atg_min_values = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  ffi.Int32 dim_len,
  ffi.Int32 keepdim,
);

typedef _dart_atg_min_values = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  int dim_len,
  int keepdim,
);

typedef _c_atg_miopen_batch_norm = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Void> running_mean,
  ffi.Pointer<ffi.Void> running_var,
  ffi.Int32 training,
  ffi.Double exponential_average_factor,
  ffi.Double epsilon,
);

typedef _dart_atg_miopen_batch_norm = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Void> running_mean,
  ffi.Pointer<ffi.Void> running_var,
  int training,
  double exponential_average_factor,
  double epsilon,
);

typedef _c_atg_miopen_batch_norm_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> running_mean,
  ffi.Pointer<ffi.Void> running_var,
  ffi.Pointer<ffi.Void> save_mean,
  ffi.Pointer<ffi.Void> save_var,
  ffi.Double epsilon,
);

typedef _dart_atg_miopen_batch_norm_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> running_mean,
  ffi.Pointer<ffi.Void> running_var,
  ffi.Pointer<ffi.Void> save_mean,
  ffi.Pointer<ffi.Void> save_var,
  double epsilon,
);

typedef _c_atg_miopen_convolution = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int64 groups,
  ffi.Int32 benchmark,
  ffi.Int32 deterministic,
);

typedef _dart_atg_miopen_convolution = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int groups,
  int benchmark,
  int deterministic,
);

typedef _c_atg_miopen_convolution_backward_bias = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
);

typedef _dart_atg_miopen_convolution_backward_bias = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
);

typedef _c_atg_miopen_convolution_backward_input = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> self_size_data,
  ffi.Int32 self_size_len,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int64 groups,
  ffi.Int32 benchmark,
  ffi.Int32 deterministic,
);

typedef _dart_atg_miopen_convolution_backward_input = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> self_size_data,
  int self_size_len,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int groups,
  int benchmark,
  int deterministic,
);

typedef _c_atg_miopen_convolution_backward_weight = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> weight_size_data,
  ffi.Int32 weight_size_len,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int64 groups,
  ffi.Int32 benchmark,
  ffi.Int32 deterministic,
);

typedef _dart_atg_miopen_convolution_backward_weight = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> weight_size_data,
  int weight_size_len,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int groups,
  int benchmark,
  int deterministic,
);

typedef _c_atg_miopen_convolution_transpose = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> output_padding_data,
  ffi.Int32 output_padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int64 groups,
  ffi.Int32 benchmark,
  ffi.Int32 deterministic,
);

typedef _dart_atg_miopen_convolution_transpose = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> output_padding_data,
  int output_padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int groups,
  int benchmark,
  int deterministic,
);

typedef _c_atg_miopen_convolution_transpose_backward_input = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int64 groups,
  ffi.Int32 benchmark,
  ffi.Int32 deterministic,
);

typedef _dart_atg_miopen_convolution_transpose_backward_input = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int groups,
  int benchmark,
  int deterministic,
);

typedef _c_atg_miopen_convolution_transpose_backward_weight = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> weight_size_data,
  ffi.Int32 weight_size_len,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int64 groups,
  ffi.Int32 benchmark,
  ffi.Int32 deterministic,
);

typedef _dart_atg_miopen_convolution_transpose_backward_weight = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> weight_size_data,
  int weight_size_len,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int groups,
  int benchmark,
  int deterministic,
);

typedef _c_atg_miopen_depthwise_convolution = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int64 groups,
  ffi.Int32 benchmark,
  ffi.Int32 deterministic,
);

typedef _dart_atg_miopen_depthwise_convolution = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int groups,
  int benchmark,
  int deterministic,
);

typedef _c_atg_miopen_depthwise_convolution_backward_input = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> self_size_data,
  ffi.Int32 self_size_len,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int64 groups,
  ffi.Int32 benchmark,
  ffi.Int32 deterministic,
);

typedef _dart_atg_miopen_depthwise_convolution_backward_input = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> self_size_data,
  int self_size_len,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int groups,
  int benchmark,
  int deterministic,
);

typedef _c_atg_miopen_depthwise_convolution_backward_weight = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> weight_size_data,
  ffi.Int32 weight_size_len,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int64 groups,
  ffi.Int32 benchmark,
  ffi.Int32 deterministic,
);

typedef _dart_atg_miopen_depthwise_convolution_backward_weight = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> weight_size_data,
  int weight_size_len,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int groups,
  int benchmark,
  int deterministic,
);

typedef _c_atg_miopen_rnn = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Pointer<ffi.Void>> weight_data,
  ffi.Int32 weight_len,
  ffi.Int64 weight_stride0,
  ffi.Pointer<ffi.Void> hx,
  ffi.Pointer<ffi.Void> cx,
  ffi.Int64 mode,
  ffi.Int64 hidden_size,
  ffi.Int64 num_layers,
  ffi.Int32 batch_first,
  ffi.Double dropout,
  ffi.Int32 train,
  ffi.Int32 bidirectional,
  ffi.Pointer<ffi.Int64> batch_sizes_data,
  ffi.Int32 batch_sizes_len,
  ffi.Pointer<ffi.Void> dropout_state,
);

typedef _dart_atg_miopen_rnn = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Pointer<ffi.Void>> weight_data,
  int weight_len,
  int weight_stride0,
  ffi.Pointer<ffi.Void> hx,
  ffi.Pointer<ffi.Void> cx,
  int mode,
  int hidden_size,
  int num_layers,
  int batch_first,
  double dropout,
  int train,
  int bidirectional,
  ffi.Pointer<ffi.Int64> batch_sizes_data,
  int batch_sizes_len,
  ffi.Pointer<ffi.Void> dropout_state,
);

typedef _c_atg_mkldnn_adaptive_avg_pool2d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
);

typedef _dart_atg_mkldnn_adaptive_avg_pool2d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
);

typedef _c_atg_mkldnn_convolution = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int64 groups,
);

typedef _dart_atg_mkldnn_convolution = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int groups,
);

typedef _c_atg_mkldnn_convolution_backward_input = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> self_size_data,
  ffi.Int32 self_size_len,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int64 groups,
  ffi.Int32 bias_defined,
);

typedef _dart_atg_mkldnn_convolution_backward_input = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> self_size_data,
  int self_size_len,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int groups,
  int bias_defined,
);

typedef _c_atg_mkldnn_convolution_backward_weights = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> weight_size_data,
  ffi.Int32 weight_size_len,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int64 groups,
  ffi.Int32 bias_defined,
);

typedef _dart_atg_mkldnn_convolution_backward_weights = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> weight_size_data,
  int weight_size_len,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int groups,
  int bias_defined,
);

typedef _c_atg_mkldnn_linear = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
);

typedef _dart_atg_mkldnn_linear = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
);

typedef _c_atg_mkldnn_max_pool2d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int32 ceil_mode,
);

typedef _dart_atg_mkldnn_max_pool2d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int ceil_mode,
);

typedef _c_atg_mkldnn_reorder_conv2d_weight = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int64 groups,
);

typedef _dart_atg_mkldnn_reorder_conv2d_weight = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int groups,
);

typedef _c_atg_mm = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mat2,
);

typedef _dart_atg_mm = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mat2,
);

typedef _c_atg_mm_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mat2,
);

typedef _dart_atg_mm_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mat2,
);

typedef _c_atg_mode = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int32 keepdim,
);

typedef _dart_atg_mode = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int keepdim,
);

typedef _c_atg_mode_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> values,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int32 keepdim,
);

typedef _dart_atg_mode_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> values,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int keepdim,
);

typedef _c_atg_mse_loss = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Int64 reduction,
);

typedef _dart_atg_mse_loss = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  int reduction,
);

typedef _c_atg_mse_loss_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Int64 reduction,
);

typedef _dart_atg_mse_loss_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  int reduction,
);

typedef _c_atg_mse_loss_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Int64 reduction,
);

typedef _dart_atg_mse_loss_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  int reduction,
);

typedef _c_atg_mse_loss_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Int64 reduction,
);

typedef _dart_atg_mse_loss_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  int reduction,
);

typedef _c_atg_mul = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_mul = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_mul1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_mul1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_mul_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_mul_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_mul_1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_mul_1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_mul_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_mul_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_multi_margin_loss_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Pointer<ffi.Void> p,
  ffi.Pointer<ffi.Void> margin,
  ffi.Pointer<ffi.Void> weight,
  ffi.Int64 reduction,
);

typedef _dart_atg_multi_margin_loss_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Pointer<ffi.Void> p,
  ffi.Pointer<ffi.Void> margin,
  ffi.Pointer<ffi.Void> weight,
  int reduction,
);

typedef _c_atg_multi_margin_loss_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Pointer<ffi.Void> p,
  ffi.Pointer<ffi.Void> margin,
  ffi.Pointer<ffi.Void> weight,
  ffi.Int64 reduction,
);

typedef _dart_atg_multi_margin_loss_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Pointer<ffi.Void> p,
  ffi.Pointer<ffi.Void> margin,
  ffi.Pointer<ffi.Void> weight,
  int reduction,
);

typedef _c_atg_multilabel_margin_loss = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Int64 reduction,
);

typedef _dart_atg_multilabel_margin_loss = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  int reduction,
);

typedef _c_atg_multilabel_margin_loss_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Int64 reduction,
  ffi.Pointer<ffi.Void> is_target,
);

typedef _dart_atg_multilabel_margin_loss_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  int reduction,
  ffi.Pointer<ffi.Void> is_target,
);

typedef _c_atg_multilabel_margin_loss_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Int64 reduction,
  ffi.Pointer<ffi.Void> is_target,
);

typedef _dart_atg_multilabel_margin_loss_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  int reduction,
  ffi.Pointer<ffi.Void> is_target,
);

typedef _c_atg_multilabel_margin_loss_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Int64 reduction,
);

typedef _dart_atg_multilabel_margin_loss_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  int reduction,
);

typedef _c_atg_multinomial = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 num_samples,
  ffi.Int32 replacement,
);

typedef _dart_atg_multinomial = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int num_samples,
  int replacement,
);

typedef _c_atg_multinomial_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 num_samples,
  ffi.Int32 replacement,
);

typedef _dart_atg_multinomial_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  int num_samples,
  int replacement,
);

typedef _c_atg_mv = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> vec,
);

typedef _dart_atg_mv = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> vec,
);

typedef _c_atg_mv_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> vec,
);

typedef _dart_atg_mv_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> vec,
);

typedef _c_atg_mvlgamma = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 p,
);

typedef _dart_atg_mvlgamma = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int p,
);

typedef _c_atg_mvlgamma_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 p,
);

typedef _dart_atg_mvlgamma_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int p,
);

typedef _c_atg_narrow = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int64 start,
  ffi.Int64 length,
);

typedef _dart_atg_narrow = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int start,
  int length,
);

typedef _c_atg_narrow1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Pointer<ffi.Void> start,
  ffi.Int64 length,
);

typedef _dart_atg_narrow1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  ffi.Pointer<ffi.Void> start,
  int length,
);

typedef _c_atg_narrow_copy = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int64 start,
  ffi.Int64 length,
);

typedef _dart_atg_narrow_copy = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int start,
  int length,
);

typedef _c_atg_native_batch_norm = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Void> running_mean,
  ffi.Pointer<ffi.Void> running_var,
  ffi.Int32 training,
  ffi.Double momentum,
  ffi.Double eps,
);

typedef _dart_atg_native_batch_norm = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Void> running_mean,
  ffi.Pointer<ffi.Void> running_var,
  int training,
  double momentum,
  double eps,
);

typedef _c_atg_native_batch_norm_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> save_mean,
  ffi.Pointer<ffi.Void> save_invstd,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Void> running_mean,
  ffi.Pointer<ffi.Void> running_var,
  ffi.Int32 training,
  ffi.Double momentum,
  ffi.Double eps,
);

typedef _dart_atg_native_batch_norm_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> save_mean,
  ffi.Pointer<ffi.Void> save_invstd,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Void> running_mean,
  ffi.Pointer<ffi.Void> running_var,
  int training,
  double momentum,
  double eps,
);

typedef _c_atg_native_group_norm = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Int64 n,
  ffi.Int64 C,
  ffi.Int64 HxW,
  ffi.Int64 group,
  ffi.Double eps,
);

typedef _dart_atg_native_group_norm = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  int n,
  int C,
  int HxW,
  int group,
  double eps,
);

typedef _c_atg_native_layer_norm = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Int64 M,
  ffi.Int64 n,
  ffi.Double eps,
);

typedef _dart_atg_native_layer_norm = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  int M,
  int n,
  double eps,
);

typedef _c_atg_native_norm = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_native_norm = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_ne = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_ne = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_ne1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_ne1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_ne_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_ne_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_ne_1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_ne_1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_ne_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_ne_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_ne_out1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_ne_out1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_neg = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_neg = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_neg_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_neg_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_neg_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_neg_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_new_empty = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_new_empty = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
  int options_kind,
  int options_device,
);

typedef _c_atg_new_full = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
  ffi.Pointer<ffi.Void> fill_value,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_new_full = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
  ffi.Pointer<ffi.Void> fill_value,
  int options_kind,
  int options_device,
);

typedef _c_atg_new_zeros = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_new_zeros = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
  int options_kind,
  int options_device,
);

typedef _c_atg_nll_loss = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Pointer<ffi.Void> weight,
  ffi.Int64 reduction,
  ffi.Int64 ignore_index,
);

typedef _dart_atg_nll_loss = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Pointer<ffi.Void> weight,
  int reduction,
  int ignore_index,
);

typedef _c_atg_nll_loss2d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Pointer<ffi.Void> weight,
  ffi.Int64 reduction,
  ffi.Int64 ignore_index,
);

typedef _dart_atg_nll_loss2d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Pointer<ffi.Void> weight,
  int reduction,
  int ignore_index,
);

typedef _c_atg_nll_loss2d_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Pointer<ffi.Void> weight,
  ffi.Int64 reduction,
  ffi.Int64 ignore_index,
  ffi.Pointer<ffi.Void> total_weight,
);

typedef _dart_atg_nll_loss2d_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Pointer<ffi.Void> weight,
  int reduction,
  int ignore_index,
  ffi.Pointer<ffi.Void> total_weight,
);

typedef _c_atg_nll_loss2d_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Pointer<ffi.Void> weight,
  ffi.Int64 reduction,
  ffi.Int64 ignore_index,
  ffi.Pointer<ffi.Void> total_weight,
);

typedef _dart_atg_nll_loss2d_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Pointer<ffi.Void> weight,
  int reduction,
  int ignore_index,
  ffi.Pointer<ffi.Void> total_weight,
);

typedef _c_atg_nll_loss2d_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Pointer<ffi.Void> weight,
  ffi.Int64 reduction,
  ffi.Int64 ignore_index,
);

typedef _dart_atg_nll_loss2d_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Pointer<ffi.Void> weight,
  int reduction,
  int ignore_index,
);

typedef _c_atg_nll_loss_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Pointer<ffi.Void> weight,
  ffi.Int64 reduction,
  ffi.Int64 ignore_index,
  ffi.Pointer<ffi.Void> total_weight,
);

typedef _dart_atg_nll_loss_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Pointer<ffi.Void> weight,
  int reduction,
  int ignore_index,
  ffi.Pointer<ffi.Void> total_weight,
);

typedef _c_atg_nll_loss_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Pointer<ffi.Void> weight,
  ffi.Int64 reduction,
  ffi.Int64 ignore_index,
  ffi.Pointer<ffi.Void> total_weight,
);

typedef _dart_atg_nll_loss_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Pointer<ffi.Void> weight,
  int reduction,
  int ignore_index,
  ffi.Pointer<ffi.Void> total_weight,
);

typedef _c_atg_nll_loss_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Pointer<ffi.Void> weight,
  ffi.Int64 reduction,
  ffi.Int64 ignore_index,
);

typedef _dart_atg_nll_loss_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Pointer<ffi.Void> weight,
  int reduction,
  int ignore_index,
);

typedef _c_atg_nonzero = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_nonzero = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_nonzero_numpy = ffi.Pointer<ffi.Pointer<ffi.Void>> Function(
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_nonzero_numpy = ffi.Pointer<ffi.Pointer<ffi.Void>> Function(
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_nonzero_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_nonzero_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_norm = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_norm = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_norm1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> p,
  ffi.Int32 dtype,
);

typedef _dart_atg_norm1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> p,
  int dtype,
);

typedef _c_atg_norm2 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> p,
  ffi.Pointer<ffi.Int64> dim_data,
  ffi.Int32 dim_len,
  ffi.Int32 keepdim,
);

typedef _dart_atg_norm2 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> p,
  ffi.Pointer<ffi.Int64> dim_data,
  int dim_len,
  int keepdim,
);

typedef _c_atg_norm3 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> p,
  ffi.Pointer<ffi.Int64> dim_data,
  ffi.Int32 dim_len,
  ffi.Int32 keepdim,
  ffi.Int32 dtype,
);

typedef _dart_atg_norm3 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> p,
  ffi.Pointer<ffi.Int64> dim_data,
  int dim_len,
  int keepdim,
  int dtype,
);

typedef _c_atg_norm_except_dim = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> v,
  ffi.Int64 pow,
  ffi.Int64 dim,
);

typedef _dart_atg_norm_except_dim = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> v,
  int pow,
  int dim,
);

typedef _c_atg_norm_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> p,
  ffi.Pointer<ffi.Int64> dim_data,
  ffi.Int32 dim_len,
  ffi.Int32 keepdim,
);

typedef _dart_atg_norm_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> p,
  ffi.Pointer<ffi.Int64> dim_data,
  int dim_len,
  int keepdim,
);

typedef _c_atg_norm_out1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> p,
  ffi.Pointer<ffi.Int64> dim_data,
  ffi.Int32 dim_len,
  ffi.Int32 keepdim,
  ffi.Int32 dtype,
);

typedef _dart_atg_norm_out1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> p,
  ffi.Pointer<ffi.Int64> dim_data,
  int dim_len,
  int keepdim,
  int dtype,
);

typedef _c_atg_normal_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Double mean,
  ffi.Double std,
);

typedef _dart_atg_normal_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  double mean,
  double std,
);

typedef _c_atg_normal_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> mean,
  ffi.Double std,
);

typedef _dart_atg_normal_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> mean,
  double std,
);

typedef _c_atg_normal_out1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Double mean,
  ffi.Pointer<ffi.Void> std,
);

typedef _dart_atg_normal_out1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  double mean,
  ffi.Pointer<ffi.Void> std,
);

typedef _c_atg_normal_out2 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> mean,
  ffi.Pointer<ffi.Void> std,
);

typedef _dart_atg_normal_out2 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> mean,
  ffi.Pointer<ffi.Void> std,
);

typedef _c_atg_normal_out3 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Double mean,
  ffi.Double std,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
);

typedef _dart_atg_normal_out3 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  double mean,
  double std,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
);

typedef _c_atg_nuclear_norm = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 keepdim,
);

typedef _dart_atg_nuclear_norm = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int keepdim,
);

typedef _c_atg_nuclear_norm1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  ffi.Int32 dim_len,
  ffi.Int32 keepdim,
);

typedef _dart_atg_nuclear_norm1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  int dim_len,
  int keepdim,
);

typedef _c_atg_nuclear_norm_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 keepdim,
);

typedef _dart_atg_nuclear_norm_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  int keepdim,
);

typedef _c_atg_nuclear_norm_out1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  ffi.Int32 dim_len,
  ffi.Int32 keepdim,
);

typedef _dart_atg_nuclear_norm_out1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  int dim_len,
  int keepdim,
);

typedef _c_atg_numpy_t = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_numpy_t = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_one_hot = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 num_classes,
);

typedef _dart_atg_one_hot = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int num_classes,
);

typedef _c_atg_ones = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_ones = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
  int options_kind,
  int options_device,
);

typedef _c_atg_ones_like = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_ones_like = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_ones_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
);

typedef _dart_atg_ones_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
);

typedef _c_atg_orgqr = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> input2,
);

typedef _dart_atg_orgqr = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> input2,
);

typedef _c_atg_orgqr_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> input2,
);

typedef _dart_atg_orgqr_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> input2,
);

typedef _c_atg_ormqr = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> input2,
  ffi.Pointer<ffi.Void> input3,
  ffi.Int32 left,
  ffi.Int32 transpose,
);

typedef _dart_atg_ormqr = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> input2,
  ffi.Pointer<ffi.Void> input3,
  int left,
  int transpose,
);

typedef _c_atg_ormqr_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> input2,
  ffi.Pointer<ffi.Void> input3,
  ffi.Int32 left,
  ffi.Int32 transpose,
);

typedef _dart_atg_ormqr_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> input2,
  ffi.Pointer<ffi.Void> input3,
  int left,
  int transpose,
);

typedef _c_atg_pairwise_distance = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> x1,
  ffi.Pointer<ffi.Void> x2,
  ffi.Double p,
  ffi.Double eps,
  ffi.Int32 keepdim,
);

typedef _dart_atg_pairwise_distance = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> x1,
  ffi.Pointer<ffi.Void> x2,
  double p,
  double eps,
  int keepdim,
);

typedef _c_atg_pdist = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Double p,
);

typedef _dart_atg_pdist = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  double p,
);

typedef _c_atg_permute = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dims_data,
  ffi.Int32 dims_len,
);

typedef _dart_atg_permute = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dims_data,
  int dims_len,
);

typedef _c_atg_pin_memory = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_pin_memory = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_pinverse = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Double rcond,
);

typedef _dart_atg_pinverse = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  double rcond,
);

typedef _c_atg_pixel_shuffle = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 upscale_factor,
);

typedef _dart_atg_pixel_shuffle = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int upscale_factor,
);

typedef _c_atg_poisson = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_poisson = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_poisson_nll_loss = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> target,
  ffi.Int32 log_input,
  ffi.Int32 full,
  ffi.Double eps,
  ffi.Int64 reduction,
);

typedef _dart_atg_poisson_nll_loss = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> target,
  int log_input,
  int full,
  double eps,
  int reduction,
);

typedef _c_atg_polygamma = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Int64 n,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_polygamma = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  int n,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_polygamma_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 n,
);

typedef _dart_atg_polygamma_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int n,
);

typedef _c_atg_polygamma_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Int64 n,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_polygamma_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  int n,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_pow = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> exponent,
);

typedef _dart_atg_pow = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> exponent,
);

typedef _c_atg_pow1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> exponent,
);

typedef _dart_atg_pow1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> exponent,
);

typedef _c_atg_pow2 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self_scalar,
  ffi.Pointer<ffi.Void> exponent,
);

typedef _dart_atg_pow2 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self_scalar,
  ffi.Pointer<ffi.Void> exponent,
);

typedef _c_atg_pow_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> exponent,
);

typedef _dart_atg_pow_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> exponent,
);

typedef _c_atg_pow_1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> exponent,
);

typedef _dart_atg_pow_1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> exponent,
);

typedef _c_atg_pow_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> exponent,
);

typedef _dart_atg_pow_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> exponent,
);

typedef _c_atg_pow_out1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> exponent,
);

typedef _dart_atg_pow_out1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> exponent,
);

typedef _c_atg_pow_out2 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self_scalar,
  ffi.Pointer<ffi.Void> exponent,
);

typedef _dart_atg_pow_out2 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self_scalar,
  ffi.Pointer<ffi.Void> exponent,
);

typedef _c_atg_prelu = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
);

typedef _dart_atg_prelu = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
);

typedef _c_atg_prelu_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
);

typedef _dart_atg_prelu_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
);

typedef _c_atg_prod = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 dtype,
);

typedef _dart_atg_prod = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dtype,
);

typedef _c_atg_prod1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int32 keepdim,
  ffi.Int32 dtype,
);

typedef _dart_atg_prod1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int keepdim,
  int dtype,
);

typedef _c_atg_prod_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int32 keepdim,
  ffi.Int32 dtype,
);

typedef _dart_atg_prod_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int keepdim,
  int dtype,
);

typedef _c_atg_put_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> index,
  ffi.Pointer<ffi.Void> source,
  ffi.Int32 accumulate,
);

typedef _dart_atg_put_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> index,
  ffi.Pointer<ffi.Void> source,
  int accumulate,
);

typedef _c_atg_q_per_channel_scales = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_q_per_channel_scales = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_q_per_channel_zero_points = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_q_per_channel_zero_points = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_qr = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 some,
);

typedef _dart_atg_qr = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int some,
);

typedef _c_atg_qr_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> Q,
  ffi.Pointer<ffi.Void> R,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 some,
);

typedef _dart_atg_qr_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> Q,
  ffi.Pointer<ffi.Void> R,
  ffi.Pointer<ffi.Void> self,
  int some,
);

typedef _c_atg_quantize_per_channel = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> scales,
  ffi.Pointer<ffi.Void> zero_points,
  ffi.Int64 axis,
  ffi.Int32 dtype,
);

typedef _dart_atg_quantize_per_channel = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> scales,
  ffi.Pointer<ffi.Void> zero_points,
  int axis,
  int dtype,
);

typedef _c_atg_quantize_per_tensor = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Double scale,
  ffi.Int64 zero_point,
  ffi.Int32 dtype,
);

typedef _dart_atg_quantize_per_tensor = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  double scale,
  int zero_point,
  int dtype,
);

typedef _c_atg_quantize_per_tensor1 = ffi.Pointer<ffi.Pointer<ffi.Void>>
    Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
  ffi.Int32 tensors_len,
  ffi.Pointer<ffi.Void> scales,
  ffi.Pointer<ffi.Void> zero_points,
  ffi.Int32 dtype,
);

typedef _dart_atg_quantize_per_tensor1 = ffi.Pointer<ffi.Pointer<ffi.Void>>
    Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
  int tensors_len,
  ffi.Pointer<ffi.Void> scales,
  ffi.Pointer<ffi.Void> zero_points,
  int dtype,
);

typedef _c_atg_quantized_batch_norm = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Void> mean,
  ffi.Pointer<ffi.Void> var_1,
  ffi.Double eps,
  ffi.Double output_scale,
  ffi.Int64 output_zero_point,
);

typedef _dart_atg_quantized_batch_norm = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Void> mean,
  ffi.Pointer<ffi.Void> var_1,
  double eps,
  double output_scale,
  int output_zero_point,
);

typedef _c_atg_quantized_gru_cell = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> hx,
  ffi.Pointer<ffi.Void> w_ih,
  ffi.Pointer<ffi.Void> w_hh,
  ffi.Pointer<ffi.Void> b_ih,
  ffi.Pointer<ffi.Void> b_hh,
  ffi.Pointer<ffi.Void> packed_ih,
  ffi.Pointer<ffi.Void> packed_hh,
  ffi.Pointer<ffi.Void> col_offsets_ih,
  ffi.Pointer<ffi.Void> col_offsets_hh,
  ffi.Pointer<ffi.Void> scale_ih,
  ffi.Pointer<ffi.Void> scale_hh,
  ffi.Pointer<ffi.Void> zero_point_ih,
  ffi.Pointer<ffi.Void> zero_point_hh,
);

typedef _dart_atg_quantized_gru_cell = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> hx,
  ffi.Pointer<ffi.Void> w_ih,
  ffi.Pointer<ffi.Void> w_hh,
  ffi.Pointer<ffi.Void> b_ih,
  ffi.Pointer<ffi.Void> b_hh,
  ffi.Pointer<ffi.Void> packed_ih,
  ffi.Pointer<ffi.Void> packed_hh,
  ffi.Pointer<ffi.Void> col_offsets_ih,
  ffi.Pointer<ffi.Void> col_offsets_hh,
  ffi.Pointer<ffi.Void> scale_ih,
  ffi.Pointer<ffi.Void> scale_hh,
  ffi.Pointer<ffi.Void> zero_point_ih,
  ffi.Pointer<ffi.Void> zero_point_hh,
);

typedef _c_atg_quantized_lstm_cell = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Pointer<ffi.Void>> hx_data,
  ffi.Int32 hx_len,
  ffi.Pointer<ffi.Void> w_ih,
  ffi.Pointer<ffi.Void> w_hh,
  ffi.Pointer<ffi.Void> b_ih,
  ffi.Pointer<ffi.Void> b_hh,
  ffi.Pointer<ffi.Void> packed_ih,
  ffi.Pointer<ffi.Void> packed_hh,
  ffi.Pointer<ffi.Void> col_offsets_ih,
  ffi.Pointer<ffi.Void> col_offsets_hh,
  ffi.Pointer<ffi.Void> scale_ih,
  ffi.Pointer<ffi.Void> scale_hh,
  ffi.Pointer<ffi.Void> zero_point_ih,
  ffi.Pointer<ffi.Void> zero_point_hh,
);

typedef _dart_atg_quantized_lstm_cell = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Pointer<ffi.Void>> hx_data,
  int hx_len,
  ffi.Pointer<ffi.Void> w_ih,
  ffi.Pointer<ffi.Void> w_hh,
  ffi.Pointer<ffi.Void> b_ih,
  ffi.Pointer<ffi.Void> b_hh,
  ffi.Pointer<ffi.Void> packed_ih,
  ffi.Pointer<ffi.Void> packed_hh,
  ffi.Pointer<ffi.Void> col_offsets_ih,
  ffi.Pointer<ffi.Void> col_offsets_hh,
  ffi.Pointer<ffi.Void> scale_ih,
  ffi.Pointer<ffi.Void> scale_hh,
  ffi.Pointer<ffi.Void> zero_point_ih,
  ffi.Pointer<ffi.Void> zero_point_hh,
);

typedef _c_atg_quantized_max_pool2d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
  ffi.Int32 ceil_mode,
);

typedef _dart_atg_quantized_max_pool2d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
  int ceil_mode,
);

typedef _c_atg_quantized_rnn_relu_cell = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> hx,
  ffi.Pointer<ffi.Void> w_ih,
  ffi.Pointer<ffi.Void> w_hh,
  ffi.Pointer<ffi.Void> b_ih,
  ffi.Pointer<ffi.Void> b_hh,
  ffi.Pointer<ffi.Void> packed_ih,
  ffi.Pointer<ffi.Void> packed_hh,
  ffi.Pointer<ffi.Void> col_offsets_ih,
  ffi.Pointer<ffi.Void> col_offsets_hh,
  ffi.Pointer<ffi.Void> scale_ih,
  ffi.Pointer<ffi.Void> scale_hh,
  ffi.Pointer<ffi.Void> zero_point_ih,
  ffi.Pointer<ffi.Void> zero_point_hh,
);

typedef _dart_atg_quantized_rnn_relu_cell = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> hx,
  ffi.Pointer<ffi.Void> w_ih,
  ffi.Pointer<ffi.Void> w_hh,
  ffi.Pointer<ffi.Void> b_ih,
  ffi.Pointer<ffi.Void> b_hh,
  ffi.Pointer<ffi.Void> packed_ih,
  ffi.Pointer<ffi.Void> packed_hh,
  ffi.Pointer<ffi.Void> col_offsets_ih,
  ffi.Pointer<ffi.Void> col_offsets_hh,
  ffi.Pointer<ffi.Void> scale_ih,
  ffi.Pointer<ffi.Void> scale_hh,
  ffi.Pointer<ffi.Void> zero_point_ih,
  ffi.Pointer<ffi.Void> zero_point_hh,
);

typedef _c_atg_quantized_rnn_tanh_cell = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> hx,
  ffi.Pointer<ffi.Void> w_ih,
  ffi.Pointer<ffi.Void> w_hh,
  ffi.Pointer<ffi.Void> b_ih,
  ffi.Pointer<ffi.Void> b_hh,
  ffi.Pointer<ffi.Void> packed_ih,
  ffi.Pointer<ffi.Void> packed_hh,
  ffi.Pointer<ffi.Void> col_offsets_ih,
  ffi.Pointer<ffi.Void> col_offsets_hh,
  ffi.Pointer<ffi.Void> scale_ih,
  ffi.Pointer<ffi.Void> scale_hh,
  ffi.Pointer<ffi.Void> zero_point_ih,
  ffi.Pointer<ffi.Void> zero_point_hh,
);

typedef _dart_atg_quantized_rnn_tanh_cell = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> hx,
  ffi.Pointer<ffi.Void> w_ih,
  ffi.Pointer<ffi.Void> w_hh,
  ffi.Pointer<ffi.Void> b_ih,
  ffi.Pointer<ffi.Void> b_hh,
  ffi.Pointer<ffi.Void> packed_ih,
  ffi.Pointer<ffi.Void> packed_hh,
  ffi.Pointer<ffi.Void> col_offsets_ih,
  ffi.Pointer<ffi.Void> col_offsets_hh,
  ffi.Pointer<ffi.Void> scale_ih,
  ffi.Pointer<ffi.Void> scale_hh,
  ffi.Pointer<ffi.Void> zero_point_ih,
  ffi.Pointer<ffi.Void> zero_point_hh,
);

typedef _c_atg_rad2deg = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_rad2deg = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_rad2deg_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_rad2deg_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_rad2deg_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_rad2deg_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_rand = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_rand = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
  int options_kind,
  int options_device,
);

typedef _c_atg_rand_like = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_rand_like = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_rand_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
);

typedef _dart_atg_rand_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
);

typedef _c_atg_randint = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Int64 high,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_randint = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  int high,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
  int options_kind,
  int options_device,
);

typedef _c_atg_randint1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Int64 low,
  ffi.Int64 high,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_randint1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  int low,
  int high,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
  int options_kind,
  int options_device,
);

typedef _c_atg_randint_like = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 high,
);

typedef _dart_atg_randint_like = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int high,
);

typedef _c_atg_randint_like1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 low,
  ffi.Int64 high,
);

typedef _dart_atg_randint_like1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int low,
  int high,
);

typedef _c_atg_randint_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Int64 high,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
);

typedef _dart_atg_randint_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  int high,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
);

typedef _c_atg_randint_out1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Int64 low,
  ffi.Int64 high,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
);

typedef _dart_atg_randint_out1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  int low,
  int high,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
);

typedef _c_atg_randn = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_randn = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
  int options_kind,
  int options_device,
);

typedef _c_atg_randn_like = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_randn_like = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_randn_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
);

typedef _dart_atg_randn_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
);

typedef _c_atg_random_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_random_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_random_1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 to,
);

typedef _dart_atg_random_1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int to,
);

typedef _c_atg_random_2 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 from,
  ffi.Int64 to_v,
  ffi.Uint8 to_null,
);

typedef _dart_atg_random_2 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int from,
  int to_v,
  int to_null,
);

typedef _c_atg_randperm = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Int64 n,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_randperm = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  int n,
  int options_kind,
  int options_device,
);

typedef _c_atg_randperm_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Int64 n,
);

typedef _dart_atg_randperm_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  int n,
);

typedef _c_atg_range = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> start,
  ffi.Pointer<ffi.Void> end,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_range = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> start,
  ffi.Pointer<ffi.Void> end,
  int options_kind,
  int options_device,
);

typedef _c_atg_range1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> start,
  ffi.Pointer<ffi.Void> end,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_range1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> start,
  ffi.Pointer<ffi.Void> end,
  int options_kind,
  int options_device,
);

typedef _c_atg_range_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> start,
  ffi.Pointer<ffi.Void> end,
);

typedef _dart_atg_range_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> start,
  ffi.Pointer<ffi.Void> end,
);

typedef _c_atg_real = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_real = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_reciprocal = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_reciprocal = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_reciprocal_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_reciprocal_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_reciprocal_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_reciprocal_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_reflection_pad1d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
);

typedef _dart_atg_reflection_pad1d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
);

typedef _c_atg_reflection_pad1d_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
);

typedef _dart_atg_reflection_pad1d_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
);

typedef _c_atg_reflection_pad1d_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
);

typedef _dart_atg_reflection_pad1d_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
);

typedef _c_atg_reflection_pad1d_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
);

typedef _dart_atg_reflection_pad1d_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
);

typedef _c_atg_reflection_pad2d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
);

typedef _dart_atg_reflection_pad2d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
);

typedef _c_atg_reflection_pad2d_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
);

typedef _dart_atg_reflection_pad2d_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
);

typedef _c_atg_reflection_pad2d_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
);

typedef _dart_atg_reflection_pad2d_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
);

typedef _c_atg_reflection_pad2d_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
);

typedef _dart_atg_reflection_pad2d_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
);

typedef _c_atg_relu = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_relu = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_relu_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_relu_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_remainder = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_remainder = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_remainder1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_remainder1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_remainder_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_remainder_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_remainder_1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_remainder_1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_remainder_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_remainder_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_remainder_out1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_remainder_out1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_renorm = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> p,
  ffi.Int64 dim,
  ffi.Pointer<ffi.Void> maxnorm,
);

typedef _dart_atg_renorm = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> p,
  int dim,
  ffi.Pointer<ffi.Void> maxnorm,
);

typedef _c_atg_renorm_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> p,
  ffi.Int64 dim,
  ffi.Pointer<ffi.Void> maxnorm,
);

typedef _dart_atg_renorm_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> p,
  int dim,
  ffi.Pointer<ffi.Void> maxnorm,
);

typedef _c_atg_renorm_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> p,
  ffi.Int64 dim,
  ffi.Pointer<ffi.Void> maxnorm,
);

typedef _dart_atg_renorm_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> p,
  int dim,
  ffi.Pointer<ffi.Void> maxnorm,
);

typedef _c_atg_repeat = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> repeats_data,
  ffi.Int32 repeats_len,
);

typedef _dart_atg_repeat = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> repeats_data,
  int repeats_len,
);

typedef _c_atg_repeat_interleave = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> repeats,
);

typedef _dart_atg_repeat_interleave = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> repeats,
);

typedef _c_atg_repeat_interleave1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> repeats,
  ffi.Int64 dim_v,
  ffi.Uint8 dim_null,
);

typedef _dart_atg_repeat_interleave1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> repeats,
  int dim_v,
  int dim_null,
);

typedef _c_atg_repeat_interleave2 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 repeats,
  ffi.Int64 dim_v,
  ffi.Uint8 dim_null,
);

typedef _dart_atg_repeat_interleave2 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int repeats,
  int dim_v,
  int dim_null,
);

typedef _c_atg_replication_pad1d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
);

typedef _dart_atg_replication_pad1d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
);

typedef _c_atg_replication_pad1d_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
);

typedef _dart_atg_replication_pad1d_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
);

typedef _c_atg_replication_pad1d_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
);

typedef _dart_atg_replication_pad1d_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
);

typedef _c_atg_replication_pad1d_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
);

typedef _dart_atg_replication_pad1d_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
);

typedef _c_atg_replication_pad2d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
);

typedef _dart_atg_replication_pad2d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
);

typedef _c_atg_replication_pad2d_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
);

typedef _dart_atg_replication_pad2d_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
);

typedef _c_atg_replication_pad2d_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
);

typedef _dart_atg_replication_pad2d_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
);

typedef _c_atg_replication_pad2d_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
);

typedef _dart_atg_replication_pad2d_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
);

typedef _c_atg_replication_pad3d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
);

typedef _dart_atg_replication_pad3d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
);

typedef _c_atg_replication_pad3d_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
);

typedef _dart_atg_replication_pad3d_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
);

typedef _c_atg_replication_pad3d_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
);

typedef _dart_atg_replication_pad3d_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
);

typedef _c_atg_replication_pad3d_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
);

typedef _dart_atg_replication_pad3d_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
);

typedef _c_atg_requires_grad_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 requires_grad,
);

typedef _dart_atg_requires_grad_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int requires_grad,
);

typedef _c_atg_reshape = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> shape_data,
  ffi.Int32 shape_len,
);

typedef _dart_atg_reshape = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> shape_data,
  int shape_len,
);

typedef _c_atg_reshape_as = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_reshape_as = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_resize_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
);

typedef _dart_atg_resize_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
);

typedef _c_atg_resize_as_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> the_template,
);

typedef _dart_atg_resize_as_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> the_template,
);

typedef _c_atg_rfft = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 signal_ndim,
  ffi.Int32 normalized,
  ffi.Int32 onesided,
);

typedef _dart_atg_rfft = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int signal_ndim,
  int normalized,
  int onesided,
);

typedef _c_atg_rnn_relu = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> hx,
  ffi.Pointer<ffi.Pointer<ffi.Void>> params_data,
  ffi.Int32 params_len,
  ffi.Int32 has_biases,
  ffi.Int64 num_layers,
  ffi.Double dropout,
  ffi.Int32 train,
  ffi.Int32 bidirectional,
  ffi.Int32 batch_first,
);

typedef _dart_atg_rnn_relu = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> hx,
  ffi.Pointer<ffi.Pointer<ffi.Void>> params_data,
  int params_len,
  int has_biases,
  int num_layers,
  double dropout,
  int train,
  int bidirectional,
  int batch_first,
);

typedef _c_atg_rnn_relu1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.Void> batch_sizes,
  ffi.Pointer<ffi.Void> hx,
  ffi.Pointer<ffi.Pointer<ffi.Void>> params_data,
  ffi.Int32 params_len,
  ffi.Int32 has_biases,
  ffi.Int64 num_layers,
  ffi.Double dropout,
  ffi.Int32 train,
  ffi.Int32 bidirectional,
);

typedef _dart_atg_rnn_relu1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.Void> batch_sizes,
  ffi.Pointer<ffi.Void> hx,
  ffi.Pointer<ffi.Pointer<ffi.Void>> params_data,
  int params_len,
  int has_biases,
  int num_layers,
  double dropout,
  int train,
  int bidirectional,
);

typedef _c_atg_rnn_relu_cell = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> hx,
  ffi.Pointer<ffi.Void> w_ih,
  ffi.Pointer<ffi.Void> w_hh,
  ffi.Pointer<ffi.Void> b_ih,
  ffi.Pointer<ffi.Void> b_hh,
);

typedef _dart_atg_rnn_relu_cell = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> hx,
  ffi.Pointer<ffi.Void> w_ih,
  ffi.Pointer<ffi.Void> w_hh,
  ffi.Pointer<ffi.Void> b_ih,
  ffi.Pointer<ffi.Void> b_hh,
);

typedef _c_atg_rnn_tanh = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> hx,
  ffi.Pointer<ffi.Pointer<ffi.Void>> params_data,
  ffi.Int32 params_len,
  ffi.Int32 has_biases,
  ffi.Int64 num_layers,
  ffi.Double dropout,
  ffi.Int32 train,
  ffi.Int32 bidirectional,
  ffi.Int32 batch_first,
);

typedef _dart_atg_rnn_tanh = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> hx,
  ffi.Pointer<ffi.Pointer<ffi.Void>> params_data,
  int params_len,
  int has_biases,
  int num_layers,
  double dropout,
  int train,
  int bidirectional,
  int batch_first,
);

typedef _c_atg_rnn_tanh1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.Void> batch_sizes,
  ffi.Pointer<ffi.Void> hx,
  ffi.Pointer<ffi.Pointer<ffi.Void>> params_data,
  ffi.Int32 params_len,
  ffi.Int32 has_biases,
  ffi.Int64 num_layers,
  ffi.Double dropout,
  ffi.Int32 train,
  ffi.Int32 bidirectional,
);

typedef _dart_atg_rnn_tanh1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.Void> batch_sizes,
  ffi.Pointer<ffi.Void> hx,
  ffi.Pointer<ffi.Pointer<ffi.Void>> params_data,
  int params_len,
  int has_biases,
  int num_layers,
  double dropout,
  int train,
  int bidirectional,
);

typedef _c_atg_rnn_tanh_cell = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> hx,
  ffi.Pointer<ffi.Void> w_ih,
  ffi.Pointer<ffi.Void> w_hh,
  ffi.Pointer<ffi.Void> b_ih,
  ffi.Pointer<ffi.Void> b_hh,
);

typedef _dart_atg_rnn_tanh_cell = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> input,
  ffi.Pointer<ffi.Void> hx,
  ffi.Pointer<ffi.Void> w_ih,
  ffi.Pointer<ffi.Void> w_hh,
  ffi.Pointer<ffi.Void> b_ih,
  ffi.Pointer<ffi.Void> b_hh,
);

typedef _c_atg_roll = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> shifts_data,
  ffi.Int32 shifts_len,
  ffi.Pointer<ffi.Int64> dims_data,
  ffi.Int32 dims_len,
);

typedef _dart_atg_roll = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> shifts_data,
  int shifts_len,
  ffi.Pointer<ffi.Int64> dims_data,
  int dims_len,
);

typedef _c_atg_rot90 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 k,
  ffi.Pointer<ffi.Int64> dims_data,
  ffi.Int32 dims_len,
);

typedef _dart_atg_rot90 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int k,
  ffi.Pointer<ffi.Int64> dims_data,
  int dims_len,
);

typedef _c_atg_round = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_round = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_round_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_round_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_round_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_round_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_rrelu = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 training,
);

typedef _dart_atg_rrelu = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int training,
);

typedef _c_atg_rrelu_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 training,
);

typedef _dart_atg_rrelu_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int training,
);

typedef _c_atg_rrelu_with_noise = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> noise,
  ffi.Int32 training,
);

typedef _dart_atg_rrelu_with_noise = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> noise,
  int training,
);

typedef _c_atg_rrelu_with_noise_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> noise,
  ffi.Int32 training,
);

typedef _dart_atg_rrelu_with_noise_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> noise,
  int training,
);

typedef _c_atg_rrelu_with_noise_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> noise,
  ffi.Pointer<ffi.Void> lower,
  ffi.Pointer<ffi.Void> upper,
  ffi.Int32 training,
  ffi.Int32 self_is_result,
);

typedef _dart_atg_rrelu_with_noise_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> noise,
  ffi.Pointer<ffi.Void> lower,
  ffi.Pointer<ffi.Void> upper,
  int training,
  int self_is_result,
);

typedef _c_atg_rrelu_with_noise_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> noise,
  ffi.Int32 training,
);

typedef _dart_atg_rrelu_with_noise_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> noise,
  int training,
);

typedef _c_atg_rsqrt = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_rsqrt = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_rsqrt_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_rsqrt_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_rsqrt_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_rsqrt_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_rsub = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_rsub = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_rsub1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_rsub1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_scalar_tensor = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> s,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_scalar_tensor = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> s,
  int options_kind,
  int options_device,
);

typedef _c_atg_scatter = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Pointer<ffi.Void> index,
  ffi.Pointer<ffi.Void> src,
);

typedef _dart_atg_scatter = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  ffi.Pointer<ffi.Void> index,
  ffi.Pointer<ffi.Void> src,
);

typedef _c_atg_scatter1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Pointer<ffi.Void> index,
  ffi.Pointer<ffi.Void> value,
);

typedef _dart_atg_scatter1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  ffi.Pointer<ffi.Void> index,
  ffi.Pointer<ffi.Void> value,
);

typedef _c_atg_scatter_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Pointer<ffi.Void> index,
  ffi.Pointer<ffi.Void> src,
);

typedef _dart_atg_scatter_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  ffi.Pointer<ffi.Void> index,
  ffi.Pointer<ffi.Void> src,
);

typedef _c_atg_scatter_1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Pointer<ffi.Void> index,
  ffi.Pointer<ffi.Void> value,
);

typedef _dart_atg_scatter_1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  ffi.Pointer<ffi.Void> index,
  ffi.Pointer<ffi.Void> value,
);

typedef _c_atg_scatter_add = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Pointer<ffi.Void> index,
  ffi.Pointer<ffi.Void> src,
);

typedef _dart_atg_scatter_add = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  ffi.Pointer<ffi.Void> index,
  ffi.Pointer<ffi.Void> src,
);

typedef _c_atg_scatter_add_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Pointer<ffi.Void> index,
  ffi.Pointer<ffi.Void> src,
);

typedef _dart_atg_scatter_add_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  ffi.Pointer<ffi.Void> index,
  ffi.Pointer<ffi.Void> src,
);

typedef _c_atg_searchsorted = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> sorted_sequence,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 out_int32,
  ffi.Int32 right,
);

typedef _dart_atg_searchsorted = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> sorted_sequence,
  ffi.Pointer<ffi.Void> self,
  int out_int32,
  int right,
);

typedef _c_atg_searchsorted1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> sorted_sequence,
  ffi.Pointer<ffi.Void> self_scalar,
  ffi.Int32 out_int32,
  ffi.Int32 right,
);

typedef _dart_atg_searchsorted1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> sorted_sequence,
  ffi.Pointer<ffi.Void> self_scalar,
  int out_int32,
  int right,
);

typedef _c_atg_searchsorted_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> sorted_sequence,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 out_int32,
  ffi.Int32 right,
);

typedef _dart_atg_searchsorted_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> sorted_sequence,
  ffi.Pointer<ffi.Void> self,
  int out_int32,
  int right,
);

typedef _c_atg_select = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int64 index,
);

typedef _dart_atg_select = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int index,
);

typedef _c_atg_selu = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_selu = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_selu_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_selu_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_set_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_set_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_set_1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> source,
);

typedef _dart_atg_set_1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> source,
);

typedef _c_atg_set_requires_grad = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 r,
);

typedef _dart_atg_set_requires_grad = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int r,
);

typedef _c_atg_sigmoid = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_sigmoid = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_sigmoid_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_sigmoid_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_sigmoid_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> output,
);

typedef _dart_atg_sigmoid_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> output,
);

typedef _c_atg_sigmoid_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> output,
);

typedef _dart_atg_sigmoid_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> output,
);

typedef _c_atg_sigmoid_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_sigmoid_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_sign = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_sign = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_sign_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_sign_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_sign_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_sign_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_sin = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_sin = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_sin_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_sin_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_sin_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_sin_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_sinh = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_sinh = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_sinh_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_sinh_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_sinh_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_sinh_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_slice = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int64 start,
  ffi.Int64 end,
  ffi.Int64 step,
);

typedef _dart_atg_slice = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int start,
  int end,
  int step,
);

typedef _c_atg_slogdet = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_slogdet = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_slow_conv3d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
);

typedef _dart_atg_slow_conv3d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
);

typedef _c_atg_slow_conv3d_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
);

typedef _dart_atg_slow_conv3d_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
);

typedef _c_atg_slow_conv_dilated2d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
);

typedef _dart_atg_slow_conv_dilated2d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
);

typedef _c_atg_slow_conv_dilated3d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
);

typedef _dart_atg_slow_conv_dilated3d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
);

typedef _c_atg_slow_conv_transpose2d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> output_padding_data,
  ffi.Int32 output_padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
);

typedef _dart_atg_slow_conv_transpose2d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> output_padding_data,
  int output_padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
);

typedef _c_atg_slow_conv_transpose2d_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> output_padding_data,
  ffi.Int32 output_padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
);

typedef _dart_atg_slow_conv_transpose2d_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> output_padding_data,
  int output_padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
);

typedef _c_atg_slow_conv_transpose3d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> output_padding_data,
  ffi.Int32 output_padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
);

typedef _dart_atg_slow_conv_transpose3d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> output_padding_data,
  int output_padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
);

typedef _c_atg_slow_conv_transpose3d_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  ffi.Int32 kernel_size_len,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  ffi.Int32 stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  ffi.Int32 padding_len,
  ffi.Pointer<ffi.Int64> output_padding_data,
  ffi.Int32 output_padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  ffi.Int32 dilation_len,
);

typedef _dart_atg_slow_conv_transpose3d_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> weight,
  ffi.Pointer<ffi.Int64> kernel_size_data,
  int kernel_size_len,
  ffi.Pointer<ffi.Void> bias,
  ffi.Pointer<ffi.Int64> stride_data,
  int stride_len,
  ffi.Pointer<ffi.Int64> padding_data,
  int padding_len,
  ffi.Pointer<ffi.Int64> output_padding_data,
  int output_padding_len,
  ffi.Pointer<ffi.Int64> dilation_data,
  int dilation_len,
);

typedef _c_atg_smm = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mat2,
);

typedef _dart_atg_smm = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mat2,
);

typedef _c_atg_smooth_l1_loss = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Int64 reduction,
);

typedef _dart_atg_smooth_l1_loss = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  int reduction,
);

typedef _c_atg_smooth_l1_loss_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Int64 reduction,
);

typedef _dart_atg_smooth_l1_loss_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  int reduction,
);

typedef _c_atg_smooth_l1_loss_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Int64 reduction,
);

typedef _dart_atg_smooth_l1_loss_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  int reduction,
);

typedef _c_atg_smooth_l1_loss_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Int64 reduction,
);

typedef _dart_atg_smooth_l1_loss_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  int reduction,
);

typedef _c_atg_soft_margin_loss = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Int64 reduction,
);

typedef _dart_atg_soft_margin_loss = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  int reduction,
);

typedef _c_atg_soft_margin_loss_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Int64 reduction,
);

typedef _dart_atg_soft_margin_loss_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  int reduction,
);

typedef _c_atg_soft_margin_loss_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Int64 reduction,
);

typedef _dart_atg_soft_margin_loss_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  int reduction,
);

typedef _c_atg_soft_margin_loss_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  ffi.Int64 reduction,
);

typedef _dart_atg_soft_margin_loss_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> target,
  int reduction,
);

typedef _c_atg_softmax = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int32 dtype,
);

typedef _dart_atg_softmax = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int dtype,
);

typedef _c_atg_softplus = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_softplus = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_softplus_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> beta,
  ffi.Pointer<ffi.Void> threshold,
  ffi.Pointer<ffi.Void> output,
);

typedef _dart_atg_softplus_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> beta,
  ffi.Pointer<ffi.Void> threshold,
  ffi.Pointer<ffi.Void> output,
);

typedef _c_atg_softplus_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> beta,
  ffi.Pointer<ffi.Void> threshold,
  ffi.Pointer<ffi.Void> output,
);

typedef _dart_atg_softplus_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> beta,
  ffi.Pointer<ffi.Void> threshold,
  ffi.Pointer<ffi.Void> output,
);

typedef _c_atg_softplus_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_softplus_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_softshrink = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_softshrink = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_softshrink_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> lambd,
);

typedef _dart_atg_softshrink_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> lambd,
);

typedef _c_atg_softshrink_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> lambd,
);

typedef _dart_atg_softshrink_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> lambd,
);

typedef _c_atg_softshrink_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_softshrink_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_solve = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> A,
);

typedef _dart_atg_solve = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> A,
);

typedef _c_atg_solve_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> solution,
  ffi.Pointer<ffi.Void> lu,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> A,
);

typedef _dart_atg_solve_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> solution,
  ffi.Pointer<ffi.Void> lu,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> A,
);

typedef _c_atg_sort = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int32 descending,
);

typedef _dart_atg_sort = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int descending,
);

typedef _c_atg_sort_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> values,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int32 descending,
);

typedef _dart_atg_sort_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> values,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int descending,
);

typedef _c_atg_sparse_coo_tensor = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_sparse_coo_tensor = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
  int options_kind,
  int options_device,
);

typedef _c_atg_sparse_coo_tensor1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> values,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_sparse_coo_tensor1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> values,
  int options_kind,
  int options_device,
);

typedef _c_atg_sparse_coo_tensor2 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> values,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_sparse_coo_tensor2 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> values,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
  int options_kind,
  int options_device,
);

typedef _c_atg_sparse_mask = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mask,
);

typedef _dart_atg_sparse_mask = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mask,
);

typedef _c_atg_sparse_resize_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
  ffi.Int64 sparse_dim,
  ffi.Int64 dense_dim,
);

typedef _dart_atg_sparse_resize_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
  int sparse_dim,
  int dense_dim,
);

typedef _c_atg_sparse_resize_and_clear_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
  ffi.Int64 sparse_dim,
  ffi.Int64 dense_dim,
);

typedef _dart_atg_sparse_resize_and_clear_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
  int sparse_dim,
  int dense_dim,
);

typedef _c_atg_split = ffi.Pointer<ffi.Pointer<ffi.Void>> Function(
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 split_size,
  ffi.Int64 dim,
);

typedef _dart_atg_split = ffi.Pointer<ffi.Pointer<ffi.Void>> Function(
  ffi.Pointer<ffi.Void> self,
  int split_size,
  int dim,
);

typedef _c_atg_split_with_sizes = ffi.Pointer<ffi.Pointer<ffi.Void>> Function(
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> split_sizes_data,
  ffi.Int32 split_sizes_len,
  ffi.Int64 dim,
);

typedef _dart_atg_split_with_sizes = ffi.Pointer<ffi.Pointer<ffi.Void>>
    Function(
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> split_sizes_data,
  int split_sizes_len,
  int dim,
);

typedef _c_atg_sqrt = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_sqrt = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_sqrt_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_sqrt_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_sqrt_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_sqrt_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_square = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_square = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_square_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_square_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_squeeze = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_squeeze = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_squeeze1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
);

typedef _dart_atg_squeeze1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
);

typedef _c_atg_squeeze_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_squeeze_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_squeeze_1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
);

typedef _dart_atg_squeeze_1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
);

typedef _c_atg_sspaddmm = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mat1,
  ffi.Pointer<ffi.Void> mat2,
);

typedef _dart_atg_sspaddmm = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mat1,
  ffi.Pointer<ffi.Void> mat2,
);

typedef _c_atg_sspaddmm_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mat1,
  ffi.Pointer<ffi.Void> mat2,
);

typedef _dart_atg_sspaddmm_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> mat1,
  ffi.Pointer<ffi.Void> mat2,
);

typedef _c_atg_stack = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
  ffi.Int32 tensors_len,
  ffi.Int64 dim,
);

typedef _dart_atg_stack = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
  int tensors_len,
  int dim,
);

typedef _c_atg_stack_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
  ffi.Int32 tensors_len,
  ffi.Int64 dim,
);

typedef _dart_atg_stack_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Pointer<ffi.Void>> tensors_data,
  int tensors_len,
  int dim,
);

typedef _c_atg_std = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 unbiased,
);

typedef _dart_atg_std = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int unbiased,
);

typedef _c_atg_std1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  ffi.Int32 dim_len,
  ffi.Int32 unbiased,
  ffi.Int32 keepdim,
);

typedef _dart_atg_std1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  int dim_len,
  int unbiased,
  int keepdim,
);

typedef _c_atg_std_mean = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 unbiased,
);

typedef _dart_atg_std_mean = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int unbiased,
);

typedef _c_atg_std_mean1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  ffi.Int32 dim_len,
  ffi.Int32 unbiased,
  ffi.Int32 keepdim,
);

typedef _dart_atg_std_mean1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  int dim_len,
  int unbiased,
  int keepdim,
);

typedef _c_atg_std_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  ffi.Int32 dim_len,
  ffi.Int32 unbiased,
  ffi.Int32 keepdim,
);

typedef _dart_atg_std_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  int dim_len,
  int unbiased,
  int keepdim,
);

typedef _c_atg_stft = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 n_fft,
  ffi.Int64 hop_length_v,
  ffi.Uint8 hop_length_null,
  ffi.Int64 win_length_v,
  ffi.Uint8 win_length_null,
  ffi.Pointer<ffi.Void> window,
  ffi.Int32 normalized,
  ffi.Int32 onesided,
);

typedef _dart_atg_stft = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int n_fft,
  int hop_length_v,
  int hop_length_null,
  int win_length_v,
  int win_length_null,
  ffi.Pointer<ffi.Void> window,
  int normalized,
  int onesided,
);

typedef _c_atg_sub = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_sub = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_sub1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_sub1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_sub_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_sub_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_sub_1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_sub_1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_sub_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_sub_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_sum = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 dtype,
);

typedef _dart_atg_sum = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dtype,
);

typedef _c_atg_sum1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  ffi.Int32 dim_len,
  ffi.Int32 keepdim,
  ffi.Int32 dtype,
);

typedef _dart_atg_sum1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  int dim_len,
  int keepdim,
  int dtype,
);

typedef _c_atg_sum_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  ffi.Int32 dim_len,
  ffi.Int32 keepdim,
  ffi.Int32 dtype,
);

typedef _dart_atg_sum_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  int dim_len,
  int keepdim,
  int dtype,
);

typedef _c_atg_sum_to_size = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
);

typedef _dart_atg_sum_to_size = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
);

typedef _c_atg_svd = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 some,
  ffi.Int32 compute_uv,
);

typedef _dart_atg_svd = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int some,
  int compute_uv,
);

typedef _c_atg_svd_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> U,
  ffi.Pointer<ffi.Void> S,
  ffi.Pointer<ffi.Void> V,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 some,
  ffi.Int32 compute_uv,
);

typedef _dart_atg_svd_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> U,
  ffi.Pointer<ffi.Void> S,
  ffi.Pointer<ffi.Void> V,
  ffi.Pointer<ffi.Void> self,
  int some,
  int compute_uv,
);

typedef _c_atg_symeig = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 eigenvectors,
  ffi.Int32 upper,
);

typedef _dart_atg_symeig = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int eigenvectors,
  int upper,
);

typedef _c_atg_symeig_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> e,
  ffi.Pointer<ffi.Void> V,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 eigenvectors,
  ffi.Int32 upper,
);

typedef _dart_atg_symeig_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> e,
  ffi.Pointer<ffi.Void> V,
  ffi.Pointer<ffi.Void> self,
  int eigenvectors,
  int upper,
);

typedef _c_atg_t = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_t = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_t_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_t_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_take = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> index,
);

typedef _dart_atg_take = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> index,
);

typedef _c_atg_take_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> index,
);

typedef _dart_atg_take_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> index,
);

typedef _c_atg_tan = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_tan = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_tan_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_tan_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_tan_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_tan_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_tanh = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_tanh = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_tanh_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_tanh_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_tanh_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> output,
);

typedef _dart_atg_tanh_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> output,
);

typedef _c_atg_tanh_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> output,
);

typedef _dart_atg_tanh_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> output,
);

typedef _c_atg_tanh_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_tanh_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_tensordot = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
  ffi.Pointer<ffi.Int64> dims_self_data,
  ffi.Int32 dims_self_len,
  ffi.Pointer<ffi.Int64> dims_other_data,
  ffi.Int32 dims_other_len,
);

typedef _dart_atg_tensordot = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
  ffi.Pointer<ffi.Int64> dims_self_data,
  int dims_self_len,
  ffi.Pointer<ffi.Int64> dims_other_data,
  int dims_other_len,
);

typedef _c_atg_threshold = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> threshold,
  ffi.Pointer<ffi.Void> value,
);

typedef _dart_atg_threshold = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> threshold,
  ffi.Pointer<ffi.Void> value,
);

typedef _c_atg_threshold_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> threshold,
  ffi.Pointer<ffi.Void> value,
);

typedef _dart_atg_threshold_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> threshold,
  ffi.Pointer<ffi.Void> value,
);

typedef _c_atg_threshold_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> threshold,
);

typedef _dart_atg_threshold_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> threshold,
);

typedef _c_atg_threshold_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> threshold,
  ffi.Pointer<ffi.Void> value,
);

typedef _dart_atg_threshold_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> threshold,
  ffi.Pointer<ffi.Void> value,
);

typedef _c_atg_to = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 device,
);

typedef _dart_atg_to = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int device,
);

typedef _c_atg_to1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
  ffi.Int32 non_blocking,
  ffi.Int32 copy,
);

typedef _dart_atg_to1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int options_kind,
  int options_device,
  int non_blocking,
  int copy,
);

typedef _c_atg_to2 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 dtype,
  ffi.Int32 non_blocking,
  ffi.Int32 copy,
);

typedef _dart_atg_to2 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dtype,
  int non_blocking,
  int copy,
);

typedef _c_atg_to3 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
  ffi.Int32 non_blocking,
  ffi.Int32 copy,
);

typedef _dart_atg_to3 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
  int non_blocking,
  int copy,
);

typedef _c_atg_to4 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 device,
  ffi.Int32 dtype,
  ffi.Int32 non_blocking,
  ffi.Int32 copy,
);

typedef _dart_atg_to4 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int device,
  int dtype,
  int non_blocking,
  int copy,
);

typedef _c_atg_to_dense = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_to_dense = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_to_dense_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  ffi.Pointer<ffi.Void> input,
);

typedef _dart_atg_to_dense_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  ffi.Pointer<ffi.Void> input,
);

typedef _c_atg_to_mkldnn = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_to_mkldnn = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_to_mkldnn_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  ffi.Pointer<ffi.Void> input,
);

typedef _dart_atg_to_mkldnn_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad,
  ffi.Pointer<ffi.Void> input,
);

typedef _c_atg_to_sparse = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_to_sparse = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_to_sparse1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 sparse_dim,
);

typedef _dart_atg_to_sparse1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int sparse_dim,
);

typedef _c_atg_topk = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 k,
  ffi.Int64 dim,
  ffi.Int32 largest,
  ffi.Int32 sorted,
);

typedef _dart_atg_topk = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int k,
  int dim,
  int largest,
  int sorted,
);

typedef _c_atg_topk_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> values,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 k,
  ffi.Int64 dim,
  ffi.Int32 largest,
  ffi.Int32 sorted,
);

typedef _dart_atg_topk_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> values,
  ffi.Pointer<ffi.Void> indices,
  ffi.Pointer<ffi.Void> self,
  int k,
  int dim,
  int largest,
  int sorted,
);

typedef _c_atg_totype = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 scalar_type,
);

typedef _dart_atg_totype = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int scalar_type,
);

typedef _c_atg_trace = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_trace = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_transpose = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim0,
  ffi.Int64 dim1,
);

typedef _dart_atg_transpose = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim0,
  int dim1,
);

typedef _c_atg_transpose_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim0,
  ffi.Int64 dim1,
);

typedef _dart_atg_transpose_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim0,
  int dim1,
);

typedef _c_atg_trapz = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> y,
  ffi.Pointer<ffi.Void> x,
  ffi.Int64 dim,
);

typedef _dart_atg_trapz = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> y,
  ffi.Pointer<ffi.Void> x,
  int dim,
);

typedef _c_atg_trapz1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> y,
  ffi.Double dx,
  ffi.Int64 dim,
);

typedef _dart_atg_trapz1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> y,
  double dx,
  int dim,
);

typedef _c_atg_triangular_solve = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> A,
  ffi.Int32 upper,
  ffi.Int32 transpose,
  ffi.Int32 unitriangular,
);

typedef _dart_atg_triangular_solve = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> A,
  int upper,
  int transpose,
  int unitriangular,
);

typedef _c_atg_triangular_solve_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> X,
  ffi.Pointer<ffi.Void> M,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> A,
  ffi.Int32 upper,
  ffi.Int32 transpose,
  ffi.Int32 unitriangular,
);

typedef _dart_atg_triangular_solve_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> X,
  ffi.Pointer<ffi.Void> M,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> A,
  int upper,
  int transpose,
  int unitriangular,
);

typedef _c_atg_tril = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 diagonal,
);

typedef _dart_atg_tril = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int diagonal,
);

typedef _c_atg_tril_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 diagonal,
);

typedef _dart_atg_tril_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int diagonal,
);

typedef _c_atg_tril_indices = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Int64 row,
  ffi.Int64 col,
  ffi.Int64 offset,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_tril_indices = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  int row,
  int col,
  int offset,
  int options_kind,
  int options_device,
);

typedef _c_atg_tril_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 diagonal,
);

typedef _dart_atg_tril_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  int diagonal,
);

typedef _c_atg_triplet_margin_loss = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> anchor,
  ffi.Pointer<ffi.Void> positive,
  ffi.Pointer<ffi.Void> negative,
  ffi.Double margin,
  ffi.Double p,
  ffi.Double eps,
  ffi.Int32 swap,
  ffi.Int64 reduction,
);

typedef _dart_atg_triplet_margin_loss = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> anchor,
  ffi.Pointer<ffi.Void> positive,
  ffi.Pointer<ffi.Void> negative,
  double margin,
  double p,
  double eps,
  int swap,
  int reduction,
);

typedef _c_atg_triu = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 diagonal,
);

typedef _dart_atg_triu = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int diagonal,
);

typedef _c_atg_triu_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 diagonal,
);

typedef _dart_atg_triu_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int diagonal,
);

typedef _c_atg_triu_indices = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Int64 row,
  ffi.Int64 col,
  ffi.Int64 offset,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_triu_indices = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  int row,
  int col,
  int offset,
  int options_kind,
  int options_device,
);

typedef _c_atg_triu_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 diagonal,
);

typedef _dart_atg_triu_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  int diagonal,
);

typedef _c_atg_true_divide = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_true_divide = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_true_divide1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_true_divide1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_true_divide_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_true_divide_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_true_divide_1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_true_divide_1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_true_divide_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_true_divide_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_trunc = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_trunc = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_trunc_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_trunc_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_trunc_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_trunc_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_type_as = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_type_as = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_unbind = ffi.Pointer<ffi.Pointer<ffi.Void>> Function(
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
);

typedef _dart_atg_unbind = ffi.Pointer<ffi.Pointer<ffi.Void>> Function(
  ffi.Pointer<ffi.Void> self,
  int dim,
);

typedef _c_atg_unfold = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dimension,
  ffi.Int64 size,
  ffi.Int64 step,
);

typedef _dart_atg_unfold = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dimension,
  int size,
  int step,
);

typedef _c_atg_unfold_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_in,
  ffi.Pointer<ffi.Int64> input_sizes_data,
  ffi.Int32 input_sizes_len,
  ffi.Int64 dim,
  ffi.Int64 size,
  ffi.Int64 step,
);

typedef _dart_atg_unfold_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_in,
  ffi.Pointer<ffi.Int64> input_sizes_data,
  int input_sizes_len,
  int dim,
  int size,
  int step,
);

typedef _c_atg_uniform_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Double from,
  ffi.Double to,
);

typedef _dart_atg_uniform_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  double from,
  double to,
);

typedef _c_atg_unique_consecutive = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 return_inverse,
  ffi.Int32 return_counts,
  ffi.Int64 dim_v,
  ffi.Uint8 dim_null,
);

typedef _dart_atg_unique_consecutive = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int return_inverse,
  int return_counts,
  int dim_v,
  int dim_null,
);

typedef _c_atg_unique_dim = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int32 sorted,
  ffi.Int32 return_inverse,
  ffi.Int32 return_counts,
);

typedef _dart_atg_unique_dim = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int sorted,
  int return_inverse,
  int return_counts,
);

typedef _c_atg_unique_dim_consecutive = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
  ffi.Int32 return_inverse,
  ffi.Int32 return_counts,
);

typedef _dart_atg_unique_dim_consecutive = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
  int return_inverse,
  int return_counts,
);

typedef _c_atg_unsqueeze = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
);

typedef _dart_atg_unsqueeze = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
);

typedef _c_atg_unsqueeze_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int64 dim,
);

typedef _dart_atg_unsqueeze_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int dim,
);

typedef _c_atg_upsample_bicubic2d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Int32 align_corners,
  ffi.Double scales_h_v,
  ffi.Uint8 scales_h_null,
  ffi.Double scales_w_v,
  ffi.Uint8 scales_w_null,
);

typedef _dart_atg_upsample_bicubic2d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  int align_corners,
  double scales_h_v,
  int scales_h_null,
  double scales_w_v,
  int scales_w_null,
);

typedef _c_atg_upsample_bicubic2d_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Pointer<ffi.Int64> input_size_data,
  ffi.Int32 input_size_len,
  ffi.Int32 align_corners,
  ffi.Double scales_h_v,
  ffi.Uint8 scales_h_null,
  ffi.Double scales_w_v,
  ffi.Uint8 scales_w_null,
);

typedef _dart_atg_upsample_bicubic2d_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  ffi.Pointer<ffi.Int64> input_size_data,
  int input_size_len,
  int align_corners,
  double scales_h_v,
  int scales_h_null,
  double scales_w_v,
  int scales_w_null,
);

typedef _c_atg_upsample_bicubic2d_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Pointer<ffi.Int64> input_size_data,
  ffi.Int32 input_size_len,
  ffi.Int32 align_corners,
  ffi.Double scales_h_v,
  ffi.Uint8 scales_h_null,
  ffi.Double scales_w_v,
  ffi.Uint8 scales_w_null,
);

typedef _dart_atg_upsample_bicubic2d_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  ffi.Pointer<ffi.Int64> input_size_data,
  int input_size_len,
  int align_corners,
  double scales_h_v,
  int scales_h_null,
  double scales_w_v,
  int scales_w_null,
);

typedef _c_atg_upsample_bicubic2d_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Int32 align_corners,
  ffi.Double scales_h_v,
  ffi.Uint8 scales_h_null,
  ffi.Double scales_w_v,
  ffi.Uint8 scales_w_null,
);

typedef _dart_atg_upsample_bicubic2d_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  int align_corners,
  double scales_h_v,
  int scales_h_null,
  double scales_w_v,
  int scales_w_null,
);

typedef _c_atg_upsample_bilinear2d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Int32 align_corners,
  ffi.Double scales_h_v,
  ffi.Uint8 scales_h_null,
  ffi.Double scales_w_v,
  ffi.Uint8 scales_w_null,
);

typedef _dart_atg_upsample_bilinear2d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  int align_corners,
  double scales_h_v,
  int scales_h_null,
  double scales_w_v,
  int scales_w_null,
);

typedef _c_atg_upsample_bilinear2d_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Pointer<ffi.Int64> input_size_data,
  ffi.Int32 input_size_len,
  ffi.Int32 align_corners,
  ffi.Double scales_h_v,
  ffi.Uint8 scales_h_null,
  ffi.Double scales_w_v,
  ffi.Uint8 scales_w_null,
);

typedef _dart_atg_upsample_bilinear2d_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  ffi.Pointer<ffi.Int64> input_size_data,
  int input_size_len,
  int align_corners,
  double scales_h_v,
  int scales_h_null,
  double scales_w_v,
  int scales_w_null,
);

typedef _c_atg_upsample_bilinear2d_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Pointer<ffi.Int64> input_size_data,
  ffi.Int32 input_size_len,
  ffi.Int32 align_corners,
  ffi.Double scales_h_v,
  ffi.Uint8 scales_h_null,
  ffi.Double scales_w_v,
  ffi.Uint8 scales_w_null,
);

typedef _dart_atg_upsample_bilinear2d_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  ffi.Pointer<ffi.Int64> input_size_data,
  int input_size_len,
  int align_corners,
  double scales_h_v,
  int scales_h_null,
  double scales_w_v,
  int scales_w_null,
);

typedef _c_atg_upsample_bilinear2d_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Int32 align_corners,
  ffi.Double scales_h_v,
  ffi.Uint8 scales_h_null,
  ffi.Double scales_w_v,
  ffi.Uint8 scales_w_null,
);

typedef _dart_atg_upsample_bilinear2d_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  int align_corners,
  double scales_h_v,
  int scales_h_null,
  double scales_w_v,
  int scales_w_null,
);

typedef _c_atg_upsample_linear1d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Int32 align_corners,
  ffi.Double scales_v,
  ffi.Uint8 scales_null,
);

typedef _dart_atg_upsample_linear1d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  int align_corners,
  double scales_v,
  int scales_null,
);

typedef _c_atg_upsample_linear1d_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Pointer<ffi.Int64> input_size_data,
  ffi.Int32 input_size_len,
  ffi.Int32 align_corners,
  ffi.Double scales_v,
  ffi.Uint8 scales_null,
);

typedef _dart_atg_upsample_linear1d_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  ffi.Pointer<ffi.Int64> input_size_data,
  int input_size_len,
  int align_corners,
  double scales_v,
  int scales_null,
);

typedef _c_atg_upsample_linear1d_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Pointer<ffi.Int64> input_size_data,
  ffi.Int32 input_size_len,
  ffi.Int32 align_corners,
  ffi.Double scales_v,
  ffi.Uint8 scales_null,
);

typedef _dart_atg_upsample_linear1d_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  ffi.Pointer<ffi.Int64> input_size_data,
  int input_size_len,
  int align_corners,
  double scales_v,
  int scales_null,
);

typedef _c_atg_upsample_linear1d_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Int32 align_corners,
  ffi.Double scales_v,
  ffi.Uint8 scales_null,
);

typedef _dart_atg_upsample_linear1d_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  int align_corners,
  double scales_v,
  int scales_null,
);

typedef _c_atg_upsample_nearest1d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Double scales_v,
  ffi.Uint8 scales_null,
);

typedef _dart_atg_upsample_nearest1d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  double scales_v,
  int scales_null,
);

typedef _c_atg_upsample_nearest1d_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Pointer<ffi.Int64> input_size_data,
  ffi.Int32 input_size_len,
  ffi.Double scales_v,
  ffi.Uint8 scales_null,
);

typedef _dart_atg_upsample_nearest1d_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  ffi.Pointer<ffi.Int64> input_size_data,
  int input_size_len,
  double scales_v,
  int scales_null,
);

typedef _c_atg_upsample_nearest1d_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Pointer<ffi.Int64> input_size_data,
  ffi.Int32 input_size_len,
  ffi.Double scales_v,
  ffi.Uint8 scales_null,
);

typedef _dart_atg_upsample_nearest1d_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  ffi.Pointer<ffi.Int64> input_size_data,
  int input_size_len,
  double scales_v,
  int scales_null,
);

typedef _c_atg_upsample_nearest1d_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Double scales_v,
  ffi.Uint8 scales_null,
);

typedef _dart_atg_upsample_nearest1d_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  double scales_v,
  int scales_null,
);

typedef _c_atg_upsample_nearest2d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Double scales_h_v,
  ffi.Uint8 scales_h_null,
  ffi.Double scales_w_v,
  ffi.Uint8 scales_w_null,
);

typedef _dart_atg_upsample_nearest2d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  double scales_h_v,
  int scales_h_null,
  double scales_w_v,
  int scales_w_null,
);

typedef _c_atg_upsample_nearest2d_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Pointer<ffi.Int64> input_size_data,
  ffi.Int32 input_size_len,
  ffi.Double scales_h_v,
  ffi.Uint8 scales_h_null,
  ffi.Double scales_w_v,
  ffi.Uint8 scales_w_null,
);

typedef _dart_atg_upsample_nearest2d_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  ffi.Pointer<ffi.Int64> input_size_data,
  int input_size_len,
  double scales_h_v,
  int scales_h_null,
  double scales_w_v,
  int scales_w_null,
);

typedef _c_atg_upsample_nearest2d_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Pointer<ffi.Int64> input_size_data,
  ffi.Int32 input_size_len,
  ffi.Double scales_h_v,
  ffi.Uint8 scales_h_null,
  ffi.Double scales_w_v,
  ffi.Uint8 scales_w_null,
);

typedef _dart_atg_upsample_nearest2d_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  ffi.Pointer<ffi.Int64> input_size_data,
  int input_size_len,
  double scales_h_v,
  int scales_h_null,
  double scales_w_v,
  int scales_w_null,
);

typedef _c_atg_upsample_nearest2d_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Double scales_h_v,
  ffi.Uint8 scales_h_null,
  ffi.Double scales_w_v,
  ffi.Uint8 scales_w_null,
);

typedef _dart_atg_upsample_nearest2d_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  double scales_h_v,
  int scales_h_null,
  double scales_w_v,
  int scales_w_null,
);

typedef _c_atg_upsample_nearest3d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Double scales_d_v,
  ffi.Uint8 scales_d_null,
  ffi.Double scales_h_v,
  ffi.Uint8 scales_h_null,
  ffi.Double scales_w_v,
  ffi.Uint8 scales_w_null,
);

typedef _dart_atg_upsample_nearest3d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  double scales_d_v,
  int scales_d_null,
  double scales_h_v,
  int scales_h_null,
  double scales_w_v,
  int scales_w_null,
);

typedef _c_atg_upsample_nearest3d_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Pointer<ffi.Int64> input_size_data,
  ffi.Int32 input_size_len,
  ffi.Double scales_d_v,
  ffi.Uint8 scales_d_null,
  ffi.Double scales_h_v,
  ffi.Uint8 scales_h_null,
  ffi.Double scales_w_v,
  ffi.Uint8 scales_w_null,
);

typedef _dart_atg_upsample_nearest3d_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  ffi.Pointer<ffi.Int64> input_size_data,
  int input_size_len,
  double scales_d_v,
  int scales_d_null,
  double scales_h_v,
  int scales_h_null,
  double scales_w_v,
  int scales_w_null,
);

typedef _c_atg_upsample_nearest3d_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Pointer<ffi.Int64> input_size_data,
  ffi.Int32 input_size_len,
  ffi.Double scales_d_v,
  ffi.Uint8 scales_d_null,
  ffi.Double scales_h_v,
  ffi.Uint8 scales_h_null,
  ffi.Double scales_w_v,
  ffi.Uint8 scales_w_null,
);

typedef _dart_atg_upsample_nearest3d_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  ffi.Pointer<ffi.Int64> input_size_data,
  int input_size_len,
  double scales_d_v,
  int scales_d_null,
  double scales_h_v,
  int scales_h_null,
  double scales_w_v,
  int scales_w_null,
);

typedef _c_atg_upsample_nearest3d_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Double scales_d_v,
  ffi.Uint8 scales_d_null,
  ffi.Double scales_h_v,
  ffi.Uint8 scales_h_null,
  ffi.Double scales_w_v,
  ffi.Uint8 scales_w_null,
);

typedef _dart_atg_upsample_nearest3d_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  double scales_d_v,
  int scales_d_null,
  double scales_h_v,
  int scales_h_null,
  double scales_w_v,
  int scales_w_null,
);

typedef _c_atg_upsample_trilinear3d = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Int32 align_corners,
  ffi.Double scales_d_v,
  ffi.Uint8 scales_d_null,
  ffi.Double scales_h_v,
  ffi.Uint8 scales_h_null,
  ffi.Double scales_w_v,
  ffi.Uint8 scales_w_null,
);

typedef _dart_atg_upsample_trilinear3d = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  int align_corners,
  double scales_d_v,
  int scales_d_null,
  double scales_h_v,
  int scales_h_null,
  double scales_w_v,
  int scales_w_null,
);

typedef _c_atg_upsample_trilinear3d_backward = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Pointer<ffi.Int64> input_size_data,
  ffi.Int32 input_size_len,
  ffi.Int32 align_corners,
  ffi.Double scales_d_v,
  ffi.Uint8 scales_d_null,
  ffi.Double scales_h_v,
  ffi.Uint8 scales_h_null,
  ffi.Double scales_w_v,
  ffi.Uint8 scales_w_null,
);

typedef _dart_atg_upsample_trilinear3d_backward = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  ffi.Pointer<ffi.Int64> input_size_data,
  int input_size_len,
  int align_corners,
  double scales_d_v,
  int scales_d_null,
  double scales_h_v,
  int scales_h_null,
  double scales_w_v,
  int scales_w_null,
);

typedef _c_atg_upsample_trilinear3d_backward_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Pointer<ffi.Int64> input_size_data,
  ffi.Int32 input_size_len,
  ffi.Int32 align_corners,
  ffi.Double scales_d_v,
  ffi.Uint8 scales_d_null,
  ffi.Double scales_h_v,
  ffi.Uint8 scales_h_null,
  ffi.Double scales_w_v,
  ffi.Uint8 scales_w_null,
);

typedef _dart_atg_upsample_trilinear3d_backward_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> grad_input,
  ffi.Pointer<ffi.Void> grad_output,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  ffi.Pointer<ffi.Int64> input_size_data,
  int input_size_len,
  int align_corners,
  double scales_d_v,
  int scales_d_null,
  double scales_h_v,
  int scales_h_null,
  double scales_w_v,
  int scales_w_null,
);

typedef _c_atg_upsample_trilinear3d_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  ffi.Int32 output_size_len,
  ffi.Int32 align_corners,
  ffi.Double scales_d_v,
  ffi.Uint8 scales_d_null,
  ffi.Double scales_h_v,
  ffi.Uint8 scales_h_null,
  ffi.Double scales_w_v,
  ffi.Uint8 scales_w_null,
);

typedef _dart_atg_upsample_trilinear3d_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> output_size_data,
  int output_size_len,
  int align_corners,
  double scales_d_v,
  int scales_d_null,
  double scales_h_v,
  int scales_h_null,
  double scales_w_v,
  int scales_w_null,
);

typedef _c_atg_values = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_values = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_vander = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> x,
  ffi.Int64 n_v,
  ffi.Uint8 n_null,
  ffi.Int32 increasing,
);

typedef _dart_atg_vander = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> x,
  int n_v,
  int n_null,
  int increasing,
);

typedef _c_atg_var = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 unbiased,
);

typedef _dart_atg_var = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int unbiased,
);

typedef _c_atg_var1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  ffi.Int32 dim_len,
  ffi.Int32 unbiased,
  ffi.Int32 keepdim,
);

typedef _dart_atg_var1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  int dim_len,
  int unbiased,
  int keepdim,
);

typedef _c_atg_var_mean = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Int32 unbiased,
);

typedef _dart_atg_var_mean = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  int unbiased,
);

typedef _c_atg_var_mean1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  ffi.Int32 dim_len,
  ffi.Int32 unbiased,
  ffi.Int32 keepdim,
);

typedef _dart_atg_var_mean1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  int dim_len,
  int unbiased,
  int keepdim,
);

typedef _c_atg_var_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  ffi.Int32 dim_len,
  ffi.Int32 unbiased,
  ffi.Int32 keepdim,
);

typedef _dart_atg_var_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> dim_data,
  int dim_len,
  int unbiased,
  int keepdim,
);

typedef _c_atg_view = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
);

typedef _dart_atg_view = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
);

typedef _c_atg_view_as = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_view_as = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_view_as_complex = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_view_as_complex = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_view_as_real = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_view_as_real = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_where = ffi.Pointer<ffi.Pointer<ffi.Void>> Function(
  ffi.Pointer<ffi.Void> condition,
);

typedef _dart_atg_where = ffi.Pointer<ffi.Pointer<ffi.Void>> Function(
  ffi.Pointer<ffi.Void> condition,
);

typedef _c_atg_where1 = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> condition,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _dart_atg_where1 = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> condition,
  ffi.Pointer<ffi.Void> self,
  ffi.Pointer<ffi.Void> other,
);

typedef _c_atg_zero_ = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_zero_ = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_zeros = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
  ffi.Int32 options_kind,
  ffi.Int32 options_device,
);

typedef _dart_atg_zeros = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
  int options_kind,
  int options_device,
);

typedef _c_atg_zeros_like = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _dart_atg_zeros_like = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> self,
);

typedef _c_atg_zeros_out = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Int64> size_data,
  ffi.Int32 size_len,
);

typedef _dart_atg_zeros_out = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg0,
  ffi.Pointer<ffi.Void> out,
  ffi.Pointer<ffi.Int64> size_data,
  int size_len,
);

typedef _typedefC_1 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);
